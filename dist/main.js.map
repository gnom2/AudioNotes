{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/standardized-audio-context/build/es2019/globals.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js","webpack:///./node_modules/standardized-audio-context/build/es2019/constants.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/invalid-state-error.js","webpack:///./node_modules/tone/build/esm/version.js","webpack:///./node_modules/tone/build/esm/core/util/Debug.js","webpack:///./node_modules/tone/build/esm/core/util/TypeCheck.js","webpack:///./node_modules/tone/build/esm/core/context/AudioContext.js","webpack:///./node_modules/tslib/tslib.es6.js","webpack:///./node_modules/tone/build/esm/core/clock/Ticker.js","webpack:///./node_modules/tone/build/esm/core/util/AdvancedTypeCheck.js","webpack:///./node_modules/tone/build/esm/core/util/Defaults.js","webpack:///./node_modules/tone/build/esm/core/Tone.js","webpack:///./node_modules/tone/build/esm/core/util/Math.js","webpack:///./node_modules/tone/build/esm/core/util/Timeline.js","webpack:///./node_modules/tone/build/esm/core/context/ContextInitialization.js","webpack:///./node_modules/tone/build/esm/core/util/Emitter.js","webpack:///./node_modules/tone/build/esm/core/context/BaseContext.js","webpack:///./node_modules/tone/build/esm/core/context/Context.js","webpack:///./node_modules/tone/build/esm/core/util/Interface.js","webpack:///./node_modules/tone/build/esm/core/context/ToneAudioBuffer.js","webpack:///./node_modules/tone/build/esm/core/context/OfflineContext.js","webpack:///./node_modules/tone/build/esm/core/Global.js","webpack:///./node_modules/tone/build/esm/core/context/DummyContext.js","webpack:///./node_modules/tone/build/esm/core/type/Conversions.js","webpack:///./node_modules/tone/build/esm/core/type/TimeBase.js","webpack:///./node_modules/tone/build/esm/core/type/Time.js","webpack:///./node_modules/tone/build/esm/core/type/Frequency.js","webpack:///./node_modules/tone/build/esm/core/type/TransportTime.js","webpack:///./node_modules/tone/build/esm/core/context/ToneWithContext.js","webpack:///./node_modules/tone/build/esm/core/util/StateTimeline.js","webpack:///./node_modules/tone/build/esm/core/context/Param.js","webpack:///./node_modules/tone/build/esm/core/context/ToneAudioNode.js","webpack:///./node_modules/tone/build/esm/core/context/Gain.js","webpack:///./node_modules/tone/build/esm/source/OneShotSource.js","webpack:///./node_modules/tone/build/esm/signal/ToneConstantSource.js","webpack:///./node_modules/tone/build/esm/signal/Signal.js","webpack:///./node_modules/tone/build/esm/core/clock/TickParam.js","webpack:///./node_modules/tone/build/esm/core/clock/TickSignal.js","webpack:///./node_modules/tone/build/esm/core/clock/TickSource.js","webpack:///./node_modules/tone/build/esm/core/clock/Clock.js","webpack:///./node_modules/tone/build/esm/core/util/TimelineValue.js","webpack:///./node_modules/tone/build/esm/core/type/Ticks.js","webpack:///./node_modules/tone/build/esm/core/util/IntervalTimeline.js","webpack:///./node_modules/tone/build/esm/core/clock/TransportEvent.js","webpack:///./node_modules/tone/build/esm/core/clock/TransportRepeatEvent.js","webpack:///./node_modules/tone/build/esm/core/clock/Transport.js","webpack:///./node_modules/tone/build/esm/core/context/Delay.js","webpack:///./node_modules/tone/build/esm/component/channel/Volume.js","webpack:///./node_modules/tone/build/esm/core/context/Destination.js","webpack:///./node_modules/tone/build/esm/core/context/Offline.js","webpack:///./node_modules/tone/build/esm/core/context/ToneAudioBuffers.js","webpack:///./node_modules/tone/build/esm/core/type/Midi.js","webpack:///./node_modules/tone/build/esm/core/util/Draw.js","webpack:///./node_modules/tone/build/esm/source/Source.js","webpack:///./node_modules/tone/build/esm/source/buffer/ToneBufferSource.js","webpack:///./node_modules/tone/build/esm/source/Noise.js","webpack:///./node_modules/tone/build/esm/source/UserMedia.js","webpack:///./node_modules/tone/build/esm/source/oscillator/OscillatorInterface.js","webpack:///./node_modules/tone/build/esm/source/oscillator/ToneOscillatorNode.js","webpack:///./node_modules/tone/build/esm/source/oscillator/Oscillator.js","webpack:///./node_modules/tone/build/esm/signal/SignalOperator.js","webpack:///./node_modules/tone/build/esm/signal/WaveShaper.js","webpack:///./node_modules/tone/build/esm/signal/AudioToGain.js","webpack:///./node_modules/tone/build/esm/signal/Multiply.js","webpack:///./node_modules/tone/build/esm/source/oscillator/AMOscillator.js","webpack:///./node_modules/tone/build/esm/source/oscillator/FMOscillator.js","webpack:///./node_modules/tone/build/esm/source/oscillator/PulseOscillator.js","webpack:///./node_modules/tone/build/esm/source/oscillator/FatOscillator.js","webpack:///./node_modules/tone/build/esm/source/oscillator/PWMOscillator.js","webpack:///./node_modules/tone/build/esm/source/oscillator/OmniOscillator.js","webpack:///./node_modules/tone/build/esm/signal/Add.js","webpack:///./node_modules/tone/build/esm/signal/Scale.js","webpack:///./node_modules/tone/build/esm/signal/Zero.js","webpack:///./node_modules/tone/build/esm/source/oscillator/LFO.js","webpack:///./node_modules/tone/build/esm/core/util/Decorator.js","webpack:///./node_modules/tone/build/esm/source/buffer/Player.js","webpack:///./node_modules/tone/build/esm/source/buffer/Players.js","webpack:///./node_modules/tone/build/esm/source/buffer/GrainPlayer.js","webpack:///./node_modules/tone/build/esm/signal/Abs.js","webpack:///./node_modules/tone/build/esm/signal/GainToAudio.js","webpack:///./node_modules/tone/build/esm/signal/Negate.js","webpack:///./node_modules/tone/build/esm/signal/Subtract.js","webpack:///./node_modules/tone/build/esm/signal/GreaterThanZero.js","webpack:///./node_modules/tone/build/esm/signal/GreaterThan.js","webpack:///./node_modules/tone/build/esm/signal/Pow.js","webpack:///./node_modules/tone/build/esm/signal/ScaleExp.js","webpack:///./node_modules/tone/build/esm/signal/SyncedSignal.js","webpack:///./node_modules/tone/build/esm/component/envelope/Envelope.js","webpack:///./node_modules/tone/build/esm/instrument/Instrument.js","webpack:///./node_modules/tone/build/esm/instrument/Monophonic.js","webpack:///./node_modules/tone/build/esm/component/envelope/AmplitudeEnvelope.js","webpack:///./node_modules/tone/build/esm/instrument/Synth.js","webpack:///./node_modules/tone/build/esm/instrument/ModulationSynth.js","webpack:///./node_modules/tone/build/esm/instrument/AMSynth.js","webpack:///./node_modules/tone/build/esm/component/filter/Filter.js","webpack:///./node_modules/tone/build/esm/component/envelope/FrequencyEnvelope.js","webpack:///./node_modules/tone/build/esm/instrument/MonoSynth.js","webpack:///./node_modules/tone/build/esm/instrument/DuoSynth.js","webpack:///./node_modules/tone/build/esm/instrument/FMSynth.js","webpack:///./node_modules/tone/build/esm/instrument/MetalSynth.js","webpack:///./node_modules/tone/build/esm/instrument/MembraneSynth.js","webpack:///./node_modules/tone/build/esm/instrument/NoiseSynth.js","webpack:///./node_modules/tone/build/esm/core/worklet/WorkletGlobalScope.js","webpack:///./node_modules/tone/build/esm/core/worklet/ToneAudioWorklet.js","webpack:///./node_modules/tone/build/esm/core/worklet/ToneAudioWorkletProcessor.worklet.js","webpack:///./node_modules/tone/build/esm/core/worklet/AudioWorkletProcessor.worklet.js","webpack:///./node_modules/tone/build/esm/core/worklet/SingleIOProcessor.worklet.js","webpack:///./node_modules/tone/build/esm/core/worklet/DelayLine.worklet.js","webpack:///./node_modules/tone/build/esm/component/filter/FeedbackCombFilter.worklet.js","webpack:///./node_modules/tone/build/esm/component/filter/FeedbackCombFilter.js","webpack:///./node_modules/tone/build/esm/component/filter/OnePoleFilter.js","webpack:///./node_modules/tone/build/esm/component/filter/LowpassCombFilter.js","webpack:///./node_modules/tone/build/esm/instrument/PluckSynth.js","webpack:///./node_modules/tone/build/esm/instrument/PolySynth.js","webpack:///./node_modules/tone/build/esm/instrument/Sampler.js","webpack:///./node_modules/tone/build/esm/event/ToneEvent.js","webpack:///./node_modules/tone/build/esm/event/Loop.js","webpack:///./node_modules/tone/build/esm/event/Part.js","webpack:///./node_modules/tone/build/esm/event/PatternGenerator.js","webpack:///./node_modules/tone/build/esm/event/Pattern.js","webpack:///./node_modules/tone/build/esm/event/Sequence.js","webpack:///./node_modules/tone/build/esm/component/channel/CrossFade.js","webpack:///./node_modules/tone/build/esm/effect/Effect.js","webpack:///./node_modules/tone/build/esm/effect/LFOEffect.js","webpack:///./node_modules/tone/build/esm/effect/AutoFilter.js","webpack:///./node_modules/tone/build/esm/component/channel/Panner.js","webpack:///./node_modules/tone/build/esm/effect/AutoPanner.js","webpack:///./node_modules/tone/build/esm/component/analysis/Follower.js","webpack:///./node_modules/tone/build/esm/effect/AutoWah.js","webpack:///./node_modules/tone/build/esm/effect/BitCrusher.worklet.js","webpack:///./node_modules/tone/build/esm/effect/BitCrusher.js","webpack:///./node_modules/tone/build/esm/effect/Chebyshev.js","webpack:///./node_modules/tone/build/esm/component/channel/Split.js","webpack:///./node_modules/tone/build/esm/component/channel/Merge.js","webpack:///./node_modules/tone/build/esm/effect/StereoEffect.js","webpack:///./node_modules/tone/build/esm/effect/StereoFeedbackEffect.js","webpack:///./node_modules/tone/build/esm/effect/Chorus.js","webpack:///./node_modules/tone/build/esm/effect/Distortion.js","webpack:///./node_modules/tone/build/esm/effect/FeedbackEffect.js","webpack:///./node_modules/tone/build/esm/effect/FeedbackDelay.js","webpack:///./node_modules/tone/build/esm/component/filter/PhaseShiftAllpass.js","webpack:///./node_modules/tone/build/esm/effect/FrequencyShifter.js","webpack:///./node_modules/tone/build/esm/effect/Freeverb.js","webpack:///./node_modules/tone/build/esm/effect/JCReverb.js","webpack:///./node_modules/tone/build/esm/effect/StereoXFeedbackEffect.js","webpack:///./node_modules/tone/build/esm/effect/PingPongDelay.js","webpack:///./node_modules/tone/build/esm/effect/PitchShift.js","webpack:///./node_modules/tone/build/esm/effect/Phaser.js","webpack:///./node_modules/tone/build/esm/effect/Reverb.js","webpack:///./node_modules/tone/build/esm/component/channel/MidSideSplit.js","webpack:///./node_modules/tone/build/esm/component/channel/MidSideMerge.js","webpack:///./node_modules/tone/build/esm/effect/MidSideEffect.js","webpack:///./node_modules/tone/build/esm/effect/StereoWidener.js","webpack:///./node_modules/tone/build/esm/effect/Tremolo.js","webpack:///./node_modules/tone/build/esm/effect/Vibrato.js","webpack:///./node_modules/tone/build/esm/component/analysis/Analyser.js","webpack:///./node_modules/tone/build/esm/component/analysis/MeterBase.js","webpack:///./node_modules/tone/build/esm/component/analysis/Meter.js","webpack:///./node_modules/tone/build/esm/component/analysis/FFT.js","webpack:///./node_modules/tone/build/esm/component/analysis/DCMeter.js","webpack:///./node_modules/tone/build/esm/component/analysis/Waveform.js","webpack:///./node_modules/tone/build/esm/component/channel/Solo.js","webpack:///./node_modules/tone/build/esm/component/channel/PanVol.js","webpack:///./node_modules/tone/build/esm/component/channel/Channel.js","webpack:///./node_modules/tone/build/esm/component/channel/MultibandSplit.js","webpack:///./node_modules/tone/build/esm/core/context/Listener.js","webpack:///./node_modules/tone/build/esm/component/channel/Panner3D.js","webpack:///./node_modules/tone/build/esm/component/channel/Recorder.js","webpack:///./node_modules/tone/build/esm/component/dynamics/Compressor.js","webpack:///./node_modules/tone/build/esm/component/dynamics/Gate.js","webpack:///./node_modules/tone/build/esm/component/dynamics/Limiter.js","webpack:///./node_modules/tone/build/esm/component/dynamics/MidSideCompressor.js","webpack:///./node_modules/tone/build/esm/component/dynamics/MultibandCompressor.js","webpack:///./node_modules/tone/build/esm/component/filter/EQ3.js","webpack:///./node_modules/tone/build/esm/component/filter/Convolver.js","webpack:///./node_modules/tone/build/esm/index.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/get-audio-node-connections.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/not-supported-error.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/intercept-connections.js","webpack:///./node_modules/standardized-audio-context/build/es2019/guards/native-audio-node-faker.js","webpack:///./node_modules/standardized-audio-context/build/es2019/module.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/test-promise-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/index-size-error.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/insert-element-in-set.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-active.js","webpack:///./node_modules/automation-events/build/es5/bundle.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/is-part-of-a-cycle.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/get-event-listeners-of-audio-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive.js","webpack:///./node_modules/standardized-audio-context/build/es2019/guards/audio-node-output-connection.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/is-active-audio-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/guards/audio-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/guards/native-audio-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/get-audio-param-connections.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-param.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/wrap-event-listener.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-get-channel-data-method.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/connect-native-audio-node-to-native-audio-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/disconnect-native-audio-node-from-native-audio-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/copy-from-channel.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/create-nested-arrays.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/invalid-access-error.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/overwrite-accessors.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/is-valid-latency-hint.js","webpack:///./node_modules/standardized-audio-context/build/es2019/read-only-map.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/copy-to-channel.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/filter-buffer.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/compute-buffer-size.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/unknown-error.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/is-dc-curve.js","webpack:///./node_modules/standardized-audio-context/build/es2019/interfaces/index.js","webpack:///./node_modules/standardized-audio-context/build/es2019/types/index.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/abort-error.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/add-audio-node-connections.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/add-audio-param-connections.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/add-silent-connection.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/add-unrendered-audio-worklet-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/analyser-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/analyser-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-source-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-source-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/audio-context-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/audio-destination-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/audio-destination-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/audio-listener-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/audio-param-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/audio-param-renderer.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/audio-worklet-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/base-audio-context-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/biquad-filter-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/biquad-filter-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/cache-test-result.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/channel-merger-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/channel-merger-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/channel-splitter-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/channel-splitter-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/connect-audio-param.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/connect-multiple-outputs.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/connected-native-audio-buffer-source-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/constant-source-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/constant-source-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/convert-number-to-unsigned-long.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/convolver-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/convolver-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/create-native-offline-audio-context.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/data-clone-error.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/decrement-cycle-counter.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/delay-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/delay-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/delete-unrendered-audio-worklet-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/disconnect-multiple-outputs.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/dynamics-compressor-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/dynamics-compressor-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/encoding-error.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/evaluate-source.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/event-target-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/expose-current-frame-and-current-time.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/fetch-source.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/gain-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/gain-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/get-audio-node-renderer.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/get-audio-param-renderer.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/get-backup-native-context.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/get-native-context.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/get-unrendered-audio-worklet-nodes.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/iir-filter-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/increment-cycle-counter-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-context.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-param.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/is-any-offline-audio-context.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-context.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-param.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/is-native-context.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/is-native-offline-audio-context.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/is-secure-context.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/is-supported-promise.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/media-element-audio-source-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/media-stream-audio-destination-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/media-stream-audio-source-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/media-stream-track-audio-source-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/minimal-audio-context-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/minimal-base-audio-context-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/minimal-offline-audio-context-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/monitor-connections.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-audio-buffer-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-audio-context-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-audio-destination-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-audio-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-biquad-filter-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-channel-merger-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-constant-source-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-constant-source-node-faker-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-convolver-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-convolver-node-faker-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-delay-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-dynamics-compressor-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-gain-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-iir-filter-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-iir-filter-node-faker-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-media-element-audio-source-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-audio-destination-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-audio-source-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-track-audio-source-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-offline-audio-context-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-oscillator-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-panner-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-panner-node-faker-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-periodic-wave-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-script-processor-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-stereo-panner-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-stereo-panner-node-faker-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-wave-shaper-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-wave-shaper-node-faker-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/offline-audio-context-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/oscillator-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/oscillator-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/panner-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/panner-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/periodic-wave-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/render-automation.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/render-inputs-of-audio-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/render-inputs-of-audio-param.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/render-native-offline-audio-context.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/start-rendering.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/stereo-panner-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/stereo-panner-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-constructor-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-copy-channel-methods-subarray-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-source-node-start-method-consecutive-calls-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-source-node-start-method-duration-parameter-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-source-node-start-method-offset-clamping-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-source-node-stop-method-nullified-buffer-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-close-method-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-decode-audio-data-method-type-error-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-options-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-audio-node-connect-method-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-audio-scheduled-source-node-start-method-negative-parameters-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-audio-scheduled-source-node-stop-method-consecutive-calls-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-audio-scheduled-source-node-stop-method-negative-parameters-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-audio-worklet-processor-no-outputs-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-channel-merger-node-channel-count-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-constant-source-node-accurate-scheduling-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-convolver-node-buffer-reassignability-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-is-secure-context-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-offline-audio-context-current-time-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/test-stereo-panner-node-default-value-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/wave-shaper-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/wave-shaper-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/window.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-copy-channel-methods.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-scheduled-source-node-stop-method-consecutive-calls.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/wrap-channel-merger-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/test-transferables-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-offset-clamping.js","webpack:///./node_modules/standardized-audio-context/build/es2019/guards/audio-worklet-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/delete-event-listeners-of-audio-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/is-passive-audio-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/pick-element-from-set.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive-when-necessary.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/test-audio-node-disconnect-method-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/visit-each-audio-node-once.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-node-disconnect-method.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/audio-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/clone-audio-worklet-node-options.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/create-audio-worklet-processor-promise.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-faker-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/create-audio-worklet-processor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-audio-buffer-source-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-duration-parameter.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/test-analyser-node-get-float-time-domain-data-method-support.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-analyser-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/wrap-analyser-node-get-float-time-domain-data-method.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/is-constructible.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/split-import-statements.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/add-audio-worklet-module.js","webpack:///./node_modules/standardized-audio-context/build/es2019/guards/delay-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/detect-cycles.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/decode-audio-data.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/detach-array-buffer.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/test-clonability-of-audio-worklet-node-options.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/audio-worklet-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/get-audio-worklet-processor.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/wrap-channel-splitter-node.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/native-channel-splitter-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2019/helpers/wrap-iir-filter-node-get-frequency-response-method.js","webpack:///./node_modules/standardized-audio-context/build/es2019/factories/iir-filter-node-constructor.js","webpack:///./node_modules/regenerator-runtime/runtime.js","webpack:///./node_modules/@babel/runtime/helpers/slicedToArray.js","webpack:///./node_modules/@babel/runtime/helpers/arrayWithHoles.js","webpack:///./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js","webpack:///./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","webpack:///./node_modules/@babel/runtime/helpers/arrayLikeToArray.js","webpack:///./node_modules/@babel/runtime/helpers/nonIterableRest.js","webpack:///./node_modules/@babel/runtime/helpers/classCallCheck.js","webpack:///./node_modules/@babel/runtime/helpers/createClass.js","webpack:///./src/tutorial.js","webpack:///./src/synth.js","webpack:///./src/notes.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ACTIVE_AUDIO_NODE_STORE","WeakSet","AUDIO_NODE_CONNECTIONS_STORE","WeakMap","AUDIO_NODE_STORE","AUDIO_PARAM_CONNECTIONS_STORE","AUDIO_PARAM_STORE","BACKUP_NATIVE_CONTEXT_STORE","CONTEXT_STORE","EVENT_LISTENERS","CYCLE_COUNTERS","NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS","NODE_TO_PROCESSOR_MAPS","assignNativeAudioNodeOptions","nativeAudioNode","options","MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","isOwnedByContext","nativeContext","context","assignNativeAudioNodeOption","option","undefined","assignNativeAudioNodeAudioParamValue","audioParam","getNativeAudioNode","audioNode","createInvalidStateError","DOMException","err","code","version","assert","statement","error","Error","assertRange","gte","lte","Infinity","RangeError","assertContextRunning","isOffline","state","warn","defaultLogger","console","setLogger","logger","log","args","isUndef","arg","isDefined","isFunction","isNumber","isObject","toString","constructor","isBoolean","isArray","Array","isString","isNote","test","createOfflineAudioContext","channels","length","sampleRate","theWindow","self","hasAudioContext","__decorate","decorators","target","desc","arguments","getOwnPropertyDescriptor","Reflect","decorate","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Ticker","callback","type","updateInterval","this","_callback","_type","_updateInterval","_createClock","blob","Blob","toFixed","blobUrl","URL","createObjectURL","worker","Worker","onmessage","_worker","_timeout","setTimeout","_createTimeout","_createWorker","clearTimeout","terminate","interval","Math","max","postMessage","_disposeClock","isAudioParam","isAudioNode","isOfflineAudioContext","isAudioContext","isAudioBuffer","AudioBuffer","noCopy","deepMerge","sources","source","shift","assign","optionsFromArguments","defaults","argsArray","keys","objKey","opts","from","has","some","splice","indexOf","defaultArg","given","fallback","omitFromObject","obj","omit","forEach","prop","debug","_wasDisposed","TONE_DEBUG_CLASS","GT","a","b","GTE","EQ","LT","abs","clamp","min","super","_timeline","getDefaults","memory","increasing","event","time","valueOf","lastValue","push","index","_search","diff","param","len","after","slice","beginning","end","midPoint","floor","nextEvent","lowerBound","upperBound","_iterate","startTime","endTime","dispose","notifyNewContext","onContextInit","cb","notifyCloseContext","onContextClose","split","eventName","_events","boundCallback","off","on","eventList","constr","_constants","Map","_timeouts","_timeoutIds","_initialized","_workletModules","_context","_latencyHint","latencyHint","lookAhead","_ticker","emit","clockSource","_timeoutLoop","onstatechange","ctx","createAnalyser","createOscillator","createBufferSource","createBiquadFilter","numberOfChannels","createBuffer","numberOfInputs","createChannelMerger","numberOfOutputs","createChannelSplitter","createConstantSource","createConvolver","maxDelayTime","createDelay","createDynamicsCompressor","createGain","feedForward","feedback","createIIRFilter","createPanner","real","imag","constraints","createPeriodicWave","createStereoPanner","createWaveShaper","stream","createMediaStreamSource","createMediaStreamDestination","audioData","decodeAudioData","currentTime","initialize","_listener","_transport","_draw","_destination","createAudioWorkletNode","rawContext","url","audioWorklet","set","addModule","promises","promise","all","hint","lookAheadValue","resume","close","val","buffer","arr","getChannelData","constant","channelCount","channelCountMode","loop","start","map","disconnect","now","firstEvent","peek","fn","timeout","add","id","remove","intervalFn","readOnly","str","writable","noOp","onload","reverse","load","catch","onerror","_buffer","getContext","loaded","_reversed","_reverse","doneLoading","audioBuffer","downloads","array","isMultidimensional","multiChannelArray","copyToChannel","chanNum","fromArray","toArray","outputArray","Float32Array","numChannels","channel","channelArray","sample","ret","duration","startSamples","endSamples","retBuffer","subarray","rev","matches","match","extensions","extension","ext","supportsType","replace","baseUrl","endsWith","response","fetch","ok","arrayBuffer","document","createElement","canPlayType","_currentTime","_duration","asynchronous","yieldEvery","workletsAreReady","_renderClock","startRendering","dummyContext","_numberOfChannels","_length","_sampleRate","_numberOfInputs","_numberOfOutputs","_maxDelayTime","_feedForward","_feedback","_real","_imag","_constraints","_stream","_audioData","_name","_options","_url","_fn","_id","_interval","_val","_d","globalContext","setContext","TONE_SILENCE_LOGGING","prefix","printString","dbToGain","db","pow","gainToDb","gain","LN10","intervalToFrequencyRatio","A4","ftom","frequency","round","log2","ftomf","mtof","midi","units","defaultUnits","_units","_expressions","_getExpressions","hz","method","_frequencyToUnits","parseFloat","regexp","_ticksToUnits","parseInt","_beatsToUnits","_getTimeSignature","dot","numericValue","scalar","number","_secondsToUnits","samples","tr","q","total","fromType","_noArg","trim","typeName","quantity","expr","matching","freq","beats","_getBpm","seconds","ticks","_getPPQ","_now","transport","bpm","timeSignature","PPQ","toSeconds","toTicks","toFrequency","toMidi","capture","quantize","quantTo","nextSubdivision","subdiv","percent","subdivision","testNotations","power","closest","closestSeconds","notation","notationSeconds","quarterTime","quarters","measures","sixteenths","sixteenthString","join","Time","setA4","note","pitch","octave","noteNumber","noteToScaleIndex","toLowerCase","intervals","transpose","scaleIndexToNote","cbb","cx","dbb","dx","ebb","eb","ex","fbb","fb","f","fx","gbb","gb","g","gx","abb","ab","ax","bbb","bb","bx","Frequency","TransportTime","defaultContext","props","attribute","member","setValueAtTime","_getPartialProperties","initial","_initial","setStateAtTime","overridden","_minOutput","_param","_swappable","swappable","input","connect","_initialValue","defaultValue","convert","_minValue","minValue","_maxValue","maxValue","_toType","getValueAtTime","cancelScheduledValues","_fromType","_is","computedTime","isFinite","JSON","stringify","_assertRange","getAfter","before","beforeValue","previous","getBefore","_linearInterpolate","_exponentialInterpolate","previousVal","_exponentialApproach","currentVal","cancelAndHoldAtTime","linearRampToValueAtTime","exponentialRampToValueAtTime","rampTime","setRampPoint","exponentialApproachValueAtTime","timeConstant","setTargetAtTime","values","scaling","startingValue","segTime","cancel","valueAtTime","sampleTime","exponentialRampTo","linearRampTo","previousEvent","subdivisions","forEachAfter","t0","v0","v1","exp","t1","_internalChannels","output","node","nodeList","_isAudioNode","_getInternalNodes","channelInterpretation","_getChannelProperties","_setChannelProperties","destination","outputNum","inputNum","toDestination","nodes","connectSeries","first","reduce","prev","current","srcNode","dstNode","outputNumber","inputNumber","_gainNode","onended","_startTime","_stopTime","getStateAtTime","_fadeIn","fadeIn","_fadeOut","fadeOut","_curve","curve","fadeInTime","_stopGain","cancelStop","fadeOutTime","targetRampTo","additionalTail","_stopSource","_onended","_source","offset","_startGain","stop","override","_constantSource","connectSignal","setValueCurveAtTime","rampTo","signal","_multiplier","multiplier","computedValue","prevEvent","segments","rampVal","ticksUntilTime","_getTicksUntilEvent","computedVal","segmentDur","val0","val1","onTheLineEvent","currentTick","getTicksAtTime","getTimeOfTick","tick","delta","k","sqrt","sol1","sol2","when","getDurationOfTicks","computedDuration","startTicks","ticksToTime","timeToTicks","_state","_tickOffset","setTicksAtTime","stopEvent","getLastState","tmpEvent","lastState","elapsedTicks","forEachBetween","periodStartTime","offsetEvent","getSecondsAtTime","elapsedSeconds","absoluteTicks","lastStateEvent","forEachTickBetween","maxStartTime","ceil","nextTickTime","_lastUpdate","_boundLoop","_loop","_tickSource","pause","mixin","initialValue","Ticks","_root","IntervalNode","insert","updateHeight","updateMax","_rebalance","parent","results","search","_removeNode","forEachFrom","replacement","isLeftChild","left","right","_setRoot","_replaceNodeInParent","temp","getBalance","pivotNode","balance","_rotateLeft","_rotateRight","low","allNodes","traverse","searchAfter","high","_left","_right","height","point","_eventId","_once","once","clear","_currentId","_nextId","_nextTick","_boundRestart","_restart","_createEvents","invoke","scheduleOnce","_loopStart","_loopEnd","_scheduledEvents","_repeatedEvents","_syncedSignals","_swingAmount","_ppq","ppq","_clock","_processTick","_bindClockEvents","_timeSignature","_swingTicks","loopEnd","loopStart","swing","swingSubdivision","tickTime","progress","amount","sin","PI","forEachAtTime","_addEvent","eventId","item","timeline","computedAfter","offsetTicks","timeSig","startPosition","endPosition","toNotation","toBarsBeatsSixteenths","remainingTicks","ratio","computedFreq","ratioSignal","syncedSignal","maxDelayInSeconds","maxDelay","_maxDelay","delayTime","_delayNode","volume","_unmutedVolume","mute","unshift","maxChannelCount","Offline","originalContext","bufferPromise","render","_buffers","_loadingCount","urls","_bufferLoaded","every","_","Midi","expiration","anticipation","_boundDrawLoop","_drawLoop","_animationFrame","requestAnimationFrame","cancelAnimationFrame","draw","_synced","_scheduled","_syncedStart","_syncedStop","_volume","onstop","_clampToCurrentTime","sched","schedule","_start","restart","getNextState","_stop","stateEvent","startOffset","unsync","_sourceStarted","_sourceStopped","playbackRate","computedOffset","loopDuration","computedDur","_playbackRate","_noiseBuffers","rate","random","_noiseCache","brown","pink","white","channelNum","lastOut","b0","b1","b2","b3","b4","b5","b6","labelOrId","supported","devices","enumerateDevices","_device","find","device","label","deviceId","audio","echoCancellation","noiseSuppression","mozNoiseSuppression","navigator","mediaDevices","getUserMedia","mediaStreamNode","_mediaStream","getAudioTracks","track","filter","kind","active","groupId","generateWaveform","instance","detune","_oscillator","periodicWave","setPeriodicWave","_partials","partials","_partialCount","partialCount","baseType","phase","oscillator","_wave","syncSignal","unsyncSignal","_periodicWaveCache","description","_phase","arrayA","arrayB","element","oscProps","isBasicType","cache","_getCachedPeriodicWave","wave","_getRealImaginary","partial","exec","fullPartials","v","periodicWaveSize","fftSize","piFactor","TypeError","cos","sum","twoPi","_inverseFFT","_shaper","mapping","setMap","normalized","oversample","oversampling","includes","_norm","x","_mult","factor","_modulationScale","_modulationNode","_carrier","_modulator","modulationType","harmonicity","chain","modulationIndex","_widthGate","_thresh","width","_triangle","_oscillators","_spread","spread","count","_forEach","osc","iterator","sourceType","_scale","_pulse","modulationFrequency","carrierType","OmniOscillatorSourceMap","am","fat","fm","pulse","pwm","_sourceType","substr","_createNewOscillator","_getOscType","oscType","OscConstructor","oldOsc","blockTime","sType","mType","_sum","addend","_add","_min","_max","_setRange","_gain","getConstant","_stoppedValue","_clampValue","_amplitudeGain","amplitude","_stoppedSignal","_zeros","_a2g","_scaler","sync","syncFrequency","unsyncFrequency","getInitialValue","currentMin","currentMax","range","valueMap","propertyKey","configurable","newValue","timeRange","_activeSources","Set","_onload","autostart","delete","size","origDuration","_onSourceEnd","implicitEnd","_players","player","_tick","grainSize","_grainSize","_overlap","overlap","_onstop","_abs","_multiply","_neg","subtrahend","_subtract","_gtz","comparator","_exponentScaler","_expFunc","_exponent","exponent","_exp","_lastVal","scheduleRepeat","_onTick","_syncedCallback","_anchorValue","_sig","attack","decay","sustain","release","attackCurve","releaseCurve","decayCurve","direction","curveName","EnvelopeCurves","curveDef","_getCurve","_attackCurve","_setCurve","_releaseCurve","_decayCurve","velocity","currentValue","decayValue","decayStart","triggerAttack","triggerRelease","attackPortion","envelopeDuration","sustainTime","totalDuration","clone","triggerAttackRelease","cosineCurve","rippleCurve","curveLen","sineWave","stairsCurve","sineCurve","bounceCurve","invertCurve","out","j","bounce","In","Out","cosine","exponential","linear","ripple","sine","_original_triggerAttack","_original_triggerRelease","_syncMethod","timePosition","originalMethod","portamento","onsilence","_triggerEnvelopeAttack","setNote","_triggerEnvelopeRelease","computedFrequency","getLevelAtTime","portTime","envelope","computedAttack","computedDecay","modulation","modulationEnvelope","fan","_filters","Q","rolloff","_rolloff","rolloffNum","possibilities","cascadingCount","totalResponse","freqValues","magValues","phaseValues","filterClone","getFrequencyResponse","_octaves","octaves","_baseFrequency","baseFrequency","filterEnvelope","voice0","voice1","_vibrato","vibratoRate","_vibratoGain","vibratoAmount","inharmRatios","_freqMultipliers","_amplitude","_highpass","mult","_filterFreqScaler","resonance","freqMult","pitchDecay","hertz","maxNote","noise","workletContext","addToWorklet","classOrFunction","classOrFunctionToString","RegExp","getPrototypeOf","registerProcessor","classDesc","processor","workletOptions","onprocessorerror","_audioWorkletName","_dummyGain","_dummyParam","addAudioWorkletModule","disposed","_worklet","onReady","port","parameterDescriptors","MessagePort","_inputs","_outputs","_parameters","blockSize","data","params","parameters","paramName","inputs","outputs","updateParams","inputSample","generate","writeHead","delay","readHead","delayLine","DelayLine","delayedSample","setParam","_frequency","_createFilter","oldFilter","_filter","a0","fq","_combFilter","_lowpass","dampening","_noise","attackNoise","_lfcf","delayAmount","_availableVoices","_activeVoices","_voices","_gcTimeout","_averageActiveVoices","voice","maxPolyphony","_dummyVoice","_getNextAvailableVoice","setInterval","_collectGarbage","activeVoiceIndex","findIndex","_makeVoiceAvailable","activeVoices","firstAvail","notes","midiNote","released","_triggerAttack","_triggerRelease","_scheduleEvent","durationSeconds","sanitizedOptions","clearInterval","urlMap","mid","difference","_findClosest","closestNote","_startOffset","_probability","probability","_humanize","humanize","_rescheduleEvents","startTick","_getLoopDuration","prob","variation","reschedulTime","lastEvent","_event","iterations","iters","events","_startNote","timeInTicks","at","_restartEvent","attr","_setAll","_testLoopBoundries","upPatternGen","clampToArraySize","downPatternGen","infiniteGen","gen","alternatingGenerator","directionUp","jumpUp","stepIndex","jumpDown","randomOnce","copy","PatternGenerator","pattern","randomIndex","randomGen","randomWalk","_values","_pattern","_value","_part","_seqCallback","_eventsArray","_subdivision","_createSequence","_eventsUpdated","_indexTime","Proxy","_rescheduleSequence","sequence","eventOffset","_panner","_split","_g2a","fade","pan","_dryWet","wet","effectSend","effectReturn","effect","_lfo","depth","connectEffect","oct","smoothing","_smoothing","_follower","follower","_sweepRange","_inputBoost","_bandpass","_peaking","_setSweepRange","sensitivity","baseFreq","_channel","bits","_bitCrusherWorklet","_order","order","degree","memo","_getCoefficient","_splitter","_merger","_merge","_feedbackL","_feedbackR","_feedbackSplit","_feedbackMerge","_depth","_delayTime","_lfoL","_lfoR","_delayNodeL","_delayNodeR","connectEffectLeft","connectEffectRight","deviation","_distortion","distortion","deg","_feedbackGain","offset90","_bank0","_createAllPassFilterBank","_bank1","_oneSampleDelay","bankValues","coefficients","_sine","_cosine","_sineMultiply","_cosineMultiply","_negate","_phaseShifter","immediate","combFilterTunings","allpassFilterFrequencies","_combFilters","_allpassFiltersL","_allpassFiltersR","roomSize","allpassL","allpassR","lfpf","al","ar","cf","combFilterDelayTimes","combFilterResonances","allpassFilterFreqs","_allpassFilters","_feedbackCombFilters","_scaleRoomSize","allpass","fbcf","apf","_leftDelay","_rightDelay","_rightPreDelay","_delayA","_lfoA","_delayB","_lfoB","_crossFade","_crossFadeLFO","_feedbackDelay","_pitch","_windowSize","windowSize","_filtersL","_makeFilters","stages","_filtersR","connectToFreq","filters","_convolver","ready","_decay","_preDelay","preDelay","previousReady","noiseL","noiseR","merge","gainNode","renderPromise","_midAdd","SQRT1_2","_sideSubtract","side","_leftMult","_rightMult","_midSideMerge","_midSideSplit","_midSend","_sideSend","_midReturn","_sideReturn","_twoTimesWidthMid","_twoTimesWidthSide","_midMult","connectEffectMid","_oneMinusWidth","_sideMult","connectEffectSide","_amplitudeL","_amplitudeR","_analysers","analyser","getFloatFrequencyData","getFloatTimeDomainData","frequencyBinCount","smoothingTimeConstant","_analyser","_rms","normalRange","getValue","aValues","vals","totalSquared","rms","_allSolos","solo","_isSoloed","_addSolo","_removeSolo","_updateSolo","_soloed","_noSolos","_solo","_panVol","muted","buses","bus","_getBus","sendKnob","_lowMidFilter","lowFrequency","highFrequency","positionX","listener","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","panningModel","maxDistance","distanceModel","coneOuterGain","coneOuterAngle","coneInnerAngle","refDistance","rolloffFactor","orientationX","orientationY","orientationZ","y","z","_recorder","MediaRecorder","mimeType","startPromise","handleStart","removeEventListener","addEventListener","dataPromise","handleData","_compressor","threshold","knee","reduction","_gt","_gate","thresh","smoothingTime","_multibandSplit","_lowGain","_midGain","_highGain","normalize","buff","norm","Buffer","Buffers","BufferSource","getAudioNodeConnections","getValueForKey","createNotSupportedError","interceptConnections","original","interceptor","isNativeAudioNodeFaker","nativeAudioNodeOrNativeAudioNodeFaker","cacheTestResult","window","nativeOfflineAudioContextConstructor","isNativeOfflineAudioContext","nativeAudioContextConstructor","getBackupNativeContext","createNativeAudioNode","createNativeAnalyserNode","getAudioNodeRenderer","renderInputsOfAudioNode","createAnalyserNodeRenderer","auxiliaryGainNodeStore","getNativeContext","audioParamAudioNodeStore","eventTargetConstructor","isNativeAudioContext","isNativeAudioNode","isNativeAudioParam","audioNodeConstructor","analyserNodeConstructor","audioBufferStore","nativeAudioBufferConstructor","convertNumberToUnsignedLong","Uint32Array","wrapAudioBufferCopyChannelMethods","wrapAudioBufferCopyChannelMethodsOutOfBounds","audioBufferConstructor","createNativeGainNode","addSilentConnection","testAudioScheduledSourceNodeStartMethodNegativeParametersSupport","testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport","testAudioScheduledSourceNodeStopMethodNegativeParametersSupport","wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls","renderInputsOfAudioParam","connectAudioParam","createNativeAudioBufferSourceNode","renderAutomation","createAudioBufferSourceNodeRenderer","createAudioParam","audioBufferSourceNodeConstructor","audioDestinationNodeConstructor","createNativeBiquadFilterNode","createBiquadFilterNodeRenderer","biquadFilterNodeConstructor","monitorConnections","wrapChannelMergerNode","createNativeChannelMergerNode","createChannelMergerNodeRenderer","channelMergerNodeConstructor","createNativeChannelSplitterNode","createChannelSplitterNodeRenderer","channelSplitterNodeConstructor","createNativeConstantSourceNodeFaker","createNativeConstantSourceNode","createConstantSourceNodeRenderer","constantSourceNodeConstructor","createNativeConvolverNodeFaker","createNativeConvolverNode","createConvolverNodeRenderer","convolverNodeConstructor","createNativeDelayNode","createDelayNodeRenderer","delayNodeConstructor","createNativeDynamicsCompressorNode","createDynamicsCompressorNodeRenderer","dynamicsCompressorNodeConstructor","createGainNodeRenderer","gainNodeConstructor","createNativeScriptProcessorNode","createNativeIIRFilterNodeFaker","renderNativeOfflineAudioContext","createIIRFilterNodeRenderer","createNativeIIRFilterNode","iIRFilterNodeConstructor","createAudioListener","unrenderedAudioWorkletNodeStore","minimalBaseAudioContextConstructor","createNativeOscillatorNode","createOscillatorNodeRenderer","oscillatorNodeConstructor","createConnectedNativeAudioBufferSourceNode","createNativeWaveShaperNodeFaker","createNativeWaveShaperNode","createNativePannerNodeFaker","createNativePannerNode","createPannerNodeRenderer","pannerNodeConstructor","createNativePeriodicWave","periodicWaveConstructor","nativeStereoPannerNodeFakerFactory","createNativeStereoPannerNode","createStereoPannerNodeRenderer","stereoPannerNodeConstructor","createWaveShaperNodeRenderer","waveShaperNodeConstructor","isSecureContext","exposeCurrentFrameAndCurrentTime","isNativeContext","baseAudioContextConstructor","createNativeMediaElementAudioSourceNode","mediaElementAudioSourceNodeConstructor","createNativeMediaStreamAudioDestinationNode","mediaStreamAudioDestinationNodeConstructor","createNativeMediaStreamAudioSourceNode","mediaStreamAudioSourceNodeConstructor","createNativeMediaStreamTrackAudioSourceNode","mediaStreamTrackAudioSourceNodeConstructor","audioContextConstructor","getUnrenderedAudioWorkletNodes","addUnrenderedAudioWorkletNode","connectMultipleOutputs","deleteUnrenderedAudioWorkletNode","disconnectMultipleOutputs","createNativeAudioWorkletNodeFaker","createNativeAudioWorkletNode","nativeAudioWorkletNodeConstructor","createAudioWorkletNodeRenderer","audioWorkletNodeConstructor","createNativeOfflineAudioContext","offlineAudioContextConstructor","isAnyAudioContext","isAnyAudioNode","isAnyAudioParam","isAnyOfflineAudioContext","isSupported","testPromiseSupport","uint32Array","createIndexSizeError","insertElementInSet","predicate","ignoreDuplicates","lmnt","setInternalStateToActive","eventListener","_slicedToArray","_classCallCheck","_createClass","createExtendedExponentialRampToValueAutomationEvent","insertTime","createExtendedLinearRampToValueAutomationEvent","createSetValueAutomationEvent","createSetValueCurveAutomationEvent","getTargetValueAtTime","valueAtStartTime","_ref","isExponentialRampToValueAutomationEvent","automationEvent","isLinearRampToValueAutomationEvent","isAnyRampToValueAutomationEvent","isSetValueAutomationEvent","isSetValueCurveAutomationEvent","getValueOfAutomationEventAtIndexAtTime","automationEvents","getEndTimeAndValueOfPreviousAutomationEvent","currentAutomationEvent","nextAutomationEvent","isCancelAndHoldAutomationEvent","isCancelScheduledValuesAutomationEvent","getEventTime","cancelTime","getExponentialRampValueAtTime","getLinearRampValueAtTime","getValueCurveValueAtTime","theoreticIndex","lowerIndex","upperIndex","interpolateValue","isSetTargetAutomationEvent","AutomationEventList","_automationEvents","_currenTime","_defaultValue","eventTime","removedAutomationEvent","lastAutomationEvent","startValue","truncatedAutomationEvent","_index","previousAutomationEvent","persistentAutomationEvent","remainingAutomationEvents","firstRemainingAutomationEvent","_getEndTimeAndValueOf","_getEndTimeAndValueOf2","_getEndTimeAndValueOf3","_getEndTimeAndValueOf4","createCancelAndHoldAutomationEvent","createCancelScheduledValuesAutomationEvent","createExponentialRampToValueAutomationEvent","createLinearRampToValueAutomationEvent","createSetTargetAutomationEvent","factory","isPartOfACycle","getEventListenersOfAudioNode","setInternalStateToPassive","isAudioNodeOutputConnection","outputConnection","isActiveAudioNode","audioNodeOrAudioParam","nativeAudioNodeOrAudioParam","getAudioParamConnections","getNativeAudioParam","wrapEventListener","descriptor","defineProperties","currentTarget","handleEvent","wrapAudioBufferGetChannelDataMethod","wrapAudioScheduledSourceNodeStartMethodNegativeParameters","nativeAudioScheduledSourceNode","wrapAudioScheduledSourceNodeStopMethodNegativeParameters","testAudioBufferCopyChannelMethodsOutOfBoundsSupport","nativeAudioBuffer","connectNativeAudioNodeToNativeAudioNode","nativeSourceAudioNode","nativeDestinationAudioNode","fakeNativeDestinationAudioNode","disconnectNativeAudioNodeFromNativeAudioNode","copyFromChannel","channelNumber","bufferOffset","byteLength","channelData","slicedInput","BYTES_PER_ELEMENT","createNestedArrays","arrays","createInvalidAccessError","overwriteAccessors","createGetter","createSetter","isValidLatencyHint","ReadOnlyMap","_map","entries","filterBuffer","feedbackLength","feedforward","feedforwardLength","minLength","xBuffer","yBuffer","bufferIndex","bufferLength","inputLength","computeBufferSize","baseLatency","createUnknownError","isDCCurve","createAbortError","createAddAudioNodeConnections","audioNodeConnectionsStore","audioNodeRenderer","activeInputs","passiveInputs","renderer","createAddAudioParamConnections","audioParamConnectionsStore","audioParamRenderer","createAddSilentConnection","nativeGainNode","createAddUnrenderedAudioWorkletNode","audioWorkletNode","DEFAULT_OPTIONS","maxDecibels","minDecibels","createAnalyserNodeConstructor","audionNodeConstructor","mergedOptions","nativeAnalyserNode","_nativeAnalyserNode","getByteFrequencyData","getByteTimeDomainData","createAnalyserNodeRendererFactory","renderedNativeAnalyserNodes","proxy","nativeOfflineAudioContext","trace","renderedNativeAnalyserNode","async","createAnalyserNode","createAudioBufferConstructor","testNativeAudioBufferConstructorSupport","hasInstance","createAudioBufferSourceNodeConstructor","nativeAudioBufferSourceNode","audioBufferSourceNodeRenderer","_audioBufferSourceNodeRenderer","_isBufferNullified","_isBufferSet","_nativeAudioBufferSourceNode","fill","wrappedListener","nativeOnEnded","resetInternalStateToPassive","createAudioBufferSourceNodeRendererFactory","renderedNativeAudioBufferSourceNodes","renderedNativeAudioBufferSourceNode","nativeAudioBufferSourceNodeIsOwnedByContext","createAudioBufferSourceNode","createAudioContextConstructor","nativeAudioContext","_baseLatency","_nativeAudioContext","revokeState","mediaElement","mediaStream","mediaStreamTrack","resolvePromise","suspend","createAudioDestinationNodeConstructor","createAudioDestinationNodeRenderer","createNativeAudioDestinationNode","nativeAudioDestinationNode","_isNodeOfNativeOfflineAudioContext","_nativeAudioDestinationNode","nativeAudioDestinationNodePromise","createAudioDestinationNode","createAudioListenerFactory","nativeListener","channelMergerNode","scriptProcessorNode","createFakeAudioParam","constantSourceNode","lastOrientation","lastPosition","onaudioprocess","inputBuffer","orientation","setOrientation","positon","setPosition","createFakeAudioParams","createAudioParamFactory","addAudioParamConnections","audioParamStore","createAudioParamRenderer","isAudioParamOfOfflineAudioContext","nativeAudioParam","automationEventList","flush","previousLastEvent","pop","currentLastEvent","firstSample","lastSample","numberOfInterpolatedValues","interpolatedValues","timeOfLastSample","outputChannelCount","parameterData","processorOptions","createChannelCount","createAudioWorkletNodeConstructor","nodeNameToProcessorConstructorMap","processorConstructor","nativeAudioWorkletNode","nm","_nativeAudioWorkletNode","_onprocessorerror","nativeOnProcessorError","createBaseAudioContextConstructor","_nativeContext","_audioWorklet","moduleURL","disableNormalization","successCallback","errorCallback","createBiquadFilterNodeConstructor","nativeBiquadFilterNode","_Q","_detune","log10","_nativeBiquadFilterNode","frequencyHz","magResponse","phaseResponse","createBiquadFilterNodeRendererFactory","renderedNativeBiquadFilterNodes","renderedNativeBiquadFilterNode","nativeBiquadFilterNodeIsOwnedByContext","createBiquadFilterNode","createCacheTestResult","ongoingTests","testResults","tester","cachedTestResult","ongoingTest","synchronousTestResult","finalTestResult","createChannelMergerNodeConstructor","createChannelMergerNodeRendererFactory","renderedNativeAudioNodes","renderedNativeAudioNode","createAudioNode","createChannelSplitterNodeConstructor","createChannelSplitterNodeRendererFactory","createConnectAudioParam","createConnectMultipleOutputs","outputAudioNodes","outputAudioNode","createConnectedNativeAudioBufferSourceNodeFactory","createConstantSourceNodeConstructor","createConstantSourceNodeRendererFactory","nativeConstantSourceNode","constantSourceNodeRenderer","_constantSourceNodeRenderer","_nativeConstantSourceNode","_offset","renderedNativeConstantSourceNodes","renderedNativeConstantSourceNode","nativeConstantSourceNodeIsOwnedByContext","createConstantSourceNode","createConvertNumberToUnsignedLong","unit32Array","createConvolverNodeConstructor","nativeConvolverNode","_nativeConvolverNode","createConvolverNodeRendererFactory","renderedNativeConvolverNodes","renderedNativeConvolverNode","createConvolverNode","createCreateNativeOfflineAudioContext","createDataCloneError","createDecrementCycleCounter","cycleCounters","cycleCounter","nativeDestinationAudioParam","createDelayNodeConstructor","nativeDelayNode","createDelayNodeRendererFactory","renderedNativeDelayNodes","renderedNativeDelayNode","nativeDelayNodeIsOwnedByContext","createDelayNode","createDeleteUnrenderedAudioWorkletNode","getOutputAudioNodeAtIndex","createDisconnectMultipleOutputs","destinationOrOutput","createDynamicsCompressorNodeConstructor","nativeDynamicsCompressorNode","_attack","_knee","_nativeDynamicsCompressorNode","_ratio","_release","_threshold","previousChannelCount","createDynamicsCompressorNodeRendererFactory","renderedNativeDynamicsCompressorNodes","renderedNativeDynamicsCompressorNode","nativeDynamicsCompressorNodeIsOwnedByContext","createDynamicsCompressorNode","createEncodingError","createEvaluateSource","SyntaxError","head","script","originalOnErrorHandler","removeErrorEventListenerAndRevokeUrl","revokeObjectURL","message","src","lineno","colno","location","href","appendChild","createEventTargetConstructor","_nativeEventTarget","_listeners","wrappedEventListener","dispatchEvent","createExposeCurrentFrameAndCurrentTime","currentFrame","createFetchSource","text","createGainNodeConstructor","createGainNodeRendererFactory","renderedNativeGainNodes","renderedNativeGainNode","nativeGainNodeIsOwnedByContext","createGainNode","createGetAudioNodeRenderer","audioNodeConnections","createGetAudioParamRenderer","audioParamConnections","createGetBackupNativeContext","backupNativeContext","bckpNtveCntxt","createGetNativeContext","contextStore","createGetUnrenderedAudioWorkletNodes","unrenderedAudioWorkletNodes","createIIRFilterNodeRendererFactory","filteredBufferPromise","nativeIIRFilterNode","nativeIIRFilterNodeIsOwnedByContext","ntvCntxt","partialOfflineAudioContext","renderedBuffer","filteredBuffer","filterFullBuffer","createIncrementCycleCounterFactory","createIsAnyAudioContext","anything","createIsAnyAudioNode","audioNodeStore","createIsAnyAudioParam","createIsAnyOfflineAudioContext","createIsNativeAudioContext","createIsNativeAudioNode","AudioNode","createIsNativeAudioParam","AudioParam","createIsNativeContext","createIsNativeOfflineAudioContext","createIsSecureContext","createIsSupportedPromise","testAudioBufferCopyChannelMethodsSubarraySupport","testAudioContextCloseMethodSupport","testAudioContextDecodeAudioDataMethodTypeErrorSupport","testAudioContextOptionsSupport","testAudioNodeConnectMethodSupport","testAudioWorkletProcessorNoOutputsSupport","testChannelMergerNodeChannelCountSupport","testConstantSourceNodeAccurateSchedulingSupport","testConvolverNodeBufferReassignabilitySupport","testIsSecureContextSupport","testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport","testStereoPannerNodeDefaultValueSupport","testTransferablesSupport","createMediaElementAudioSourceNodeConstructor","nativeMediaElementAudioSourceNode","_mediaElement","_nativeMediaElementAudioSourceNode","createMediaStreamAudioDestinationNodeConstructor","nativeMediaStreamAudioDestinationNode","_nativeMediaStreamAudioDestinationNode","createMediaStreamAudioSourceNodeConstructor","nativeMediaStreamAudioSourceNode","_nativeMediaStreamAudioSourceNode","createMediaStreamTrackAudioSourceNodeConstructor","createMinimalAudioContextConstructor","createMinimalBaseAudioContextConstructor","_onstatechange","nativeOnStateChange","createMinimalOfflineAudioContextConstructor","delayStateChangeEvent","stopImmediatePropagation","_waitForThePromiseToSettle","_nativeOfflineAudioContext","createMonitorConnections","whenConnected","whenDisconnected","connections","wasDisconnected","connection","wasConnected","isDisconnected","createNativeAudioBufferConstructor","createNativeAudioContextConstructor","AudioContext","webkitAudioContext","createNativeAudioDestinationNodeFactory","isNodeOfNativeOfflineAudioContext","createNativeAudioNodeFactory","factoryFunction","createNativeAudioWorkletNodeConstructor","AudioWorkletNode","createNativeBiquadFilterNodeFactory","createNativeChannelMergerNodeFactory","nativeChannelMergerNode","createNativeConstantSourceNodeFactory","createNativeConstantSourceNodeFakerFactory","audioNodeOptions","audioBufferSourceNode","nativeConstantSourceNodeFaker","createNativeConvolverNodeFactory","createNativeConvolverNodeFakerFactory","convolverNode","nativeConvolverNodeFaker","createNativeDelayNodeFactory","createNativeDynamicsCompressorNodeFactory","createNativeGainNodeFactory","createNativeIIRFilterNodeFactory","divide","denominator","evaluatePolynomial","coefficient","createNativeIIRFilterNodeFakerFactory","bufferSize","bufferIndexes","xBuffers","yBuffers","outputBuffer","nyquist","nativeIIRFilterNodeFaker","omega","atan2","createNativeMediaElementAudioSourceNodeFactory","ntvDCntxt","createMediaElementSource","createNativeMediaStreamAudioDestinationNodeFactory","createNativeMediaStreamAudioSourceNodeFactory","audioStreamTracks","filteredAudioStreamTracks","sort","MediaStream","createNativeMediaStreamTrackAudioSourceNodeFactory","createMediaStreamTrackSource","createNativeOfflineAudioContextConstructor","OfflineAudioContext","webkitOfflineAudioContext","createNativeOscillatorNodeFactory","nativeOscillatorNode","createNativePannerNodeFactory","nativePannerNode","createNativePannerNodeFakerFactory","pannerNode","SINGLE_CHANNEL_OPTIONS","inputGainNode","orientationXGainNode","orientationYGainNode","orientationZGainNode","positionXGainNode","positionYGainNode","positionZGainNode","waveShaperNode","nativePannerNodeFaker","createNativePeriodicWaveFactory","wrappedImag","wrappedReal","createNativeScriptProcessorNodeFactory","numberOfInputChannels","numberOfOutputChannels","createScriptProcessor","createNativeStereoPannerNodeFactory","createNativeStereoPannerNodeFaker","nativeStereoPannerNode","createNativeStereoPannerNodeFakerFactory","DC_CURVE","HALF_PI","SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS","buildInternalGraph","panGainNode","leftWaveShaperCurve","rightWaveShaperCurve","leftGainNode","leftWaveShaperNode","panWaveShaperNode","rightGainNode","rightWaveShaperNode","buildInternalGraphForMono","leftInputForLeftOutputWaveShaperCurve","leftInputForRightOutputWaveShaperCurve","rightInputForLeftOutputWaveShaperCurve","rightInputForRightOutputWaveShaperCurve","centerIndex","CURVE_SIZE","channelSplitterNode","leftInputForLeftOutputGainNode","leftInputForLeftOutputWaveShaperNode","leftInputForRightOutputGainNode","leftInputForRightOutputWaveShaperNode","rightInputForLeftOutputGainNode","rightInputForLeftOutputWaveShaperNode","rightInputForRightOutputGainNode","rightInputForRightOutputWaveShaperNode","buildInternalGraphForStereo","connectGraph","disconnectGraph","isConnected","createNativeWaveShaperNodeFactory","nativeWaveShaperNode","disconnectNativeAudioBufferSourceNode","createNativeWaveShaperNodeFakerFactory","negativeWaveShaperNode","positiveWaveShaperNode","invertGainNode","outputGainNode","revertGainNode","unmodifiedCurve","nativeWaveShaperNodeFaker","curveLength","negativeCurve","positiveCurve","createOfflineAudioContextConstructor","createOscillatorNodeConstructor","oscillatorNodeRenderer","_nativeOscillatorNode","_oscillatorNodeRenderer","createOscillatorNodeRendererFactory","renderedNativeOscillatorNodes","renderedNativeOscillatorNode","nativeOscillatorNodeIsOwnedByContext","createOscillatorNode","createPannerNodeConstructor","_nativePannerNode","_orientationX","_orientationY","_orientationZ","_positionX","_positionY","_positionZ","createPannerNodeRendererFactory","renderedBufferPromise","renderedNativeGainNodeOrNativePannerNode","commonAudioNodeOptions","commonNativePannerNodeOptions","nativePannerNodeIsOwnedByContext","nativeConstantSourceNodes","channelDatas","gateGainNode","partialPannerNode","createPeriodicWaveConstructor","periodicWaveStore","PeriodicWave","createRenderAutomation","getAudioParamRenderer","replay","createRenderInputsOfAudioNode","nextTrace","allRenderingPromises","renderingPromises","createRenderInputsOfAudioParam","createRenderNativeOfflineAudioContext","testOfflineAudioContextCurrentTimeSupport","isOfflineAudioContextCurrentTimeSupported","oncomplete","createStartRendering","createStereoPannerNodeConstructor","_pan","createStereoPannerNodeRendererFactory","renderedNativeStereoPannerNodes","renderedNativeStereoPannerNode","nativeStereoPannerNodeIsOwnedByContext","createStereoPannerNode","createTestAudioBufferConstructorSupport","createTestAudioBufferCopyChannelMethodsSubarraySupport","createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport","createTestAudioBufferSourceNodeStartMethodDurationParameterSupport","offlineAudioContext","createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport","createTestAudioBufferSourceNodeStopMethodNullifiedBufferSupport","createTestAudioContextCloseMethodSupport","audioContext","isAudioContextClosable","createTestAudioContextDecodeAudioDataMethodTypeErrorSupport","isPending","createTestAudioContextOptionsSupport","createTestAudioNodeConnectMethodSupport","createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport","createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport","createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport","createTestAudioWorkletProcessorNoOutputsSupport","isCallingProcess","createTestChannelMergerNodeChannelCountSupport","createTestConstantSourceNodeAccurateSchedulingSupport","Number","POSITIVE_INFINITY","createTestConvolverNodeBufferReassignabilitySupport","createTestIsSecureContextSupport","createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport","createTestOfflineAudioContextCurrentTimeSupport","createTestStereoPannerNodeDefaultValueSupport","stereoPanner","createWaveShaperNodeConstructor","_isCurveNullified","_nativeWaveShaperNode","createWaveShaperNodeRendererFactory","renderedNativeWaveShaperNodes","renderedNativeWaveShaperNode","createWaveShaperNode","createWindow","createWrapAudioBufferCopyChannelMethods","channelNumberAsNumber","bufferOffsetAsNumber","audioBufferLength","destinationLength","sourceLength","createWrapAudioBufferCopyChannelMethodsOutOfBounds","createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer","nullifiedBuffer","createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls","disconnectGainNode","isStopped","createWrapChannelMergerNode","monitorConnectionsFunction","ArrayBuffer","port1","port2","MessageChannel","wrapAudioBufferSourceNodeStartMethodOffsetClamping","clampedOffset","isAudioWorkletNode","deleteEventListenerOfAudioNode","isPassiveAudioNode","pickElementFromSet","matchingElements","matchingElement","setInternalStateToPassiveWhenNecessary","testAudioNodeDisconnectMethodSupport","analyzer","dummy","ones","chnnlDt","visitEachAudioNodeOnce","cycles","visitor","counts","cycle","addActiveInputConnectionToAudioNode","activeInputConnection","addActiveInputConnectionToAudioParam","addPassiveInputConnectionToAudioNode","passiveInputConnections","passiveInputConnection","addPassiveInputConnectionToAudioParam","deletePassiveInputConnectionToAudioNode","matchingConnection","deletePassiveInputConnectionToAudioParam","addConnectionToAudioNodeOfAudioContext","eventListeners","isActive","partialConnection","deleteActiveInputConnectionToAudioNode","addConnectionToAudioParamOfAudioContext","deleteActiveInputConnectionToAudioParam","deleteActiveInputConnection","activeInputConnections","deleteInputsOfAudioNode","deleteInputConnectionOfAudioNode","deleteInputsOfAudioParam","deleteInputConnectionOfAudioParam","createAudioNodeConstructor","addAudioNodeConnections","createIncrementCycleCounter","decrementCycleCounter","detectCycles","_nativeAudioNode","returnValue","connectionsToDestination","filteredConnections","wrapAudioNodeDisconnectMethod","auxiliaryGainNodes","addConnectionToAudioNodeOfOfflineAudioContext","addConnectionToAudioParamOfOfflineAudioContext","destinations","audioNodeConnectionsOfSource","deleteAnyConnection","deleteConnectionAtOutput","deleteConnectionToDestination","createAudioWorkletProcessorPromise","audioWorkletNodeOptions","onmessageerror","cloneAudioWorkletNodeOptions","createNativeAudioWorkletNodeFakerFactory","numberOfParameters","messageChannel","gainNodes","inputChannelSplitterNodes","constantSourceNodes","inputChannelMergerNode","outputChannelSplitterNode","outputChannelMergerNodes","parameterMap","nativeAudioWorkletNodeFaker","patchedEventListeners","unpatchedEventListener","patchedEventListener","audioWorkletProcessor","nodeToProcessorMap","audioWorkletProcessorPromise","createAudioWorkletProcessor","dWrkltPrcssr","prmtrs","disconnectOutputsGraph","outputChannelSplitterNodeOutput","outputChannelMergerNode","potentiallyEmptyInputs","activeSourceFlag","process","ErrorEvent","disconnectFakeGraph","connectFakeGraph","createNativeAudioBufferSourceNodeFactory","testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport","testAudioBufferSourceNodeStartMethodDurationParameterSupport","testAudioBufferSourceNodeStartMethodOffsetClampingSupport","testAudioBufferSourceNodeStopMethodNullifiedBufferSupport","wrapAudioBufferSourceNodeStartMethodOffsetClampling","wrapAudioBufferSourceNodeStopMethodNullifiedBuffer","isScheduled","wrapAudioBufferSourceNodeStartMethodConsecutiveCalls","stopTime","actualStartTime","durationInBufferTime","wrapAudioBufferSourceNodeStartMethodDurationParameter","testAnalyserNodeGetFloatTimeDomainDataMethodSupport","createNativeAnalyserNodeFactory","byteTimeDomainData","Uint8Array","wrapAnalyserNodeGetFloatTimeDomainDataMethod","handler","construct","IMPORT_STATEMENT_REGEX","splitImportStatements","importStatements","sourceWithoutImportStatements","unresolvedUrl","importStatementWithResolvedUrl","verifyParameterDescriptors","verifyProcessorCtor","processorCtor","constructible","isConstructible","createAddAudioWorkletModule","evaluateSource","fetchSource","ongoingRequests","resolvedRequests","credentials","absoluteUrl","resolvedRequestsOfContext","ongoingRequestsOfContext","promiseOfOngoingRequest","evaluateAudioWorkletGlobalScope","_AWGS","rslvdRqstsFCntxt","ngngRqstsFCntxt","createDetectCycles","nextLink","isDelayNode","mergedCycles","nestedCycles","concat","createDecodeAudioData","detachedArrayBuffers","anyContext","complete","detachArrayBuffer","fail","createNativeAudioWorkletNodeFactory","testClonabilityOfAudioWorkletNodeOptions","processBuffer","processedBuffer","getAudioWorkletProcessor","createAudioWorkletNodeRendererFactory","processedBufferPromise","renderedNativeAudioWorkletNodeOrGainNode","nativeOutputNodes","nativeAudioWorkletNodeIsOwnedByContext","renderBuffer","createNativeChannelSplitterNodeFactory","nativeChannelSplitterNode","wrapChannelSplitterNode","createIIRFilterNodeConstructor","wrapIIRFilterNodeGetFrequencyResponseMethod","_nativeIIRFilterNode","runtime","Op","hasOwn","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","Context","_invoke","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","makeInvokeMethod","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","NativeIteratorPrototype","Gp","defineIteratorMethods","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","__await","unwrapped","info","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","iter","skipTempReset","charAt","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function","arrayWithHoles","iterableToArrayLimit","unsupportedIterableToArray","nonIterableRest","_arr","_n","_e","_s","_i","arrayLikeToArray","minLen","arr2","Constructor","_defineProperties","protoProps","staticProps","modal","getElementById","onclick","style","display","synths","Tone","beatPatterns","beatPattern","toMaster","synth","body","querySelectorAll","classList","opt","patternIdx","repeat","patterns","pat","check","play","querySelector","rows","tempo","row","boxShadow","checkbox","checked","ToneNote","require","synthNotes","PolySynth","Synth","gainNote","Gain","synthNote","sequencerKey","buttons","stopPropagation","offsetWidth"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 690);\n","export const ACTIVE_AUDIO_NODE_STORE = new WeakSet();\nexport const AUDIO_NODE_CONNECTIONS_STORE = new WeakMap();\nexport const AUDIO_NODE_STORE = new WeakMap();\nexport const AUDIO_PARAM_CONNECTIONS_STORE = new WeakMap();\nexport const AUDIO_PARAM_STORE = new WeakMap();\nexport const BACKUP_NATIVE_CONTEXT_STORE = new WeakMap();\nexport const CONTEXT_STORE = new WeakMap();\nexport const EVENT_LISTENERS = new WeakMap();\nexport const CYCLE_COUNTERS = new WeakMap(); // This clunky name is borrowed from the spec. :-)\n\nexport const NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS = new WeakMap();\nexport const NODE_TO_PROCESSOR_MAPS = new WeakMap();","import { assignNativeAudioNodeOption } from './assign-native-audio-node-option';\nexport const assignNativeAudioNodeOptions = (nativeAudioNode, options) => {\n  assignNativeAudioNodeOption(nativeAudioNode, options, 'channelCount');\n  assignNativeAudioNodeOption(nativeAudioNode, options, 'channelCountMode');\n  assignNativeAudioNodeOption(nativeAudioNode, options, 'channelInterpretation');\n};","export const MOST_NEGATIVE_SINGLE_FLOAT = -3.4028234663852886e38;\nexport const MOST_POSITIVE_SINGLE_FLOAT = -MOST_NEGATIVE_SINGLE_FLOAT;","export const isOwnedByContext = (nativeAudioNode, nativeContext) => {\n  return nativeAudioNode.context === nativeContext;\n};","export const assignNativeAudioNodeOption = (nativeAudioNode, options, option) => {\n  const value = options[option];\n\n  if (value !== undefined && value !== nativeAudioNode[option]) {\n    nativeAudioNode[option] = value;\n  }\n};","export const assignNativeAudioNodeAudioParamValue = (nativeAudioNode, options, audioParam) => {\n  const value = options[audioParam];\n\n  if (value !== undefined && value !== nativeAudioNode[audioParam].value) {\n    nativeAudioNode[audioParam].value = value;\n  }\n};","import { AUDIO_NODE_STORE } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getNativeAudioNode = audioNode => {\n  return getValueForKey(AUDIO_NODE_STORE, audioNode);\n};","export const createInvalidStateError = () => {\n  try {\n    return new DOMException('', 'InvalidStateError');\n  } catch (err) {\n    // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n    err.code = 11;\n    err.name = 'InvalidStateError';\n    return err;\n  }\n};","export const version = \"14.6.8\";","/**\n * Assert that the statement is true, otherwise invoke the error.\n * @param statement\n * @param error The message which is passed into an Error\n */\nexport function assert(statement, error) {\n  if (!statement) {\n    throw new Error(error);\n  }\n}\n/**\n * Make sure that the given value is within the range\n */\n\nexport function assertRange(value, gte, lte = Infinity) {\n  if (!(gte <= value && value <= lte)) {\n    throw new RangeError(`Value must be within [${gte}, ${lte}], got: ${value}`);\n  }\n}\n/**\n * Make sure that the given value is within the range\n */\n\nexport function assertContextRunning(context) {\n  // add a warning if the context is not started\n  if (!context.isOffline && context.state !== \"running\") {\n    warn(\"The AudioContext is \\\"suspended\\\". Invoke Tone.start() from a user action to start the audio.\");\n  }\n}\n/**\n * The default logger is the console\n */\n\nlet defaultLogger = console;\n/**\n * Set the logging interface\n */\n\nexport function setLogger(logger) {\n  defaultLogger = logger;\n}\n/**\n * Log anything\n */\n\nexport function log(...args) {\n  defaultLogger.log(...args);\n}\n/**\n * Warn anything\n */\n\nexport function warn(...args) {\n  defaultLogger.warn(...args);\n}","/**\n * Test if the arg is undefined\n */\nexport function isUndef(arg) {\n  return typeof arg === \"undefined\";\n}\n/**\n * Test if the arg is not undefined\n */\n\nexport function isDefined(arg) {\n  return !isUndef(arg);\n}\n/**\n * Test if the arg is a function\n */\n\nexport function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n/**\n * Test if the argument is a number.\n */\n\nexport function isNumber(arg) {\n  return typeof arg === \"number\";\n}\n/**\n * Test if the given argument is an object literal (i.e. `{}`);\n */\n\nexport function isObject(arg) {\n  return Object.prototype.toString.call(arg) === \"[object Object]\" && arg.constructor === Object;\n}\n/**\n * Test if the argument is a boolean.\n */\n\nexport function isBoolean(arg) {\n  return typeof arg === \"boolean\";\n}\n/**\n * Test if the argument is an Array\n */\n\nexport function isArray(arg) {\n  return Array.isArray(arg);\n}\n/**\n * Test if the argument is a string.\n */\n\nexport function isString(arg) {\n  return typeof arg === \"string\";\n}\n/**\n * Test if the argument is in the form of a note in scientific pitch notation.\n * e.g. \"C4\"\n */\n\nexport function isNote(arg) {\n  return isString(arg) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);\n}","import { AudioContext as stdAudioContext, AudioWorkletNode as stdAudioWorkletNode, OfflineAudioContext as stdOfflineAudioContext } from \"standardized-audio-context\";\nimport { assert } from \"../util/Debug\";\nimport { isDefined } from \"../util/TypeCheck\";\n/**\n * Create a new AudioContext\n */\n\nexport function createAudioContext() {\n  return new stdAudioContext();\n}\n/**\n * Create a new OfflineAudioContext\n */\n\nexport function createOfflineAudioContext(channels, length, sampleRate) {\n  return new stdOfflineAudioContext(channels, length, sampleRate);\n}\n/**\n * A reference to the window object\n * @hidden\n */\n\nexport const theWindow = typeof self === \"object\" ? self : null;\n/**\n * If the browser has a window object which has an AudioContext\n * @hidden\n */\n\nexport const hasAudioContext = theWindow && (theWindow.hasOwnProperty(\"AudioContext\") || theWindow.hasOwnProperty(\"webkitAudioContext\"));\nexport function createAudioWorkletNode(context, name, options) {\n  assert(isDefined(stdAudioWorkletNode), \"This node only works in a secure context (https or localhost)\"); // @ts-ignore\n\n  return new stdAudioWorkletNode(context, name, options);\n}\n/**\n * This promise resolves to a boolean which indicates if the\n * functionality is supported within the currently used browse.\n * Taken from [standardized-audio-context](https://github.com/chrisguttandin/standardized-audio-context#issupported)\n */\n\nexport { isSupported as supported } from \"standardized-audio-context\";","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nexport var __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\nexport function __rest(s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\nexport function __param(paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n}\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\nexport function __generator(thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n}\nexport function __exportStar(m, exports) {\n  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n}\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n}\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n}\n;\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []),\n      i,\n      q = [];\n  return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i;\n\n  function verb(n) {\n    if (g[n]) i[n] = function (v) {\n      return new Promise(function (a, b) {\n        q.push([n, v, a, b]) > 1 || resume(n, v);\n      });\n    };\n  }\n\n  function resume(n, v) {\n    try {\n      step(g[n](v));\n    } catch (e) {\n      settle(q[0][3], e);\n    }\n  }\n\n  function step(r) {\n    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n  }\n\n  function fulfill(value) {\n    resume(\"next\", value);\n  }\n\n  function reject(value) {\n    resume(\"throw\", value);\n  }\n\n  function settle(f, v) {\n    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n  }\n}\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) {\n    throw e;\n  }), verb(\"return\"), i[Symbol.iterator] = function () {\n    return this;\n  }, i;\n\n  function verb(n, f) {\n    i[n] = o[n] ? function (v) {\n      return (p = !p) ? {\n        value: __await(o[n](v)),\n        done: n === \"return\"\n      } : f ? f(v) : v;\n    } : f;\n  }\n}\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator],\n      i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i);\n\n  function verb(n) {\n    i[n] = o[n] && function (v) {\n      return new Promise(function (resolve, reject) {\n        v = o[n](v), settle(resolve, reject, v.done, v.value);\n      });\n    };\n  }\n\n  function settle(resolve, reject, d, v) {\n    Promise.resolve(v).then(function (v) {\n      resolve({\n        value: v,\n        done: d\n      });\n    }, reject);\n  }\n}\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) {\n    Object.defineProperty(cooked, \"raw\", {\n      value: raw\n    });\n  } else {\n    cooked.raw = raw;\n  }\n\n  return cooked;\n}\n;\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result.default = mod;\n  return result;\n}\nexport function __importDefault(mod) {\n  return mod && mod.__esModule ? mod : {\n    default: mod\n  };\n}\nexport function __classPrivateFieldGet(receiver, privateMap) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n\n  return privateMap.get(receiver);\n}\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to set private field on non-instance\");\n  }\n\n  privateMap.set(receiver, value);\n  return value;\n}","/**\n * A class which provides a reliable callback using either\n * a Web Worker, or if that isn't supported, falls back to setTimeout.\n */\nexport class Ticker {\n  constructor(callback, type, updateInterval) {\n    this._callback = callback;\n    this._type = type;\n    this._updateInterval = updateInterval; // create the clock source for the first time\n\n    this._createClock();\n  }\n  /**\n   * Generate a web worker\n   */\n\n\n  _createWorker() {\n    const blob = new Blob([\n    /* javascript */\n    `\n\t\t\t// the initial timeout time\n\t\t\tlet timeoutTime =  ${(this._updateInterval * 1000).toFixed(1)};\n\t\t\t// onmessage callback\n\t\t\tself.onmessage = function(msg){\n\t\t\t\ttimeoutTime = parseInt(msg.data);\n\t\t\t};\n\t\t\t// the tick function which posts a message\n\t\t\t// and schedules a new tick\n\t\t\tfunction tick(){\n\t\t\t\tsetTimeout(tick, timeoutTime);\n\t\t\t\tself.postMessage('tick');\n\t\t\t}\n\t\t\t// call tick initially\n\t\t\ttick();\n\t\t\t`], {\n      type: \"text/javascript\"\n    });\n    const blobUrl = URL.createObjectURL(blob);\n    const worker = new Worker(blobUrl);\n    worker.onmessage = this._callback.bind(this);\n    this._worker = worker;\n  }\n  /**\n   * Create a timeout loop\n   */\n\n\n  _createTimeout() {\n    this._timeout = setTimeout(() => {\n      this._createTimeout();\n\n      this._callback();\n    }, this._updateInterval * 1000);\n  }\n  /**\n   * Create the clock source.\n   */\n\n\n  _createClock() {\n    if (this._type === \"worker\") {\n      try {\n        this._createWorker();\n      } catch (e) {\n        // workers not supported, fallback to timeout\n        this._type = \"timeout\";\n\n        this._createClock();\n      }\n    } else if (this._type === \"timeout\") {\n      this._createTimeout();\n    }\n  }\n  /**\n   * Clean up the current clock source\n   */\n\n\n  _disposeClock() {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n      this._timeout = 0;\n    }\n\n    if (this._worker) {\n      this._worker.terminate();\n\n      this._worker.onmessage = null;\n    }\n  }\n  /**\n   * The rate in seconds the ticker will update\n   */\n\n\n  get updateInterval() {\n    return this._updateInterval;\n  }\n\n  set updateInterval(interval) {\n    this._updateInterval = Math.max(interval, 128 / 44100);\n\n    if (this._type === \"worker\") {\n      this._worker.postMessage(Math.max(interval * 1000, 1));\n    }\n  }\n  /**\n   * The type of the ticker, either a worker or a timeout\n   */\n\n\n  get type() {\n    return this._type;\n  }\n\n  set type(type) {\n    this._disposeClock();\n\n    this._type = type;\n\n    this._createClock();\n  }\n  /**\n   * Clean up\n   */\n\n\n  dispose() {\n    this._disposeClock();\n  }\n\n}","import { isAnyAudioContext, isAnyAudioNode, isAnyAudioParam, isAnyOfflineAudioContext } from \"standardized-audio-context\";\n/**\n * Test if the given value is an instanceof AudioParam\n */\n\nexport function isAudioParam(arg) {\n  return isAnyAudioParam(arg);\n}\n/**\n * Test if the given value is an instanceof AudioNode\n */\n\nexport function isAudioNode(arg) {\n  return isAnyAudioNode(arg);\n}\n/**\n * Test if the arg is instanceof an OfflineAudioContext\n */\n\nexport function isOfflineAudioContext(arg) {\n  return isAnyOfflineAudioContext(arg);\n}\n/**\n * Test if the arg is an instanceof AudioContext\n */\n\nexport function isAudioContext(arg) {\n  return isAnyAudioContext(arg);\n}\n/**\n * Test if the arg is instanceof an AudioBuffer\n */\n\nexport function isAudioBuffer(arg) {\n  return arg instanceof AudioBuffer;\n}","import { isAudioBuffer, isAudioNode, isAudioParam } from \"./AdvancedTypeCheck\";\nimport { isDefined, isObject, isUndef } from \"./TypeCheck\";\n/**\n * Some objects should not be merged\n */\n\nfunction noCopy(key, arg) {\n  return key === \"value\" || isAudioParam(arg) || isAudioNode(arg) || isAudioBuffer(arg);\n}\n\nexport function deepMerge(target, ...sources) {\n  if (!sources.length) {\n    return target;\n  }\n\n  const source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (noCopy(key, source[key])) {\n        target[key] = source[key];\n      } else if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, {\n            [key]: {}\n          });\n        }\n\n        deepMerge(target[key], source[key]);\n      } else {\n        Object.assign(target, {\n          [key]: source[key]\n        });\n      }\n    }\n  } // @ts-ignore\n\n\n  return deepMerge(target, ...sources);\n}\n/**\n * Returns true if the two arrays have the same value for each of the elements\n */\n\nexport function deepEquals(arrayA, arrayB) {\n  return arrayA.length === arrayB.length && arrayA.every((element, index) => arrayB[index] === element);\n}\n/**\n * Convert an args array into an object.\n */\n\nexport function optionsFromArguments(defaults, argsArray, keys = [], objKey) {\n  const opts = {};\n  const args = Array.from(argsArray); // if the first argument is an object and has an object key\n\n  if (isObject(args[0]) && objKey && !Reflect.has(args[0], objKey)) {\n    // if it's not part of the defaults\n    const partOfDefaults = Object.keys(args[0]).some(key => Reflect.has(defaults, key));\n\n    if (!partOfDefaults) {\n      // merge that key\n      deepMerge(opts, {\n        [objKey]: args[0]\n      }); // remove the obj key from the keys\n\n      keys.splice(keys.indexOf(objKey), 1); // shift the first argument off\n\n      args.shift();\n    }\n  }\n\n  if (args.length === 1 && isObject(args[0])) {\n    deepMerge(opts, args[0]);\n  } else {\n    for (let i = 0; i < keys.length; i++) {\n      if (isDefined(args[i])) {\n        opts[keys[i]] = args[i];\n      }\n    }\n  }\n\n  return deepMerge(defaults, opts);\n}\n/**\n * Return this instances default values by calling Constructor.getDefaults()\n */\n\nexport function getDefaultsFromInstance(instance) {\n  return instance.constructor.getDefaults();\n}\n/**\n * Returns the fallback if the given object is undefined.\n * Take an array of arguments and return a formatted options object.\n */\n\nexport function defaultArg(given, fallback) {\n  if (isUndef(given)) {\n    return fallback;\n  } else {\n    return given;\n  }\n}\n/**\n * Remove all of the properties belonging to omit from obj.\n */\n\nexport function omitFromObject(obj, omit) {\n  omit.forEach(prop => {\n    if (Reflect.has(obj, prop)) {\n      delete obj[prop];\n    }\n  });\n  return obj;\n}","/**\n * Tone.js\n * @author Yotam Mann\n * @license http://opensource.org/licenses/MIT MIT License\n * @copyright 2014-2019 Yotam Mann\n */\nimport { version } from \"../version\";\nimport { theWindow } from \"./context/AudioContext\";\nimport { log } from \"./util/Debug\";\n/**\n * @class  Tone is the base class of all other classes.\n * @constructor\n */\n\nexport class Tone {\n  constructor() {\n    //-------------------------------------\n    // \tDEBUGGING\n    //-------------------------------------\n\n    /**\n     * Set this debug flag to log all events that happen in this class.\n     */\n    this.debug = false; //-------------------------------------\n    // \tDISPOSING\n    //-------------------------------------\n\n    /**\n     * Indicates if the instance was disposed\n     */\n\n    this._wasDisposed = false;\n  }\n  /**\n   * Returns all of the default options belonging to the class.\n   */\n\n\n  static getDefaults() {\n    return {};\n  }\n  /**\n   * Prints the outputs to the console log for debugging purposes.\n   * Prints the contents only if either the object has a property\n   * called `debug` set to true, or a variable called TONE_DEBUG_CLASS\n   * is set to the name of the class.\n   * @example\n   * const osc = new Tone.Oscillator();\n   * // prints all logs originating from this oscillator\n   * osc.debug = true;\n   * // calls to start/stop will print in the console\n   * osc.start();\n   */\n\n\n  log(...args) {\n    // if the object is either set to debug = true\n    // or if there is a string on the Tone.global.with the class name\n    if (this.debug || theWindow && this.toString() === theWindow.TONE_DEBUG_CLASS) {\n      log(this, ...args);\n    }\n  }\n  /**\n   * disconnect and dispose.\n   */\n\n\n  dispose() {\n    this._wasDisposed = true;\n    return this;\n  }\n  /**\n   * Indicates if the instance was disposed. 'Disposing' an\n   * instance means that all of the Web Audio nodes that were\n   * created for the instance are disconnected and freed for garbage collection.\n   */\n\n\n  get disposed() {\n    return this._wasDisposed;\n  }\n  /**\n   * Convert the class to a string\n   * @example\n   * const osc = new Tone.Oscillator();\n   * console.log(osc.toString());\n   */\n\n\n  toString() {\n    return this.name;\n  }\n\n}\n/**\n * The version number semver\n */\n\nTone.version = version;","/**\n * The threshold for correctness for operators. Less than one sample even\n * at very high sampling rates (e.g. `1e-6 < 1 / 192000`).\n */\nconst EPSILON = 1e-6;\n/**\n * Test if A is greater than B\n */\n\nexport function GT(a, b) {\n  return a > b + EPSILON;\n}\n/**\n * Test if A is greater than or equal to B\n */\n\nexport function GTE(a, b) {\n  return GT(a, b) || EQ(a, b);\n}\n/**\n * Test if A is less than B\n */\n\nexport function LT(a, b) {\n  return a + EPSILON < b;\n}\n/**\n * Test if A is less than B\n */\n\nexport function EQ(a, b) {\n  return Math.abs(a - b) < EPSILON;\n}\n/**\n * Clamp the value within the given range\n */\n\nexport function clamp(value, min, max) {\n  return Math.max(Math.min(value, max), min);\n}","import { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"./Defaults\";\nimport { assert } from \"./Debug\";\nimport { EQ, GT, GTE, LT } from \"./Math\";\n/**\n * A Timeline class for scheduling and maintaining state\n * along a timeline. All events must have a \"time\" property.\n * Internally, events are stored in time order for fast\n * retrieval.\n */\n\nexport class Timeline extends Tone {\n  constructor() {\n    super();\n    this.name = \"Timeline\";\n    /**\n     * The array of scheduled timeline events\n     */\n\n    this._timeline = [];\n    const options = optionsFromArguments(Timeline.getDefaults(), arguments, [\"memory\"]);\n    this.memory = options.memory;\n    this.increasing = options.increasing;\n  }\n\n  static getDefaults() {\n    return {\n      memory: Infinity,\n      increasing: false\n    };\n  }\n  /**\n   * The number of items in the timeline.\n   */\n\n\n  get length() {\n    return this._timeline.length;\n  }\n  /**\n   * Insert an event object onto the timeline. Events must have a \"time\" attribute.\n   * @param event  The event object to insert into the timeline.\n   */\n\n\n  add(event) {\n    // the event needs to have a time attribute\n    assert(Reflect.has(event, \"time\"), \"Timeline: events must have a time attribute\");\n    event.time = event.time.valueOf();\n\n    if (this.increasing && this.length) {\n      const lastValue = this._timeline[this.length - 1];\n      assert(GTE(event.time, lastValue.time), \"The time must be greater than or equal to the last scheduled time\");\n\n      this._timeline.push(event);\n    } else {\n      const index = this._search(event.time);\n\n      this._timeline.splice(index + 1, 0, event);\n    } // if the length is more than the memory, remove the previous ones\n\n\n    if (this.length > this.memory) {\n      const diff = this.length - this.memory;\n\n      this._timeline.splice(0, diff);\n    }\n\n    return this;\n  }\n  /**\n   * Remove an event from the timeline.\n   * @param  {Object}  event  The event object to remove from the list.\n   * @returns {Timeline} this\n   */\n\n\n  remove(event) {\n    const index = this._timeline.indexOf(event);\n\n    if (index !== -1) {\n      this._timeline.splice(index, 1);\n    }\n\n    return this;\n  }\n  /**\n   * Get the nearest event whose time is less than or equal to the given time.\n   * @param  time  The time to query.\n   */\n\n\n  get(time, param = \"time\") {\n    const index = this._search(time, param);\n\n    if (index !== -1) {\n      return this._timeline[index];\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Return the first event in the timeline without removing it\n   * @returns {Object} The first event object\n   */\n\n\n  peek() {\n    return this._timeline[0];\n  }\n  /**\n   * Return the first event in the timeline and remove it\n   */\n\n\n  shift() {\n    return this._timeline.shift();\n  }\n  /**\n   * Get the event which is scheduled after the given time.\n   * @param  time  The time to query.\n   */\n\n\n  getAfter(time, param = \"time\") {\n    const index = this._search(time, param);\n\n    if (index + 1 < this._timeline.length) {\n      return this._timeline[index + 1];\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Get the event before the event at the given time.\n   * @param  time  The time to query.\n   */\n\n\n  getBefore(time) {\n    const len = this._timeline.length; // if it's after the last item, return the last item\n\n    if (len > 0 && this._timeline[len - 1].time < time) {\n      return this._timeline[len - 1];\n    }\n\n    const index = this._search(time);\n\n    if (index - 1 >= 0) {\n      return this._timeline[index - 1];\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Cancel events at and after the given time\n   * @param  after  The time to query.\n   */\n\n\n  cancel(after) {\n    if (this._timeline.length > 1) {\n      let index = this._search(after);\n\n      if (index >= 0) {\n        if (EQ(this._timeline[index].time, after)) {\n          // get the first item with that time\n          for (let i = index; i >= 0; i--) {\n            if (EQ(this._timeline[i].time, after)) {\n              index = i;\n            } else {\n              break;\n            }\n          }\n\n          this._timeline = this._timeline.slice(0, index);\n        } else {\n          this._timeline = this._timeline.slice(0, index + 1);\n        }\n      } else {\n        this._timeline = [];\n      }\n    } else if (this._timeline.length === 1) {\n      // the first item's time\n      if (GTE(this._timeline[0].time, after)) {\n        this._timeline = [];\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Cancel events before or equal to the given time.\n   * @param  time  The time to cancel before.\n   */\n\n\n  cancelBefore(time) {\n    const index = this._search(time);\n\n    if (index >= 0) {\n      this._timeline = this._timeline.slice(index + 1);\n    }\n\n    return this;\n  }\n  /**\n   * Returns the previous event if there is one. null otherwise\n   * @param  event The event to find the previous one of\n   * @return The event right before the given event\n   */\n\n\n  previousEvent(event) {\n    const index = this._timeline.indexOf(event);\n\n    if (index > 0) {\n      return this._timeline[index - 1];\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Does a binary search on the timeline array and returns the\n   * nearest event index whose time is after or equal to the given time.\n   * If a time is searched before the first index in the timeline, -1 is returned.\n   * If the time is after the end, the index of the last item is returned.\n   */\n\n\n  _search(time, param = \"time\") {\n    if (this._timeline.length === 0) {\n      return -1;\n    }\n\n    let beginning = 0;\n    const len = this._timeline.length;\n    let end = len;\n\n    if (len > 0 && this._timeline[len - 1][param] <= time) {\n      return len - 1;\n    }\n\n    while (beginning < end) {\n      // calculate the midpoint for roughly equal partition\n      let midPoint = Math.floor(beginning + (end - beginning) / 2);\n      const event = this._timeline[midPoint];\n      const nextEvent = this._timeline[midPoint + 1];\n\n      if (EQ(event[param], time)) {\n        // choose the last one that has the same time\n        for (let i = midPoint; i < this._timeline.length; i++) {\n          const testEvent = this._timeline[i];\n\n          if (EQ(testEvent[param], time)) {\n            midPoint = i;\n          } else {\n            break;\n          }\n        }\n\n        return midPoint;\n      } else if (LT(event[param], time) && GT(nextEvent[param], time)) {\n        return midPoint;\n      } else if (GT(event[param], time)) {\n        // search lower\n        end = midPoint;\n      } else {\n        // search upper\n        beginning = midPoint + 1;\n      }\n    }\n\n    return -1;\n  }\n  /**\n   * Internal iterator. Applies extra safety checks for\n   * removing items from the array.\n   */\n\n\n  _iterate(callback, lowerBound = 0, upperBound = this._timeline.length - 1) {\n    this._timeline.slice(lowerBound, upperBound + 1).forEach(callback);\n  }\n  /**\n   * Iterate over everything in the array\n   * @param  callback The callback to invoke with every item\n   */\n\n\n  forEach(callback) {\n    this._iterate(callback);\n\n    return this;\n  }\n  /**\n   * Iterate over everything in the array at or before the given time.\n   * @param  time The time to check if items are before\n   * @param  callback The callback to invoke with every item\n   */\n\n\n  forEachBefore(time, callback) {\n    // iterate over the items in reverse so that removing an item doesn't break things\n    const upperBound = this._search(time);\n\n    if (upperBound !== -1) {\n      this._iterate(callback, 0, upperBound);\n    }\n\n    return this;\n  }\n  /**\n   * Iterate over everything in the array after the given time.\n   * @param  time The time to check if items are before\n   * @param  callback The callback to invoke with every item\n   */\n\n\n  forEachAfter(time, callback) {\n    // iterate over the items in reverse so that removing an item doesn't break things\n    const lowerBound = this._search(time);\n\n    this._iterate(callback, lowerBound + 1);\n\n    return this;\n  }\n  /**\n   * Iterate over everything in the array between the startTime and endTime.\n   * The timerange is inclusive of the startTime, but exclusive of the endTime.\n   * range = [startTime, endTime).\n   * @param  startTime The time to check if items are before\n   * @param  endTime The end of the test interval.\n   * @param  callback The callback to invoke with every item\n   */\n\n\n  forEachBetween(startTime, endTime, callback) {\n    let lowerBound = this._search(startTime);\n\n    let upperBound = this._search(endTime);\n\n    if (lowerBound !== -1 && upperBound !== -1) {\n      if (this._timeline[lowerBound].time !== startTime) {\n        lowerBound += 1;\n      } // exclusive of the end time\n\n\n      if (this._timeline[upperBound].time === endTime) {\n        upperBound -= 1;\n      }\n\n      this._iterate(callback, lowerBound, upperBound);\n    } else if (lowerBound === -1) {\n      this._iterate(callback, 0, upperBound);\n    }\n\n    return this;\n  }\n  /**\n   * Iterate over everything in the array at or after the given time. Similar to\n   * forEachAfter, but includes the item(s) at the given time.\n   * @param  time The time to check if items are before\n   * @param  callback The callback to invoke with every item\n   */\n\n\n  forEachFrom(time, callback) {\n    // iterate over the items in reverse so that removing an item doesn't break things\n    let lowerBound = this._search(time); // work backwards until the event time is less than time\n\n\n    while (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {\n      lowerBound--;\n    }\n\n    this._iterate(callback, lowerBound + 1);\n\n    return this;\n  }\n  /**\n   * Iterate over everything in the array at the given time\n   * @param  time The time to check if items are before\n   * @param  callback The callback to invoke with every item\n   */\n\n\n  forEachAtTime(time, callback) {\n    // iterate over the items in reverse so that removing an item doesn't break things\n    const upperBound = this._search(time);\n\n    if (upperBound !== -1 && EQ(this._timeline[upperBound].time, time)) {\n      let lowerBound = upperBound;\n\n      for (let i = upperBound; i >= 0; i--) {\n        if (EQ(this._timeline[i].time, time)) {\n          lowerBound = i;\n        } else {\n          break;\n        }\n      }\n\n      this._iterate(event => {\n        callback(event);\n      }, lowerBound, upperBound);\n    }\n\n    return this;\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n    this._timeline = [];\n    return this;\n  }\n\n}","//-------------------------------------\n// INITIALIZING NEW CONTEXT\n//-------------------------------------\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyNewContext = [];\n/**\n * Used internally to setup a new Context\n */\n\nexport function onContextInit(cb) {\n  notifyNewContext.push(cb);\n}\n/**\n * Invoke any classes which need to also be initialized when a new context is created.\n */\n\nexport function initializeContext(ctx) {\n  // add any additional modules\n  notifyNewContext.forEach(cb => cb(ctx));\n}\n/**\n * Array of callbacks to invoke when a new context is created\n */\n\nconst notifyCloseContext = [];\n/**\n * Used internally to tear down a Context\n */\n\nexport function onContextClose(cb) {\n  notifyCloseContext.push(cb);\n}\nexport function closeContext(ctx) {\n  // add any additional modules\n  notifyCloseContext.forEach(cb => cb(ctx));\n}","import { Tone } from \"../Tone\";\nimport { isUndef } from \"./TypeCheck\";\n/**\n * Emitter gives classes which extend it\n * the ability to listen for and emit events.\n * Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).\n * MIT (c) 2011 Jerome Etienne.\n */\n\nexport class Emitter extends Tone {\n  constructor() {\n    super(...arguments);\n    this.name = \"Emitter\";\n  }\n  /**\n   * Bind a callback to a specific event.\n   * @param  event     The name of the event to listen for.\n   * @param  callback  The callback to invoke when the event is emitted\n   */\n\n\n  on(event, callback) {\n    // split the event\n    const events = event.split(/\\W+/);\n    events.forEach(eventName => {\n      if (isUndef(this._events)) {\n        this._events = {};\n      }\n\n      if (!this._events.hasOwnProperty(eventName)) {\n        this._events[eventName] = [];\n      }\n\n      this._events[eventName].push(callback);\n    });\n    return this;\n  }\n  /**\n   * Bind a callback which is only invoked once\n   * @param  event     The name of the event to listen for.\n   * @param  callback  The callback to invoke when the event is emitted\n   */\n\n\n  once(event, callback) {\n    const boundCallback = (...args) => {\n      // invoke the callback\n      callback(...args); // remove the event\n\n      this.off(event, boundCallback);\n    };\n\n    this.on(event, boundCallback);\n    return this;\n  }\n  /**\n   * Remove the event listener.\n   * @param  event     The event to stop listening to.\n   * @param  callback  The callback which was bound to the event with Emitter.on.\n   *                   If no callback is given, all callbacks events are removed.\n   */\n\n\n  off(event, callback) {\n    const events = event.split(/\\W+/);\n    events.forEach(eventName => {\n      if (isUndef(this._events)) {\n        this._events = {};\n      }\n\n      if (this._events.hasOwnProperty(event)) {\n        if (isUndef(callback)) {\n          this._events[event] = [];\n        } else {\n          const eventList = this._events[event];\n\n          for (let i = 0; i < eventList.length; i++) {\n            if (eventList[i] === callback) {\n              eventList.splice(i, 1);\n            }\n          }\n        }\n      }\n    });\n    return this;\n  }\n  /**\n   * Invoke all of the callbacks bound to the event\n   * with any arguments passed in.\n   * @param  event  The name of the event.\n   * @param args The arguments to pass to the functions listening.\n   */\n\n\n  emit(event, ...args) {\n    if (this._events) {\n      if (this._events.hasOwnProperty(event)) {\n        const eventList = this._events[event].slice(0);\n\n        for (let i = 0, len = eventList.length; i < len; i++) {\n          eventList[i].apply(this, args);\n        }\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Add Emitter functions (on/off/emit) to the object\n   */\n\n\n  static mixin(constr) {\n    // instance._events = {};\n    [\"on\", \"once\", \"off\", \"emit\"].forEach(name => {\n      const property = Object.getOwnPropertyDescriptor(Emitter.prototype, name);\n      Object.defineProperty(constr.prototype, name, property);\n    });\n  }\n  /**\n   * Clean up\n   */\n\n\n  dispose() {\n    super.dispose();\n    this._events = undefined;\n    return this;\n  }\n\n}","import { Emitter } from \"../util/Emitter\";\nexport class BaseContext extends Emitter {\n  constructor() {\n    super(...arguments);\n    this.isOffline = false;\n  }\n\n}","import { __awaiter } from \"tslib\";\nimport { Ticker } from \"../clock/Ticker\";\nimport { isAudioContext } from \"../util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined, isString } from \"../util/TypeCheck\";\nimport { createAudioContext, createAudioWorkletNode } from \"./AudioContext\";\nimport { closeContext, initializeContext } from \"./ContextInitialization\";\nimport { BaseContext } from \"./BaseContext\";\nimport { assert } from \"../util/Debug\";\n/**\n * Wrapper around the native AudioContext.\n * @category Core\n */\n\nexport class Context extends BaseContext {\n  constructor() {\n    super();\n    this.name = \"Context\";\n    /**\n     * An object containing all of the constants AudioBufferSourceNodes\n     */\n\n    this._constants = new Map();\n    /**\n     * All of the setTimeout events.\n     */\n\n    this._timeouts = new Timeline();\n    /**\n     * The timeout id counter\n     */\n\n    this._timeoutIds = 0;\n    /**\n     * Private indicator if the context has been initialized\n     */\n\n    this._initialized = false;\n    /**\n     * Indicates if the context is an OfflineAudioContext or an AudioContext\n     */\n\n    this.isOffline = false; //--------------------------------------------\n    // AUDIO WORKLET\n    //--------------------------------------------\n\n    /**\n     * Maps a module name to promise of the addModule method\n     */\n\n    this._workletModules = new Map();\n    const options = optionsFromArguments(Context.getDefaults(), arguments, [\"context\"]);\n\n    if (options.context) {\n      this._context = options.context;\n    } else {\n      this._context = createAudioContext();\n    }\n\n    this._latencyHint = options.latencyHint;\n    this.lookAhead = options.lookAhead;\n    this._ticker = new Ticker(this.emit.bind(this, \"tick\"), options.clockSource, options.updateInterval);\n    this.on(\"tick\", this._timeoutLoop.bind(this)); // fwd events from the context\n\n    this._context.onstatechange = () => {\n      this.emit(\"statechange\", this.state);\n    };\n  }\n\n  static getDefaults() {\n    return {\n      clockSource: \"worker\",\n      latencyHint: \"interactive\",\n      lookAhead: 0.1,\n      updateInterval: 0.05\n    };\n  }\n  /**\n   * Finish setting up the context. **You usually do not need to do this manually.**\n   */\n\n\n  initialize() {\n    if (!this._initialized) {\n      // add any additional modules\n      initializeContext(this);\n      this._initialized = true;\n    }\n\n    return this;\n  } //---------------------------\n  // BASE AUDIO CONTEXT METHODS\n  //---------------------------\n\n\n  createAnalyser() {\n    return this._context.createAnalyser();\n  }\n\n  createOscillator() {\n    return this._context.createOscillator();\n  }\n\n  createBufferSource() {\n    return this._context.createBufferSource();\n  }\n\n  createBiquadFilter() {\n    return this._context.createBiquadFilter();\n  }\n\n  createBuffer(numberOfChannels, length, sampleRate) {\n    return this._context.createBuffer(numberOfChannels, length, sampleRate);\n  }\n\n  createChannelMerger(numberOfInputs) {\n    return this._context.createChannelMerger(numberOfInputs);\n  }\n\n  createChannelSplitter(numberOfOutputs) {\n    return this._context.createChannelSplitter(numberOfOutputs);\n  }\n\n  createConstantSource() {\n    return this._context.createConstantSource();\n  }\n\n  createConvolver() {\n    return this._context.createConvolver();\n  }\n\n  createDelay(maxDelayTime) {\n    return this._context.createDelay(maxDelayTime);\n  }\n\n  createDynamicsCompressor() {\n    return this._context.createDynamicsCompressor();\n  }\n\n  createGain() {\n    return this._context.createGain();\n  }\n\n  createIIRFilter(feedForward, feedback) {\n    // @ts-ignore\n    return this._context.createIIRFilter(feedForward, feedback);\n  }\n\n  createPanner() {\n    return this._context.createPanner();\n  }\n\n  createPeriodicWave(real, imag, constraints) {\n    return this._context.createPeriodicWave(real, imag, constraints);\n  }\n\n  createStereoPanner() {\n    return this._context.createStereoPanner();\n  }\n\n  createWaveShaper() {\n    return this._context.createWaveShaper();\n  }\n\n  createMediaStreamSource(stream) {\n    assert(isAudioContext(this._context), \"Not available if OfflineAudioContext\");\n    const context = this._context;\n    return context.createMediaStreamSource(stream);\n  }\n\n  createMediaStreamDestination() {\n    assert(isAudioContext(this._context), \"Not available if OfflineAudioContext\");\n    const context = this._context;\n    return context.createMediaStreamDestination();\n  }\n\n  decodeAudioData(audioData) {\n    return this._context.decodeAudioData(audioData);\n  }\n  /**\n   * The current time in seconds of the AudioContext.\n   */\n\n\n  get currentTime() {\n    return this._context.currentTime;\n  }\n  /**\n   * The current time in seconds of the AudioContext.\n   */\n\n\n  get state() {\n    return this._context.state;\n  }\n  /**\n   * The current time in seconds of the AudioContext.\n   */\n\n\n  get sampleRate() {\n    return this._context.sampleRate;\n  }\n  /**\n   * The listener\n   */\n\n\n  get listener() {\n    this.initialize();\n    return this._listener;\n  }\n\n  set listener(l) {\n    assert(!this._initialized, \"The listener cannot be set after initialization.\");\n    this._listener = l;\n  }\n  /**\n   * There is only one Transport per Context. It is created on initialization.\n   */\n\n\n  get transport() {\n    this.initialize();\n    return this._transport;\n  }\n\n  set transport(t) {\n    assert(!this._initialized, \"The transport cannot be set after initialization.\");\n    this._transport = t;\n  }\n  /**\n   * This is the Draw object for the context which is useful for synchronizing the draw frame with the Tone.js clock.\n   */\n\n\n  get draw() {\n    this.initialize();\n    return this._draw;\n  }\n\n  set draw(d) {\n    assert(!this._initialized, \"Draw cannot be set after initialization.\");\n    this._draw = d;\n  }\n  /**\n   * A reference to the Context's destination node.\n   */\n\n\n  get destination() {\n    this.initialize();\n    return this._destination;\n  }\n\n  set destination(d) {\n    assert(!this._initialized, \"The destination cannot be set after initialization.\");\n    this._destination = d;\n  }\n  /**\n   * Create an audio worklet node from a name and options. The module\n   * must first be loaded using [[addAudioWorkletModule]].\n   */\n\n\n  createAudioWorkletNode(name, options) {\n    return createAudioWorkletNode(this.rawContext, name, options);\n  }\n  /**\n   * Add an AudioWorkletProcessor module\n   * @param url The url of the module\n   * @param name The name of the module\n   */\n\n\n  addAudioWorkletModule(url, name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      assert(isDefined(this.rawContext.audioWorklet), \"AudioWorkletNode is only available in a secure context (https or localhost)\");\n\n      if (!this._workletModules.has(name)) {\n        this._workletModules.set(name, this.rawContext.audioWorklet.addModule(url));\n      }\n\n      yield this._workletModules.get(name);\n    });\n  }\n  /**\n   * Returns a promise which resolves when all of the worklets have been loaded on this context\n   */\n\n\n  workletsAreReady() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const promises = [];\n\n      this._workletModules.forEach(promise => promises.push(promise));\n\n      yield Promise.all(promises);\n    });\n  } //---------------------------\n  // TICKER\n  //---------------------------\n\n  /**\n   * How often the interval callback is invoked.\n   * This number corresponds to how responsive the scheduling\n   * can be. context.updateInterval + context.lookAhead gives you the\n   * total latency between scheduling an event and hearing it.\n   */\n\n\n  get updateInterval() {\n    return this._ticker.updateInterval;\n  }\n\n  set updateInterval(interval) {\n    this._ticker.updateInterval = interval;\n  }\n  /**\n   * What the source of the clock is, either \"worker\" (default),\n   * \"timeout\", or \"offline\" (none).\n   */\n\n\n  get clockSource() {\n    return this._ticker.type;\n  }\n\n  set clockSource(type) {\n    this._ticker.type = type;\n  }\n  /**\n   * The type of playback, which affects tradeoffs between audio\n   * output latency and responsiveness.\n   * In addition to setting the value in seconds, the latencyHint also\n   * accepts the strings \"interactive\" (prioritizes low latency),\n   * \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n   * latency and performance), and \"fastest\" (lowest latency, might glitch more often).\n   * @example\n   * // set the latencyHint to prioritize smooth playback at the expensive of latency\n   * Tone.context.latencyHint = \"playback\";\n   */\n\n\n  get latencyHint() {\n    return this._latencyHint;\n  }\n\n  set latencyHint(hint) {\n    let lookAheadValue = 0;\n    this._latencyHint = hint;\n\n    if (isString(hint)) {\n      switch (hint) {\n        case \"interactive\":\n          lookAheadValue = 0.1;\n          break;\n\n        case \"playback\":\n          lookAheadValue = 0.8;\n          break;\n\n        case \"balanced\":\n          lookAheadValue = 0.25;\n          break;\n\n        case \"fastest\":\n          lookAheadValue = 0.01;\n          break;\n      }\n    }\n\n    this.lookAhead = lookAheadValue;\n    this.updateInterval = lookAheadValue / 2;\n  }\n  /**\n   * The unwrapped AudioContext.\n   */\n\n\n  get rawContext() {\n    return this._context;\n  }\n  /**\n   * The current audio context time plus a short [[lookAhead]].\n   */\n\n\n  now() {\n    return this._context.currentTime + this.lookAhead;\n  }\n  /**\n   * The current audio context time without the [[lookAhead]].\n   * In most cases it is better to use [[now]] instead of [[immediate]] since\n   * with [[now]] the [[lookAhead]] is applied equally to _all_ components including internal components,\n   * to making sure that everything is scheduled in sync. Mixing [[now]] and [[immediate]]\n   * can cause some timing issues. If no lookAhead is desired, you can set the [[lookAhead]] to `0`.\n   */\n\n\n  immediate() {\n    return this._context.currentTime;\n  }\n  /**\n   * Starts the audio context from a suspended state. This is required\n   * to initially start the AudioContext.\n   */\n\n\n  resume() {\n    if (this._context.state === \"suspended\" && isAudioContext(this._context)) {\n      return this._context.resume();\n    } else {\n      return Promise.resolve();\n    }\n  }\n  /**\n   * Promise which is invoked when the context is running.\n   * Tries to resume the context if it's not started.\n   */\n\n\n  close() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (isAudioContext(this._context)) {\n        yield this._context.close();\n      }\n\n      if (this._initialized) {\n        closeContext(this);\n      }\n    });\n  }\n  /**\n   * Generate a looped buffer at some constant value.\n   */\n\n\n  getConstant(val) {\n    if (this._constants.has(val)) {\n      return this._constants.get(val);\n    } else {\n      const buffer = this._context.createBuffer(1, 128, this._context.sampleRate);\n\n      const arr = buffer.getChannelData(0);\n\n      for (let i = 0; i < arr.length; i++) {\n        arr[i] = val;\n      }\n\n      const constant = this._context.createBufferSource();\n\n      constant.channelCount = 1;\n      constant.channelCountMode = \"explicit\";\n      constant.buffer = buffer;\n      constant.loop = true;\n      constant.start(0);\n\n      this._constants.set(val, constant);\n\n      return constant;\n    }\n  }\n  /**\n   * Clean up. Also closes the audio context.\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._ticker.dispose();\n\n    this._timeouts.dispose();\n\n    Object.keys(this._constants).map(val => this._constants[val].disconnect());\n    return this;\n  } //---------------------------\n  // TIMEOUTS\n  //---------------------------\n\n  /**\n   * The private loop which keeps track of the context scheduled timeouts\n   * Is invoked from the clock source\n   */\n\n\n  _timeoutLoop() {\n    const now = this.now();\n\n    let firstEvent = this._timeouts.peek();\n\n    while (this._timeouts.length && firstEvent && firstEvent.time <= now) {\n      // invoke the callback\n      firstEvent.callback(); // shift the first event off\n\n      this._timeouts.shift(); // get the next one\n\n\n      firstEvent = this._timeouts.peek();\n    }\n  }\n  /**\n   * A setTimeout which is guaranteed by the clock source.\n   * Also runs in the offline context.\n   * @param  fn       The callback to invoke\n   * @param  timeout  The timeout in seconds\n   * @returns ID to use when invoking Context.clearTimeout\n   */\n\n\n  setTimeout(fn, timeout) {\n    this._timeoutIds++;\n    const now = this.now();\n\n    this._timeouts.add({\n      callback: fn,\n      id: this._timeoutIds,\n      time: now + timeout\n    });\n\n    return this._timeoutIds;\n  }\n  /**\n   * Clears a previously scheduled timeout with Tone.context.setTimeout\n   * @param  id  The ID returned from setTimeout\n   */\n\n\n  clearTimeout(id) {\n    this._timeouts.forEach(event => {\n      if (event.id === id) {\n        this._timeouts.remove(event);\n      }\n    });\n\n    return this;\n  }\n  /**\n   * Clear the function scheduled by [[setInterval]]\n   */\n\n\n  clearInterval(id) {\n    return this.clearTimeout(id);\n  }\n  /**\n   * Adds a repeating event to the context's callback clock\n   */\n\n\n  setInterval(fn, interval) {\n    const id = ++this._timeoutIds;\n\n    const intervalFn = () => {\n      const now = this.now();\n\n      this._timeouts.add({\n        callback: () => {\n          // invoke the callback\n          fn(); // invoke the event to repeat it\n\n          intervalFn();\n        },\n        id,\n        time: now + interval\n      });\n    }; // kick it off\n\n\n    intervalFn();\n    return id;\n  }\n\n}","import { isArray } from \"./TypeCheck\";\n/**\n * Make the property not writable using `defineProperty`. Internal use only.\n */\n\nexport function readOnly(target, property) {\n  if (isArray(property)) {\n    property.forEach(str => readOnly(target, str));\n  } else {\n    Object.defineProperty(target, property, {\n      enumerable: true,\n      writable: false\n    });\n  }\n}\n/**\n * Make an attribute writeable. Internal use only.\n */\n\nexport function writable(target, property) {\n  if (isArray(property)) {\n    property.forEach(str => writable(target, str));\n  } else {\n    Object.defineProperty(target, property, {\n      writable: true\n    });\n  }\n}\nexport const noOp = () => {// no operation here!\n};","import { __awaiter } from \"tslib\";\nimport { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { isAudioBuffer } from \"../util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isArray, isNumber, isString } from \"../util/TypeCheck\";\nimport { assert } from \"../util/Debug\";\n/**\n * AudioBuffer loading and storage. ToneAudioBuffer is used internally by all\n * classes that make requests for audio files such as Tone.Player,\n * Tone.Sampler and Tone.Convolver.\n * Aside from load callbacks from individual buffers, ToneAudioBuffer\n * provides events which keep track of the loading progress\n * of _all_ of the buffers. These are ToneAudioBuffer.on(\"load\" / \"progress\" / \"error\")\n * @example\n * const buffer = new Tone.ToneAudioBuffer(\"https://tonejs.github.io/examples/audio/FWDL.mp3\", () => {\n * \tconsole.log(\"loaded\");\n * });\n * @category Core\n */\n\nexport class ToneAudioBuffer extends Tone {\n  constructor() {\n    super();\n    this.name = \"ToneAudioBuffer\";\n    /**\n     * Callback when the buffer is loaded.\n     */\n\n    this.onload = noOp;\n    const options = optionsFromArguments(ToneAudioBuffer.getDefaults(), arguments, [\"url\", \"onload\", \"onerror\"]);\n    this.reverse = options.reverse;\n    this.onload = options.onload;\n\n    if (options.url && isAudioBuffer(options.url) || options.url instanceof ToneAudioBuffer) {\n      this.set(options.url);\n    } else if (isString(options.url)) {\n      // initiate the download\n      this.load(options.url).catch(options.onerror);\n    }\n  }\n\n  static getDefaults() {\n    return {\n      onerror: noOp,\n      onload: noOp,\n      reverse: false\n    };\n  }\n  /**\n   * The sample rate of the AudioBuffer\n   */\n\n\n  get sampleRate() {\n    if (this._buffer) {\n      return this._buffer.sampleRate;\n    } else {\n      return getContext().sampleRate;\n    }\n  }\n  /**\n   * Pass in an AudioBuffer or ToneAudioBuffer to set the value of this buffer.\n   */\n\n\n  set(buffer) {\n    if (buffer instanceof ToneAudioBuffer) {\n      // if it's loaded, set it\n      if (buffer.loaded) {\n        this._buffer = buffer.get();\n      } else {\n        // otherwise when it's loaded, invoke it's callback\n        buffer.onload = () => {\n          this.set(buffer);\n          this.onload(this);\n        };\n      }\n    } else {\n      this._buffer = buffer;\n    } // reverse it initially\n\n\n    if (this._reversed) {\n      this._reverse();\n    }\n\n    return this;\n  }\n  /**\n   * The audio buffer stored in the object.\n   */\n\n\n  get() {\n    return this._buffer;\n  }\n  /**\n   * Makes an fetch request for the selected url then decodes the file as an audio buffer.\n   * Invokes the callback once the audio buffer loads.\n   * @param url The url of the buffer to load. filetype support depends on the browser.\n   * @returns A Promise which resolves with this ToneAudioBuffer\n   */\n\n\n  load(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const doneLoading = ToneAudioBuffer.load(url).then(audioBuffer => {\n        this.set(audioBuffer); // invoke the onload method\n\n        this.onload(this);\n      });\n      ToneAudioBuffer.downloads.push(doneLoading);\n\n      try {\n        yield doneLoading;\n      } finally {\n        // remove the downloaded file\n        const index = ToneAudioBuffer.downloads.indexOf(doneLoading);\n        ToneAudioBuffer.downloads.splice(index, 1);\n      }\n\n      return this;\n    });\n  }\n  /**\n   * clean up\n   */\n\n\n  dispose() {\n    super.dispose();\n    this._buffer = undefined;\n    return this;\n  }\n  /**\n   * Set the audio buffer from the array.\n   * To create a multichannel AudioBuffer, pass in a multidimensional array.\n   * @param array The array to fill the audio buffer\n   */\n\n\n  fromArray(array) {\n    const isMultidimensional = isArray(array) && array[0].length > 0;\n    const channels = isMultidimensional ? array.length : 1;\n    const len = isMultidimensional ? array[0].length : array.length;\n    const context = getContext();\n    const buffer = context.createBuffer(channels, len, context.sampleRate);\n    const multiChannelArray = !isMultidimensional && channels === 1 ? [array] : array;\n\n    for (let c = 0; c < channels; c++) {\n      buffer.copyToChannel(multiChannelArray[c], c);\n    }\n\n    this._buffer = buffer;\n    return this;\n  }\n  /**\n   * Sums multiple channels into 1 channel\n   * @param chanNum Optionally only copy a single channel from the array.\n   */\n\n\n  toMono(chanNum) {\n    if (isNumber(chanNum)) {\n      this.fromArray(this.toArray(chanNum));\n    } else {\n      let outputArray = new Float32Array(this.length);\n      const numChannels = this.numberOfChannels;\n\n      for (let channel = 0; channel < numChannels; channel++) {\n        const channelArray = this.toArray(channel);\n\n        for (let i = 0; i < channelArray.length; i++) {\n          outputArray[i] += channelArray[i];\n        }\n      } // divide by the number of channels\n\n\n      outputArray = outputArray.map(sample => sample / numChannels);\n      this.fromArray(outputArray);\n    }\n\n    return this;\n  }\n  /**\n   * Get the buffer as an array. Single channel buffers will return a 1-dimensional\n   * Float32Array, and multichannel buffers will return multidimensional arrays.\n   * @param channel Optionally only copy a single channel from the array.\n   */\n\n\n  toArray(channel) {\n    if (isNumber(channel)) {\n      return this.getChannelData(channel);\n    } else if (this.numberOfChannels === 1) {\n      return this.toArray(0);\n    } else {\n      const ret = [];\n\n      for (let c = 0; c < this.numberOfChannels; c++) {\n        ret[c] = this.getChannelData(c);\n      }\n\n      return ret;\n    }\n  }\n  /**\n   * Returns the Float32Array representing the PCM audio data for the specific channel.\n   * @param  channel  The channel number to return\n   * @return The audio as a TypedArray\n   */\n\n\n  getChannelData(channel) {\n    if (this._buffer) {\n      return this._buffer.getChannelData(channel);\n    } else {\n      return new Float32Array(0);\n    }\n  }\n  /**\n   * Cut a subsection of the array and return a buffer of the\n   * subsection. Does not modify the original buffer\n   * @param start The time to start the slice\n   * @param end The end time to slice. If none is given will default to the end of the buffer\n   */\n\n\n  slice(start, end = this.duration) {\n    const startSamples = Math.floor(start * this.sampleRate);\n    const endSamples = Math.floor(end * this.sampleRate);\n    assert(startSamples < endSamples, \"The start time must be less than the end time\");\n    const length = endSamples - startSamples;\n    const retBuffer = getContext().createBuffer(this.numberOfChannels, length, this.sampleRate);\n\n    for (let channel = 0; channel < this.numberOfChannels; channel++) {\n      retBuffer.copyToChannel(this.getChannelData(channel).subarray(startSamples, endSamples), channel);\n    }\n\n    return new ToneAudioBuffer(retBuffer);\n  }\n  /**\n   * Reverse the buffer.\n   */\n\n\n  _reverse() {\n    if (this.loaded) {\n      for (let i = 0; i < this.numberOfChannels; i++) {\n        this.getChannelData(i).reverse();\n      }\n    }\n\n    return this;\n  }\n  /**\n   * If the buffer is loaded or not\n   */\n\n\n  get loaded() {\n    return this.length > 0;\n  }\n  /**\n   * The duration of the buffer in seconds.\n   */\n\n\n  get duration() {\n    if (this._buffer) {\n      return this._buffer.duration;\n    } else {\n      return 0;\n    }\n  }\n  /**\n   * The length of the buffer in samples\n   */\n\n\n  get length() {\n    if (this._buffer) {\n      return this._buffer.length;\n    } else {\n      return 0;\n    }\n  }\n  /**\n   * The number of discrete audio channels. Returns 0 if no buffer is loaded.\n   */\n\n\n  get numberOfChannels() {\n    if (this._buffer) {\n      return this._buffer.numberOfChannels;\n    } else {\n      return 0;\n    }\n  }\n  /**\n   * Reverse the buffer.\n   */\n\n\n  get reverse() {\n    return this._reversed;\n  }\n\n  set reverse(rev) {\n    if (this._reversed !== rev) {\n      this._reversed = rev;\n\n      this._reverse();\n    }\n  }\n  /**\n   * Create a ToneAudioBuffer from the array. To create a multichannel AudioBuffer,\n   * pass in a multidimensional array.\n   * @param array The array to fill the audio buffer\n   * @return A ToneAudioBuffer created from the array\n   */\n\n\n  static fromArray(array) {\n    return new ToneAudioBuffer().fromArray(array);\n  }\n  /**\n   * Creates a ToneAudioBuffer from a URL, returns a promise which resolves to a ToneAudioBuffer\n   * @param  url The url to load.\n   * @return A promise which resolves to a ToneAudioBuffer\n   */\n\n\n  static fromUrl(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const buffer = new ToneAudioBuffer();\n      return yield buffer.load(url);\n    });\n  }\n  /**\n   * Loads a url using fetch and returns the AudioBuffer.\n   */\n\n\n  static load(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // test if the url contains multiple extensions\n      const matches = url.match(/\\[(.+\\|?)+\\]$/);\n\n      if (matches) {\n        const extensions = matches[1].split(\"|\");\n        let extension = extensions[0];\n\n        for (const ext of extensions) {\n          if (ToneAudioBuffer.supportsType(ext)) {\n            extension = ext;\n            break;\n          }\n        }\n\n        url = url.replace(matches[0], extension);\n      } // make sure there is a slash between the baseUrl and the url\n\n\n      const baseUrl = ToneAudioBuffer.baseUrl === \"\" || ToneAudioBuffer.baseUrl.endsWith(\"/\") ? ToneAudioBuffer.baseUrl : ToneAudioBuffer.baseUrl + \"/\";\n      const response = yield fetch(baseUrl + url);\n\n      if (!response.ok) {\n        throw new Error(`could not load url: ${url}`);\n      }\n\n      const arrayBuffer = yield response.arrayBuffer();\n      const audioBuffer = yield getContext().decodeAudioData(arrayBuffer);\n      return audioBuffer;\n    });\n  }\n  /**\n   * Checks a url's extension to see if the current browser can play that file type.\n   * @param url The url/extension to test\n   * @return If the file extension can be played\n   * @static\n   * @example\n   * Tone.ToneAudioBuffer.supportsType(\"wav\"); // returns true\n   * Tone.ToneAudioBuffer.supportsType(\"path/to/file.wav\"); // returns true\n   */\n\n\n  static supportsType(url) {\n    const extensions = url.split(\".\");\n    const extension = extensions[extensions.length - 1];\n    const response = document.createElement(\"audio\").canPlayType(\"audio/\" + extension);\n    return response !== \"\";\n  }\n  /**\n   * Returns a Promise which resolves when all of the buffers have loaded\n   */\n\n\n  static loaded() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // this makes sure that the function is always async\n      yield Promise.resolve();\n\n      while (ToneAudioBuffer.downloads.length) {\n        yield ToneAudioBuffer.downloads[0];\n      }\n    });\n  }\n\n} //-------------------------------------\n// STATIC METHODS\n//-------------------------------------\n\n/**\n * A path which is prefixed before every url.\n */\n\nToneAudioBuffer.baseUrl = \"\";\n/**\n * All of the downloads\n */\n\nToneAudioBuffer.downloads = [];","import { __awaiter } from \"tslib\";\nimport { createOfflineAudioContext } from \"../context/AudioContext\";\nimport { Context } from \"../context/Context\";\nimport { isOfflineAudioContext } from \"../util/AdvancedTypeCheck\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\n/**\n * Wrapper around the OfflineAudioContext\n * @category Core\n * @example\n * // generate a single channel, 0.5 second buffer\n * const context = new Tone.OfflineContext(1, 0.5);\n * const osc = new Tone.Oscillator({ context });\n * context.render().then(buffer => {\n * \tconsole.log(buffer.numberOfChannels, buffer.duration);\n * });\n */\n\nexport class OfflineContext extends Context {\n  constructor() {\n    super({\n      clockSource: \"offline\",\n      context: isOfflineAudioContext(arguments[0]) ? arguments[0] : createOfflineAudioContext(arguments[0], arguments[1] * arguments[2], arguments[2]),\n      lookAhead: 0,\n      updateInterval: isOfflineAudioContext(arguments[0]) ? 128 / arguments[0].sampleRate : 128 / arguments[2]\n    });\n    this.name = \"OfflineContext\";\n    /**\n     * An artificial clock source\n     */\n\n    this._currentTime = 0;\n    this.isOffline = true;\n    this._duration = isOfflineAudioContext(arguments[0]) ? arguments[0].length / arguments[0].sampleRate : arguments[1];\n  }\n  /**\n   * Override the now method to point to the internal clock time\n   */\n\n\n  now() {\n    return this._currentTime;\n  }\n  /**\n   * Same as this.now()\n   */\n\n\n  get currentTime() {\n    return this._currentTime;\n  }\n  /**\n   * Render just the clock portion of the audio context.\n   */\n\n\n  _renderClock(asynchronous) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let index = 0;\n\n      while (this._duration - this._currentTime >= 0) {\n        // invoke all the callbacks on that time\n        this.emit(\"tick\"); // increment the clock in block-sized chunks\n\n        this._currentTime += 128 / this.sampleRate; // yield once a second of audio\n\n        index++;\n        const yieldEvery = Math.floor(this.sampleRate / 128);\n\n        if (asynchronous && index % yieldEvery === 0) {\n          yield new Promise(done => setTimeout(done, 1));\n        }\n      }\n    });\n  }\n  /**\n   * Render the output of the OfflineContext\n   * @param asynchronous If the clock should be rendered asynchronously, which will not block the main thread, but be slightly slower.\n   */\n\n\n  render(asynchronous = true) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.workletsAreReady();\n      yield this._renderClock(asynchronous);\n      const buffer = yield this._context.startRendering();\n      return new ToneAudioBuffer(buffer);\n    });\n  }\n  /**\n   * Close the context\n   */\n\n\n  close() {\n    return Promise.resolve();\n  }\n\n}","import { version } from \"../version\";\nimport { hasAudioContext, theWindow } from \"./context/AudioContext\";\nimport { Context } from \"./context/Context\";\nimport { DummyContext } from \"./context/DummyContext\";\nimport { OfflineContext } from \"./context/OfflineContext\";\nimport { isAudioContext, isOfflineAudioContext } from \"./util/AdvancedTypeCheck\";\n/**\n * This dummy context is used to avoid throwing immediate errors when importing in Node.js\n */\n\nconst dummyContext = new DummyContext();\n/**\n * The global audio context which is getable and assignable through\n * getContext and setContext\n */\n\nlet globalContext = dummyContext;\n/**\n * Returns the default system-wide [[Context]]\n * @category Core\n */\n\nexport function getContext() {\n  if (globalContext === dummyContext && hasAudioContext) {\n    setContext(new Context());\n  }\n\n  return globalContext;\n}\n/**\n * Set the default audio context\n * @category Core\n */\n\nexport function setContext(context) {\n  if (isAudioContext(context)) {\n    globalContext = new Context(context);\n  } else if (isOfflineAudioContext(context)) {\n    globalContext = new OfflineContext(context);\n  } else {\n    globalContext = context;\n  }\n}\n/**\n * Most browsers will not play _any_ audio until a user\n * clicks something (like a play button). Invoke this method\n * on a click or keypress event handler to start the audio context.\n * More about the Autoplay policy\n * [here](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio)\n * @example\n * document.querySelector(\"button\").addEventListener(\"click\", async () => {\n * \tawait Tone.start();\n * \tconsole.log(\"context started\");\n * });\n * @category Core\n */\n\nexport function start() {\n  return globalContext.resume();\n}\n/**\n * Log Tone.js + version in the console.\n */\n\nif (theWindow && !theWindow.TONE_SILENCE_LOGGING) {\n  let prefix = \"v\";\n\n  if (version === \"dev\") {\n    prefix = \"\";\n  }\n\n  const printString = ` * Tone.js ${prefix}${version} * `; // eslint-disable-next-line no-console\n\n  console.log(`%c${printString}`, \"background: #000; color: #fff\");\n}","import { __awaiter } from \"tslib\";\nimport { BaseContext } from \"./BaseContext\";\nexport class DummyContext extends BaseContext {\n  constructor() {\n    super(...arguments);\n    this.lookAhead = 0;\n    this.latencyHint = 0;\n    this.isOffline = false;\n  } //---------------------------\n  // BASE AUDIO CONTEXT METHODS\n  //---------------------------\n\n\n  createAnalyser() {\n    return {};\n  }\n\n  createOscillator() {\n    return {};\n  }\n\n  createBufferSource() {\n    return {};\n  }\n\n  createBiquadFilter() {\n    return {};\n  }\n\n  createBuffer(_numberOfChannels, _length, _sampleRate) {\n    return {};\n  }\n\n  createChannelMerger(_numberOfInputs) {\n    return {};\n  }\n\n  createChannelSplitter(_numberOfOutputs) {\n    return {};\n  }\n\n  createConstantSource() {\n    return {};\n  }\n\n  createConvolver() {\n    return {};\n  }\n\n  createDelay(_maxDelayTime) {\n    return {};\n  }\n\n  createDynamicsCompressor() {\n    return {};\n  }\n\n  createGain() {\n    return {};\n  }\n\n  createIIRFilter(_feedForward, _feedback) {\n    return {};\n  }\n\n  createPanner() {\n    return {};\n  }\n\n  createPeriodicWave(_real, _imag, _constraints) {\n    return {};\n  }\n\n  createStereoPanner() {\n    return {};\n  }\n\n  createWaveShaper() {\n    return {};\n  }\n\n  createMediaStreamSource(_stream) {\n    return {};\n  }\n\n  createMediaStreamDestination() {\n    return {};\n  }\n\n  decodeAudioData(_audioData) {\n    return Promise.resolve({});\n  } //---------------------------\n  // TONE AUDIO CONTEXT METHODS\n  //---------------------------\n\n\n  createAudioWorkletNode(_name, _options) {\n    return {};\n  }\n\n  get rawContext() {\n    return {};\n  }\n\n  addAudioWorkletModule(_url, _name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return Promise.resolve();\n    });\n  }\n\n  resume() {\n    return Promise.resolve();\n  }\n\n  setTimeout(_fn, _timeout) {\n    return 0;\n  }\n\n  clearTimeout(_id) {\n    return this;\n  }\n\n  setInterval(_fn, _interval) {\n    return 0;\n  }\n\n  clearInterval(_id) {\n    return this;\n  }\n\n  getConstant(_val) {\n    return {};\n  }\n\n  get currentTime() {\n    return 0;\n  }\n\n  get state() {\n    return {};\n  }\n\n  get sampleRate() {\n    return 0;\n  }\n\n  get listener() {\n    return {};\n  }\n\n  get transport() {\n    return {};\n  }\n\n  get draw() {\n    return {};\n  }\n\n  set draw(_d) {}\n\n  get destination() {\n    return {};\n  }\n\n  set destination(_d) {}\n\n  now() {\n    return 0;\n  }\n\n  immediate() {\n    return 0;\n  }\n\n}","/**\n * Equal power gain scale. Good for cross-fading.\n * @param  percent (0-1)\n */\nexport function equalPowerScale(percent) {\n  const piFactor = 0.5 * Math.PI;\n  return Math.sin(percent * piFactor);\n}\n/**\n * Convert decibels into gain.\n */\n\nexport function dbToGain(db) {\n  return Math.pow(10, db / 20);\n}\n/**\n * Convert gain to decibels.\n */\n\nexport function gainToDb(gain) {\n  return 20 * (Math.log(gain) / Math.LN10);\n}\n/**\n * Convert an interval (in semitones) to a frequency ratio.\n * @param interval the number of semitones above the base note\n * @example\n * Tone.intervalToFrequencyRatio(0); // 1\n * Tone.intervalToFrequencyRatio(12); // 2\n * Tone.intervalToFrequencyRatio(-12); // 0.5\n */\n\nexport function intervalToFrequencyRatio(interval) {\n  return Math.pow(2, interval / 12);\n}\n/**\n * The Global [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n * to generate all the other pitch values from notes. A4's values in Hertz.\n */\n\nlet A4 = 440;\nexport function getA4() {\n  return A4;\n}\nexport function setA4(freq) {\n  A4 = freq;\n}\n/**\n * Convert a frequency value to a MIDI note.\n * @param frequency The value to frequency value to convert.\n * @example\n * Tone.ftom(440); // returns 69\n */\n\nexport function ftom(frequency) {\n  return Math.round(ftomf(frequency));\n}\n/**\n * Convert a frequency to a floating point midi value\n */\n\nexport function ftomf(frequency) {\n  return 69 + 12 * Math.log2(frequency / A4);\n}\n/**\n * Convert a MIDI note to frequency value.\n * @param  midi The midi number to convert.\n * @return The corresponding frequency value\n * @example\n * Tone.mtof(69); // 440\n */\n\nexport function mtof(midi) {\n  return A4 * Math.pow(2, (midi - 69) / 12);\n}","import { Tone } from \"../Tone\";\nimport { isDefined, isObject, isString, isUndef } from \"../util/TypeCheck\";\n/**\n * TimeBase is a flexible encoding of time which can be evaluated to and from a string.\n */\n\nexport class TimeBaseClass extends Tone {\n  /**\n   * @param context The context associated with the time value. Used to compute\n   * Transport and context-relative timing.\n   * @param  value  The time value as a number, string or object\n   * @param  units  Unit values\n   */\n  constructor(context, value, units) {\n    super();\n    /**\n     * The default units\n     */\n\n    this.defaultUnits = \"s\";\n    this._val = value;\n    this._units = units;\n    this.context = context;\n    this._expressions = this._getExpressions();\n  }\n  /**\n   * All of the time encoding expressions\n   */\n\n\n  _getExpressions() {\n    return {\n      hz: {\n        method: value => {\n          return this._frequencyToUnits(parseFloat(value));\n        },\n        regexp: /^(\\d+(?:\\.\\d+)?)hz$/i\n      },\n      i: {\n        method: value => {\n          return this._ticksToUnits(parseInt(value, 10));\n        },\n        regexp: /^(\\d+)i$/i\n      },\n      m: {\n        method: value => {\n          return this._beatsToUnits(parseInt(value, 10) * this._getTimeSignature());\n        },\n        regexp: /^(\\d+)m$/i\n      },\n      n: {\n        method: (value, dot) => {\n          const numericValue = parseInt(value, 10);\n          const scalar = dot === \".\" ? 1.5 : 1;\n\n          if (numericValue === 1) {\n            return this._beatsToUnits(this._getTimeSignature()) * scalar;\n          } else {\n            return this._beatsToUnits(4 / numericValue) * scalar;\n          }\n        },\n        regexp: /^(\\d+)n(\\.?)$/i\n      },\n      number: {\n        method: value => {\n          return this._expressions[this.defaultUnits].method.call(this, value);\n        },\n        regexp: /^(\\d+(?:\\.\\d+)?)$/\n      },\n      s: {\n        method: value => {\n          return this._secondsToUnits(parseFloat(value));\n        },\n        regexp: /^(\\d+(?:\\.\\d+)?)s$/\n      },\n      samples: {\n        method: value => {\n          return parseInt(value, 10) / this.context.sampleRate;\n        },\n        regexp: /^(\\d+)samples$/\n      },\n      t: {\n        method: value => {\n          const numericValue = parseInt(value, 10);\n          return this._beatsToUnits(8 / (Math.floor(numericValue) * 3));\n        },\n        regexp: /^(\\d+)t$/i\n      },\n      tr: {\n        method: (m, q, s) => {\n          let total = 0;\n\n          if (m && m !== \"0\") {\n            total += this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n          }\n\n          if (q && q !== \"0\") {\n            total += this._beatsToUnits(parseFloat(q));\n          }\n\n          if (s && s !== \"0\") {\n            total += this._beatsToUnits(parseFloat(s) / 4);\n          }\n\n          return total;\n        },\n        regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?$/\n      }\n    };\n  } //-------------------------------------\n  // \tVALUE OF\n  //-------------------------------------\n\n  /**\n   * Evaluate the time value. Returns the time in seconds.\n   */\n\n\n  valueOf() {\n    if (this._val instanceof TimeBaseClass) {\n      this.fromType(this._val);\n    }\n\n    if (isUndef(this._val)) {\n      return this._noArg();\n    } else if (isString(this._val) && isUndef(this._units)) {\n      for (const units in this._expressions) {\n        if (this._expressions[units].regexp.test(this._val.trim())) {\n          this._units = units;\n          break;\n        }\n      }\n    } else if (isObject(this._val)) {\n      let total = 0;\n\n      for (const typeName in this._val) {\n        if (isDefined(this._val[typeName])) {\n          const quantity = this._val[typeName]; // @ts-ignore\n\n          const time = new this.constructor(this.context, typeName).valueOf() * quantity;\n          total += time;\n        }\n      }\n\n      return total;\n    }\n\n    if (isDefined(this._units)) {\n      const expr = this._expressions[this._units];\n\n      const matching = this._val.toString().trim().match(expr.regexp);\n\n      if (matching) {\n        return expr.method.apply(this, matching.slice(1));\n      } else {\n        return expr.method.call(this, this._val);\n      }\n    } else if (isString(this._val)) {\n      return parseFloat(this._val);\n    } else {\n      return this._val;\n    }\n  } //-------------------------------------\n  // \tUNIT CONVERSIONS\n  //-------------------------------------\n\n  /**\n   * Returns the value of a frequency in the current units\n   */\n\n\n  _frequencyToUnits(freq) {\n    return 1 / freq;\n  }\n  /**\n   * Return the value of the beats in the current units\n   */\n\n\n  _beatsToUnits(beats) {\n    return 60 / this._getBpm() * beats;\n  }\n  /**\n   * Returns the value of a second in the current units\n   */\n\n\n  _secondsToUnits(seconds) {\n    return seconds;\n  }\n  /**\n   * Returns the value of a tick in the current time units\n   */\n\n\n  _ticksToUnits(ticks) {\n    return ticks * this._beatsToUnits(1) / this._getPPQ();\n  }\n  /**\n   * With no arguments, return 'now'\n   */\n\n\n  _noArg() {\n    return this._now();\n  } //-------------------------------------\n  // \tTEMPO CONVERSIONS\n  //-------------------------------------\n\n  /**\n   * Return the bpm\n   */\n\n\n  _getBpm() {\n    return this.context.transport.bpm.value;\n  }\n  /**\n   * Return the timeSignature\n   */\n\n\n  _getTimeSignature() {\n    return this.context.transport.timeSignature;\n  }\n  /**\n   * Return the PPQ or 192 if Transport is not available\n   */\n\n\n  _getPPQ() {\n    return this.context.transport.PPQ;\n  } //-------------------------------------\n  // \tCONVERSION INTERFACE\n  //-------------------------------------\n\n  /**\n   * Coerce a time type into this units type.\n   * @param type Any time type units\n   */\n\n\n  fromType(type) {\n    this._units = undefined;\n\n    switch (this.defaultUnits) {\n      case \"s\":\n        this._val = type.toSeconds();\n        break;\n\n      case \"i\":\n        this._val = type.toTicks();\n        break;\n\n      case \"hz\":\n        this._val = type.toFrequency();\n        break;\n\n      case \"midi\":\n        this._val = type.toMidi();\n        break;\n    }\n\n    return this;\n  }\n  /**\n   * Return the value in hertz\n   */\n\n\n  toFrequency() {\n    return 1 / this.toSeconds();\n  }\n  /**\n   * Return the time in samples\n   */\n\n\n  toSamples() {\n    return this.toSeconds() * this.context.sampleRate;\n  }\n  /**\n   * Return the time in milliseconds.\n   */\n\n\n  toMilliseconds() {\n    return this.toSeconds() * 1000;\n  }\n\n}","import { getContext } from \"../Global\";\nimport { ftom } from \"./Conversions\";\nimport { TimeBaseClass } from \"./TimeBase\";\n/**\n * TimeClass is a primitive type for encoding and decoding Time values.\n * TimeClass can be passed into the parameter of any method which takes time as an argument.\n * @param  val    The time value.\n * @param  units  The units of the value.\n * @example\n * const time = Tone.Time(\"4n\"); // a quarter note\n * @category Unit\n */\n\nexport class TimeClass extends TimeBaseClass {\n  constructor() {\n    super(...arguments);\n    this.name = \"TimeClass\";\n  }\n\n  _getExpressions() {\n    return Object.assign(super._getExpressions(), {\n      now: {\n        method: capture => {\n          return this._now() + new this.constructor(this.context, capture).valueOf();\n        },\n        regexp: /^\\+(.+)/\n      },\n      quantize: {\n        method: capture => {\n          const quantTo = new TimeClass(this.context, capture).valueOf();\n          return this._secondsToUnits(this.context.transport.nextSubdivision(quantTo));\n        },\n        regexp: /^@(.+)/\n      }\n    });\n  }\n  /**\n   * Quantize the time by the given subdivision. Optionally add a\n   * percentage which will move the time value towards the ideal\n   * quantized value by that percentage.\n   * @param  subdiv    The subdivision to quantize to\n   * @param  percent  Move the time value towards the quantized value by a percentage.\n   * @example\n   * Tone.Time(21).quantize(2); // returns 22\n   * Tone.Time(0.6).quantize(\"4n\", 0.5); // returns 0.55\n   */\n\n\n  quantize(subdiv, percent = 1) {\n    const subdivision = new this.constructor(this.context, subdiv).valueOf();\n    const value = this.valueOf();\n    const multiple = Math.round(value / subdivision);\n    const ideal = multiple * subdivision;\n    const diff = ideal - value;\n    return value + diff * percent;\n  } //-------------------------------------\n  // CONVERSIONS\n  //-------------------------------------\n\n  /**\n   * Convert a Time to Notation. The notation values are will be the\n   * closest representation between 1m to 128th note.\n   * @return {Notation}\n   * @example\n   * // if the Transport is at 120bpm:\n   * Tone.Time(2).toNotation(); // returns \"1m\"\n   */\n\n\n  toNotation() {\n    const time = this.toSeconds();\n    const testNotations = [\"1m\"];\n\n    for (let power = 1; power < 9; power++) {\n      const subdiv = Math.pow(2, power);\n      testNotations.push(subdiv + \"n.\");\n      testNotations.push(subdiv + \"n\");\n      testNotations.push(subdiv + \"t\");\n    }\n\n    testNotations.push(\"0\"); // find the closets notation representation\n\n    let closest = testNotations[0];\n    let closestSeconds = new TimeClass(this.context, testNotations[0]).toSeconds();\n    testNotations.forEach(notation => {\n      const notationSeconds = new TimeClass(this.context, notation).toSeconds();\n\n      if (Math.abs(notationSeconds - time) < Math.abs(closestSeconds - time)) {\n        closest = notation;\n        closestSeconds = notationSeconds;\n      }\n    });\n    return closest;\n  }\n  /**\n   * Return the time encoded as Bars:Beats:Sixteenths.\n   */\n\n\n  toBarsBeatsSixteenths() {\n    const quarterTime = this._beatsToUnits(1);\n\n    let quarters = this.valueOf() / quarterTime;\n    quarters = parseFloat(quarters.toFixed(4));\n    const measures = Math.floor(quarters / this._getTimeSignature());\n    let sixteenths = quarters % 1 * 4;\n    quarters = Math.floor(quarters) % this._getTimeSignature();\n    const sixteenthString = sixteenths.toString();\n\n    if (sixteenthString.length > 3) {\n      // the additional parseFloat removes insignificant trailing zeroes\n      sixteenths = parseFloat(parseFloat(sixteenthString).toFixed(3));\n    }\n\n    const progress = [measures, quarters, sixteenths];\n    return progress.join(\":\");\n  }\n  /**\n   * Return the time in ticks.\n   */\n\n\n  toTicks() {\n    const quarterTime = this._beatsToUnits(1);\n\n    const quarters = this.valueOf() / quarterTime;\n    return Math.round(quarters * this._getPPQ());\n  }\n  /**\n   * Return the time in seconds.\n   */\n\n\n  toSeconds() {\n    return this.valueOf();\n  }\n  /**\n   * Return the value as a midi note.\n   */\n\n\n  toMidi() {\n    return ftom(this.toFrequency());\n  }\n\n  _now() {\n    return this.context.now();\n  }\n\n}\n/**\n * Create a TimeClass from a time string or number.\n * @param value A value which reprsents time\n * @param units The value's units if they can't be inferred by the value.\n * @category Unit\n */\n\nexport function Time(value, units) {\n  return new TimeClass(getContext(), value, units);\n}","import { getContext } from \"../Global\";\nimport { intervalToFrequencyRatio, mtof } from \"./Conversions\";\nimport { ftom, getA4, setA4 } from \"./Conversions\";\nimport { TimeClass } from \"./Time\";\n/**\n * Frequency is a primitive type for encoding Frequency values.\n * Eventually all time values are evaluated to hertz using the `eval` method.\n * @example\n * Tone.Frequency(\"C3\"); // 261\n * Tone.Frequency(38, \"midi\");\n * Tone.Frequency(\"C3\").transpose(4);\n * @category Unit\n */\n\nexport class FrequencyClass extends TimeClass {\n  constructor() {\n    super(...arguments);\n    this.name = \"Frequency\";\n    this.defaultUnits = \"hz\";\n  }\n  /**\n   * The [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n   * to generate all the other pitch values from notes. A4's values in Hertz.\n   */\n\n\n  static get A4() {\n    return getA4();\n  }\n\n  static set A4(freq) {\n    setA4(freq);\n  } //-------------------------------------\n  // \tAUGMENT BASE EXPRESSIONS\n  //-------------------------------------\n\n\n  _getExpressions() {\n    return Object.assign({}, super._getExpressions(), {\n      midi: {\n        regexp: /^(\\d+(?:\\.\\d+)?midi)/,\n\n        method(value) {\n          if (this.defaultUnits === \"midi\") {\n            return value;\n          } else {\n            return FrequencyClass.mtof(value);\n          }\n        }\n\n      },\n      note: {\n        regexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n\n        method(pitch, octave) {\n          const index = noteToScaleIndex[pitch.toLowerCase()];\n          const noteNumber = index + (parseInt(octave, 10) + 1) * 12;\n\n          if (this.defaultUnits === \"midi\") {\n            return noteNumber;\n          } else {\n            return FrequencyClass.mtof(noteNumber);\n          }\n        }\n\n      },\n      tr: {\n        regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\n        method(m, q, s) {\n          let total = 1;\n\n          if (m && m !== \"0\") {\n            total *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n          }\n\n          if (q && q !== \"0\") {\n            total *= this._beatsToUnits(parseFloat(q));\n          }\n\n          if (s && s !== \"0\") {\n            total *= this._beatsToUnits(parseFloat(s) / 4);\n          }\n\n          return total;\n        }\n\n      }\n    });\n  } //-------------------------------------\n  // \tEXPRESSIONS\n  //-------------------------------------\n\n  /**\n   * Transposes the frequency by the given number of semitones.\n   * @return  A new transposed frequency\n   * @example\n   * Tone.Frequency(\"A4\").transpose(3); // \"C5\"\n   */\n\n\n  transpose(interval) {\n    return new FrequencyClass(this.context, this.valueOf() * intervalToFrequencyRatio(interval));\n  }\n  /**\n   * Takes an array of semitone intervals and returns\n   * an array of frequencies transposed by those intervals.\n   * @return  Returns an array of Frequencies\n   * @example\n   * Tone.Frequency(\"A4\").harmonize([0, 3, 7]); // [\"A4\", \"C5\", \"E5\"]\n   */\n\n\n  harmonize(intervals) {\n    return intervals.map(interval => {\n      return this.transpose(interval);\n    });\n  } //-------------------------------------\n  // \tUNIT CONVERSIONS\n  //-------------------------------------\n\n  /**\n   * Return the value of the frequency as a MIDI note\n   * @example\n   * Tone.Frequency(\"C4\").toMidi(); // 60\n   */\n\n\n  toMidi() {\n    return ftom(this.valueOf());\n  }\n  /**\n   * Return the value of the frequency in Scientific Pitch Notation\n   * @example\n   * Tone.Frequency(69, \"midi\").toNote(); // \"A4\"\n   */\n\n\n  toNote() {\n    const freq = this.toFrequency();\n    const log = Math.log2(freq / FrequencyClass.A4);\n    let noteNumber = Math.round(12 * log) + 57;\n    const octave = Math.floor(noteNumber / 12);\n\n    if (octave < 0) {\n      noteNumber += -12 * octave;\n    }\n\n    const noteName = scaleIndexToNote[noteNumber % 12];\n    return noteName + octave.toString();\n  }\n  /**\n   * Return the duration of one cycle in seconds.\n   */\n\n\n  toSeconds() {\n    return 1 / super.toSeconds();\n  }\n  /**\n   * Return the duration of one cycle in ticks\n   */\n\n\n  toTicks() {\n    const quarterTime = this._beatsToUnits(1);\n\n    const quarters = this.valueOf() / quarterTime;\n    return Math.floor(quarters * this._getPPQ());\n  } //-------------------------------------\n  // \tUNIT CONVERSIONS HELPERS\n  //-------------------------------------\n\n  /**\n   * With no arguments, return 0\n   */\n\n\n  _noArg() {\n    return 0;\n  }\n  /**\n   * Returns the value of a frequency in the current units\n   */\n\n\n  _frequencyToUnits(freq) {\n    return freq;\n  }\n  /**\n   * Returns the value of a tick in the current time units\n   */\n\n\n  _ticksToUnits(ticks) {\n    return 1 / (ticks * 60 / (this._getBpm() * this._getPPQ()));\n  }\n  /**\n   * Return the value of the beats in the current units\n   */\n\n\n  _beatsToUnits(beats) {\n    return 1 / super._beatsToUnits(beats);\n  }\n  /**\n   * Returns the value of a second in the current units\n   */\n\n\n  _secondsToUnits(seconds) {\n    return 1 / seconds;\n  }\n  /**\n   * Convert a MIDI note to frequency value.\n   * @param  midi The midi number to convert.\n   * @return The corresponding frequency value\n   */\n\n\n  static mtof(midi) {\n    return mtof(midi);\n  }\n  /**\n   * Convert a frequency value to a MIDI note.\n   * @param frequency The value to frequency value to convert.\n   */\n\n\n  static ftom(frequency) {\n    return ftom(frequency);\n  }\n\n} //-------------------------------------\n// \tFREQUENCY CONVERSIONS\n//-------------------------------------\n\n/**\n * Note to scale index.\n * @hidden\n */\n\nconst noteToScaleIndex = {\n  cbb: -2,\n  cb: -1,\n  c: 0,\n  \"c#\": 1,\n  cx: 2,\n  dbb: 0,\n  db: 1,\n  d: 2,\n  \"d#\": 3,\n  dx: 4,\n  ebb: 2,\n  eb: 3,\n  e: 4,\n  \"e#\": 5,\n  ex: 6,\n  fbb: 3,\n  fb: 4,\n  f: 5,\n  \"f#\": 6,\n  fx: 7,\n  gbb: 5,\n  gb: 6,\n  g: 7,\n  \"g#\": 8,\n  gx: 9,\n  abb: 7,\n  ab: 8,\n  a: 9,\n  \"a#\": 10,\n  ax: 11,\n  bbb: 9,\n  bb: 10,\n  b: 11,\n  \"b#\": 12,\n  bx: 13\n};\n/**\n * scale index to note (sharps)\n * @hidden\n */\n\nconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n */\n\nexport function Frequency(value, units) {\n  return new FrequencyClass(getContext(), value, units);\n}","import { getContext } from \"../Global\";\nimport { TimeClass } from \"./Time\";\n/**\n * TransportTime is a the time along the Transport's\n * timeline. It is similar to Tone.Time, but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n * @category Unit\n */\n\nexport class TransportTimeClass extends TimeClass {\n  constructor() {\n    super(...arguments);\n    this.name = \"TransportTime\";\n  }\n  /**\n   * Return the current time in whichever context is relevant\n   */\n\n\n  _now() {\n    return this.context.transport.seconds;\n  }\n\n}\n/**\n * TransportTime is a the time along the Transport's\n * timeline. It is similar to [[Time]], but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n * @category Unit\n */\n\nexport function TransportTime(value, units) {\n  return new TransportTimeClass(getContext(), value, units);\n}","import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { FrequencyClass } from \"../type/Frequency\";\nimport { TimeClass } from \"../type/Time\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport { getDefaultsFromInstance, optionsFromArguments } from \"../util/Defaults\";\nimport { isArray, isBoolean, isDefined, isNumber, isString, isUndef } from \"../util/TypeCheck\";\n/**\n * The Base class for all nodes that have an AudioContext.\n */\n\nexport class ToneWithContext extends Tone {\n  constructor() {\n    super();\n    const options = optionsFromArguments(ToneWithContext.getDefaults(), arguments, [\"context\"]);\n\n    if (this.defaultContext) {\n      this.context = this.defaultContext;\n    } else {\n      this.context = options.context;\n    }\n  }\n\n  static getDefaults() {\n    return {\n      context: getContext()\n    };\n  }\n  /**\n   * Return the current time of the Context clock plus the lookAhead.\n   * @example\n   * setInterval(() => {\n   * \tconsole.log(Tone.now());\n   * }, 100)\n   */\n\n\n  now() {\n    return this.context.currentTime + this.context.lookAhead;\n  }\n  /**\n   * Return the current time of the Context clock without any lookAhead.\n   * @example\n   * setInterval(() => {\n   * \tconsole.log(Tone.immediate());\n   * }, 100)\n   */\n\n\n  immediate() {\n    return this.context.currentTime;\n  }\n  /**\n   * The duration in seconds of one sample.\n   * @example\n   * console.log(Tone.Transport.sampleTime);\n   */\n\n\n  get sampleTime() {\n    return 1 / this.context.sampleRate;\n  }\n  /**\n   * The number of seconds of 1 processing block (128 samples)\n   * @example\n   * console.log(Tone.Destination.blockTime);\n   */\n\n\n  get blockTime() {\n    return 128 / this.context.sampleRate;\n  }\n  /**\n   * Convert the incoming time to seconds\n   * @example\n   * const gain = new Tone.Gain();\n   * console.log(gain.toSeconds(\"4n\"));\n   */\n\n\n  toSeconds(time) {\n    return new TimeClass(this.context, time).toSeconds();\n  }\n  /**\n   * Convert the input to a frequency number\n   * @example\n   * const gain = new Tone.Gain();\n   * console.log(gain.toFrequency(\"4n\"));\n   */\n\n\n  toFrequency(freq) {\n    return new FrequencyClass(this.context, freq).toFrequency();\n  }\n  /**\n   * Convert the input time into ticks\n   * @example\n   * const gain = new Tone.Gain();\n   * console.log(gain.toTicks(\"4n\"));\n   */\n\n\n  toTicks(time) {\n    return new TransportTimeClass(this.context, time).toTicks();\n  } //-------------------------------------\n  // \tGET/SET\n  //-------------------------------------\n\n  /**\n   * Get a subset of the properties which are in the partial props\n   */\n\n\n  _getPartialProperties(props) {\n    const options = this.get(); // remove attributes from the prop that are not in the partial\n\n    Object.keys(options).forEach(name => {\n      if (isUndef(props[name])) {\n        delete options[name];\n      }\n    });\n    return options;\n  }\n  /**\n   * Get the object's attributes.\n   * @example\n   * const osc = new Tone.Oscillator();\n   * console.log(osc.get());\n   */\n\n\n  get() {\n    const defaults = getDefaultsFromInstance(this);\n    Object.keys(defaults).forEach(attribute => {\n      if (Reflect.has(this, attribute)) {\n        const member = this[attribute];\n\n        if (isDefined(member) && isDefined(member.value) && isDefined(member.setValueAtTime)) {\n          defaults[attribute] = member.value;\n        } else if (member instanceof ToneWithContext) {\n          defaults[attribute] = member._getPartialProperties(defaults[attribute]); // otherwise make sure it's a serializable type\n        } else if (isArray(member) || isNumber(member) || isString(member) || isBoolean(member)) {\n          defaults[attribute] = member;\n        } else {\n          // remove all undefined and unserializable attributes\n          delete defaults[attribute];\n        }\n      }\n    });\n    return defaults;\n  }\n  /**\n   * Set multiple properties at once with an object.\n   * @example\n   * const filter = new Tone.Filter();\n   * // set values using an object\n   * filter.set({\n   * \tfrequency: 300,\n   * \ttype: \"highpass\"\n   * });\n   */\n\n\n  set(props) {\n    Object.keys(props).forEach(attribute => {\n      if (Reflect.has(this, attribute) && isDefined(this[attribute])) {\n        if (this[attribute] && isDefined(this[attribute].value) && isDefined(this[attribute].setValueAtTime)) {\n          // small optimization\n          if (this[attribute].value !== props[attribute]) {\n            this[attribute].value = props[attribute];\n          }\n        } else if (this[attribute] instanceof ToneWithContext) {\n          this[attribute].set(props[attribute]);\n        } else {\n          this[attribute] = props[attribute];\n        }\n      }\n    });\n    return this;\n  }\n\n}","import { Timeline } from \"./Timeline\";\nimport { assertRange } from \"./Debug\";\n/**\n * A Timeline State. Provides the methods: `setStateAtTime(\"state\", time)` and `getValueAtTime(time)`\n * @param initial The initial state of the StateTimeline.  Defaults to `undefined`\n */\n\nexport class StateTimeline extends Timeline {\n  constructor(initial = \"stopped\") {\n    super();\n    this.name = \"StateTimeline\";\n    this._initial = initial;\n    this.setStateAtTime(this._initial, 0);\n  }\n  /**\n   * Returns the scheduled state scheduled before or at\n   * the given time.\n   * @param  time  The time to query.\n   * @return  The name of the state input in setStateAtTime.\n   */\n\n\n  getValueAtTime(time) {\n    const event = this.get(time);\n\n    if (event !== null) {\n      return event.state;\n    } else {\n      return this._initial;\n    }\n  }\n  /**\n   * Add a state to the timeline.\n   * @param  state The name of the state to set.\n   * @param  time  The time to query.\n   * @param options Any additional options that are needed in the timeline.\n   */\n\n\n  setStateAtTime(state, time, options) {\n    assertRange(time, 0);\n    this.add(Object.assign({}, options, {\n      state,\n      time\n    }));\n    return this;\n  }\n  /**\n   * Return the event before the time with the given state\n   * @param  state The state to look for\n   * @param  time  When to check before\n   * @return  The event with the given state before the time\n   */\n\n\n  getLastState(state, time) {\n    // time = this.toSeconds(time);\n    const index = this._search(time);\n\n    for (let i = index; i >= 0; i--) {\n      const event = this._timeline[i];\n\n      if (event.state === state) {\n        return event;\n      }\n    }\n  }\n  /**\n   * Return the event after the time with the given state\n   * @param  state The state to look for\n   * @param  time  When to check from\n   * @return  The event with the given state after the time\n   */\n\n\n  getNextState(state, time) {\n    // time = this.toSeconds(time);\n    const index = this._search(time);\n\n    if (index !== -1) {\n      for (let i = index; i < this._timeline.length; i++) {\n        const event = this._timeline[i];\n\n        if (event.state === state) {\n          return event;\n        }\n      }\n    }\n  }\n\n}","import { dbToGain, gainToDb } from \"../type/Conversions\";\nimport { isAudioParam } from \"../util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { ToneWithContext } from \"./ToneWithContext\";\nimport { EQ } from \"../util/Math\";\nimport { assert, assertRange } from \"../util/Debug\";\n/**\n * Param wraps the native Web Audio's AudioParam to provide\n * additional unit conversion functionality. It also\n * serves as a base-class for classes which have a single,\n * automatable parameter.\n */\n\nexport class Param extends ToneWithContext {\n  constructor() {\n    super(optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]));\n    this.name = \"Param\";\n    this.overridden = false;\n    /**\n     * The minimum output value\n     */\n\n    this._minOutput = 1e-7;\n    const options = optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]);\n    assert(isDefined(options.param) && (isAudioParam(options.param) || options.param instanceof Param), \"param must be an AudioParam\");\n\n    while (!isAudioParam(options.param)) {\n      options.param = options.param._param;\n    }\n\n    this._swappable = isDefined(options.swappable) ? options.swappable : false;\n\n    if (this._swappable) {\n      this.input = this.context.createGain(); // initialize\n\n      this._param = options.param;\n      this.input.connect(this._param);\n    } else {\n      this._param = this.input = options.param;\n    }\n\n    this._events = new Timeline(1000);\n    this._initialValue = this._param.defaultValue;\n    this.units = options.units;\n    this.convert = options.convert;\n    this._minValue = options.minValue;\n    this._maxValue = options.maxValue; // if the value is defined, set it immediately\n\n    if (isDefined(options.value) && options.value !== this._toType(this._initialValue)) {\n      this.setValueAtTime(options.value, 0);\n    }\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneWithContext.getDefaults(), {\n      convert: true,\n      units: \"number\"\n    });\n  }\n\n  get value() {\n    const now = this.now();\n    return this.getValueAtTime(now);\n  }\n\n  set value(value) {\n    this.cancelScheduledValues(this.now());\n    this.setValueAtTime(value, this.now());\n  }\n\n  get minValue() {\n    // if it's not the default minValue, return it\n    if (isDefined(this._minValue)) {\n      return this._minValue;\n    } else if (this.units === \"time\" || this.units === \"frequency\" || this.units === \"normalRange\" || this.units === \"positive\" || this.units === \"transportTime\" || this.units === \"ticks\" || this.units === \"bpm\" || this.units === \"hertz\" || this.units === \"samples\") {\n      return 0;\n    } else if (this.units === \"audioRange\") {\n      return -1;\n    } else if (this.units === \"decibels\") {\n      return -Infinity;\n    } else {\n      return this._param.minValue;\n    }\n  }\n\n  get maxValue() {\n    if (isDefined(this._maxValue)) {\n      return this._maxValue;\n    } else if (this.units === \"normalRange\" || this.units === \"audioRange\") {\n      return 1;\n    } else {\n      return this._param.maxValue;\n    }\n  }\n  /**\n   * Type guard based on the unit name\n   */\n\n\n  _is(arg, type) {\n    return this.units === type;\n  }\n  /**\n   * Make sure the value is always in the defined range\n   */\n\n\n  _assertRange(value) {\n    if (isDefined(this.maxValue) && isDefined(this.minValue)) {\n      assertRange(value, this._fromType(this.minValue), this._fromType(this.maxValue));\n    }\n\n    return value;\n  }\n  /**\n   * Convert the given value from the type specified by Param.units\n   * into the destination value (such as Gain or Frequency).\n   */\n\n\n  _fromType(val) {\n    if (this.convert && !this.overridden) {\n      if (this._is(val, \"time\")) {\n        return this.toSeconds(val);\n      } else if (this._is(val, \"decibels\")) {\n        return dbToGain(val);\n      } else if (this._is(val, \"frequency\")) {\n        return this.toFrequency(val);\n      } else {\n        return val;\n      }\n    } else if (this.overridden) {\n      // if it's overridden, should only schedule 0s\n      return 0;\n    } else {\n      return val;\n    }\n  }\n  /**\n   * Convert the parameters value into the units specified by Param.units.\n   */\n\n\n  _toType(val) {\n    if (this.convert && this.units === \"decibels\") {\n      return gainToDb(val);\n    } else {\n      return val;\n    }\n  } //-------------------------------------\n  // ABSTRACT PARAM INTERFACE\n  // all docs are generated from ParamInterface.ts\n  //-------------------------------------\n\n\n  setValueAtTime(value, time) {\n    const computedTime = this.toSeconds(time);\n\n    const numericValue = this._fromType(value);\n\n    assert(isFinite(numericValue) && isFinite(computedTime), `Invalid argument(s) to setValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(time)}`);\n\n    this._assertRange(numericValue);\n\n    this.log(this.units, \"setValueAtTime\", value, computedTime);\n\n    this._events.add({\n      time: computedTime,\n      type: \"setValueAtTime\",\n      value: numericValue\n    });\n\n    this._param.setValueAtTime(numericValue, computedTime);\n\n    return this;\n  }\n\n  getValueAtTime(time) {\n    const computedTime = Math.max(this.toSeconds(time), 0);\n\n    const after = this._events.getAfter(computedTime);\n\n    const before = this._events.get(computedTime);\n\n    let value = this._initialValue; // if it was set by\n\n    if (before === null) {\n      value = this._initialValue;\n    } else if (before.type === \"setTargetAtTime\" && (after === null || after.type === \"setValueAtTime\")) {\n      const previous = this._events.getBefore(before.time);\n\n      let previousVal;\n\n      if (previous === null) {\n        previousVal = this._initialValue;\n      } else {\n        previousVal = previous.value;\n      }\n\n      if (before.type === \"setTargetAtTime\") {\n        value = this._exponentialApproach(before.time, previousVal, before.value, before.constant, computedTime);\n      }\n    } else if (after === null) {\n      value = before.value;\n    } else if (after.type === \"linearRampToValueAtTime\" || after.type === \"exponentialRampToValueAtTime\") {\n      let beforeValue = before.value;\n\n      if (before.type === \"setTargetAtTime\") {\n        const previous = this._events.getBefore(before.time);\n\n        if (previous === null) {\n          beforeValue = this._initialValue;\n        } else {\n          beforeValue = previous.value;\n        }\n      }\n\n      if (after.type === \"linearRampToValueAtTime\") {\n        value = this._linearInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n      } else {\n        value = this._exponentialInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n      }\n    } else {\n      value = before.value;\n    }\n\n    return this._toType(value);\n  }\n\n  setRampPoint(time) {\n    time = this.toSeconds(time);\n    let currentVal = this.getValueAtTime(time);\n    this.cancelAndHoldAtTime(time);\n\n    if (this._fromType(currentVal) === 0) {\n      currentVal = this._toType(this._minOutput);\n    }\n\n    this.setValueAtTime(currentVal, time);\n    return this;\n  }\n\n  linearRampToValueAtTime(value, endTime) {\n    const numericValue = this._fromType(value);\n\n    const computedTime = this.toSeconds(endTime);\n    assert(isFinite(numericValue) && isFinite(computedTime), `Invalid argument(s) to linearRampToValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(endTime)}`);\n\n    this._assertRange(numericValue);\n\n    this._events.add({\n      time: computedTime,\n      type: \"linearRampToValueAtTime\",\n      value: numericValue\n    });\n\n    this.log(this.units, \"linearRampToValueAtTime\", value, computedTime);\n\n    this._param.linearRampToValueAtTime(numericValue, computedTime);\n\n    return this;\n  }\n\n  exponentialRampToValueAtTime(value, endTime) {\n    let numericValue = this._fromType(value);\n\n    numericValue = Math.max(this._minOutput, numericValue);\n\n    this._assertRange(numericValue);\n\n    const computedTime = this.toSeconds(endTime);\n    assert(isFinite(numericValue) && isFinite(computedTime), `Invalid argument(s) to exponentialRampToValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(endTime)}`); // store the event\n\n    this._events.add({\n      time: computedTime,\n      type: \"exponentialRampToValueAtTime\",\n      value: numericValue\n    });\n\n    this.log(this.units, \"exponentialRampToValueAtTime\", value, computedTime);\n\n    this._param.exponentialRampToValueAtTime(numericValue, computedTime);\n\n    return this;\n  }\n\n  exponentialRampTo(value, rampTime, startTime) {\n    startTime = this.toSeconds(startTime);\n    this.setRampPoint(startTime);\n    this.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n    return this;\n  }\n\n  linearRampTo(value, rampTime, startTime) {\n    startTime = this.toSeconds(startTime);\n    this.setRampPoint(startTime);\n    this.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n    return this;\n  }\n\n  targetRampTo(value, rampTime, startTime) {\n    startTime = this.toSeconds(startTime);\n    this.setRampPoint(startTime);\n    this.exponentialApproachValueAtTime(value, startTime, rampTime);\n    return this;\n  }\n\n  exponentialApproachValueAtTime(value, time, rampTime) {\n    time = this.toSeconds(time);\n    rampTime = this.toSeconds(rampTime);\n    const timeConstant = Math.log(rampTime + 1) / Math.log(200);\n    this.setTargetAtTime(value, time, timeConstant); // at 90% start a linear ramp to the final value\n\n    this.cancelAndHoldAtTime(time + rampTime * 0.9);\n    this.linearRampToValueAtTime(value, time + rampTime);\n    return this;\n  }\n\n  setTargetAtTime(value, startTime, timeConstant) {\n    const numericValue = this._fromType(value); // The value will never be able to approach without timeConstant > 0.\n\n\n    assert(isFinite(timeConstant) && timeConstant > 0, \"timeConstant must be a number greater than 0\");\n    const computedTime = this.toSeconds(startTime);\n\n    this._assertRange(numericValue);\n\n    assert(isFinite(numericValue) && isFinite(computedTime), `Invalid argument(s) to setTargetAtTime: ${JSON.stringify(value)}, ${JSON.stringify(startTime)}`);\n\n    this._events.add({\n      constant: timeConstant,\n      time: computedTime,\n      type: \"setTargetAtTime\",\n      value: numericValue\n    });\n\n    this.log(this.units, \"setTargetAtTime\", value, computedTime, timeConstant);\n\n    this._param.setTargetAtTime(numericValue, computedTime, timeConstant);\n\n    return this;\n  }\n\n  setValueCurveAtTime(values, startTime, duration, scaling = 1) {\n    duration = this.toSeconds(duration);\n    startTime = this.toSeconds(startTime);\n    const startingValue = this._fromType(values[0]) * scaling;\n    this.setValueAtTime(this._toType(startingValue), startTime);\n    const segTime = duration / (values.length - 1);\n\n    for (let i = 1; i < values.length; i++) {\n      const numericValue = this._fromType(values[i]) * scaling;\n      this.linearRampToValueAtTime(this._toType(numericValue), startTime + i * segTime);\n    }\n\n    return this;\n  }\n\n  cancelScheduledValues(time) {\n    const computedTime = this.toSeconds(time);\n    assert(isFinite(computedTime), `Invalid argument to cancelScheduledValues: ${JSON.stringify(time)}`);\n\n    this._events.cancel(computedTime);\n\n    this._param.cancelScheduledValues(computedTime);\n\n    this.log(this.units, \"cancelScheduledValues\", computedTime);\n    return this;\n  }\n\n  cancelAndHoldAtTime(time) {\n    const computedTime = this.toSeconds(time);\n\n    const valueAtTime = this._fromType(this.getValueAtTime(computedTime)); // remove the schedule events\n\n\n    assert(isFinite(computedTime), `Invalid argument to cancelAndHoldAtTime: ${JSON.stringify(time)}`);\n    this.log(this.units, \"cancelAndHoldAtTime\", computedTime, \"value=\" + valueAtTime); // if there is an event at the given computedTime\n    // and that even is not a \"set\"\n\n    const before = this._events.get(computedTime);\n\n    const after = this._events.getAfter(computedTime);\n\n    if (before && EQ(before.time, computedTime)) {\n      // remove everything after\n      if (after) {\n        this._param.cancelScheduledValues(after.time);\n\n        this._events.cancel(after.time);\n      } else {\n        this._param.cancelAndHoldAtTime(computedTime);\n\n        this._events.cancel(computedTime + this.sampleTime);\n      }\n    } else if (after) {\n      this._param.cancelScheduledValues(after.time); // cancel the next event(s)\n\n\n      this._events.cancel(after.time);\n\n      if (after.type === \"linearRampToValueAtTime\") {\n        this.linearRampToValueAtTime(this._toType(valueAtTime), computedTime);\n      } else if (after.type === \"exponentialRampToValueAtTime\") {\n        this.exponentialRampToValueAtTime(this._toType(valueAtTime), computedTime);\n      }\n    } // set the value at the given time\n\n\n    this._events.add({\n      time: computedTime,\n      type: \"setValueAtTime\",\n      value: valueAtTime\n    });\n\n    this._param.setValueAtTime(valueAtTime, computedTime);\n\n    return this;\n  }\n\n  rampTo(value, rampTime = 0.1, startTime) {\n    if (this.units === \"frequency\" || this.units === \"bpm\" || this.units === \"decibels\") {\n      this.exponentialRampTo(value, rampTime, startTime);\n    } else {\n      this.linearRampTo(value, rampTime, startTime);\n    }\n\n    return this;\n  }\n  /**\n   * Apply all of the previously scheduled events to the passed in Param or AudioParam.\n   * The applied values will start at the context's current time and schedule\n   * all of the events which are scheduled on this Param onto the passed in param.\n   */\n\n\n  apply(param) {\n    const now = this.context.currentTime; // set the param's value at the current time and schedule everything else\n\n    param.setValueAtTime(this.getValueAtTime(now), now); // if the previous event was a curve, then set the rest of it\n\n    const previousEvent = this._events.get(now);\n\n    if (previousEvent && previousEvent.type === \"setTargetAtTime\") {\n      // approx it until the next event with linear ramps\n      const nextEvent = this._events.getAfter(previousEvent.time); // or for 2 seconds if there is no event\n\n\n      const endTime = nextEvent ? nextEvent.time : now + 2;\n      const subdivisions = (endTime - now) / 10;\n\n      for (let i = now; i < endTime; i += subdivisions) {\n        param.linearRampToValueAtTime(this.getValueAtTime(i), i);\n      }\n    }\n\n    this._events.forEachAfter(this.context.currentTime, event => {\n      if (event.type === \"cancelScheduledValues\") {\n        param.cancelScheduledValues(event.time);\n      } else if (event.type === \"setTargetAtTime\") {\n        param.setTargetAtTime(event.value, event.time, event.constant);\n      } else {\n        param[event.type](event.value, event.time);\n      }\n    });\n\n    return this;\n  }\n  /**\n   * Replace the Param's internal AudioParam. Will apply scheduled curves\n   * onto the parameter and replace the connections.\n   */\n\n\n  setParam(param) {\n    assert(this._swappable, \"The Param must be assigned as 'swappable' in the constructor\");\n    const input = this.input;\n    input.disconnect(this._param);\n    this.apply(param);\n    this._param = param;\n    input.connect(this._param);\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._events.dispose();\n\n    return this;\n  }\n\n  get defaultValue() {\n    return this._toType(this._param.defaultValue);\n  } //-------------------------------------\n  // \tAUTOMATION CURVE CALCULATIONS\n  // \tMIT License, copyright (c) 2014 Jordan Santell\n  //-------------------------------------\n  // Calculates the the value along the curve produced by setTargetAtTime\n\n\n  _exponentialApproach(t0, v0, v1, timeConstant, t) {\n    return v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);\n  } // Calculates the the value along the curve produced by linearRampToValueAtTime\n\n\n  _linearInterpolate(t0, v0, t1, v1, t) {\n    return v0 + (v1 - v0) * ((t - t0) / (t1 - t0));\n  } // Calculates the the value along the curve produced by exponentialRampToValueAtTime\n\n\n  _exponentialInterpolate(t0, v0, t1, v1, t) {\n    return v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));\n  }\n\n}","import { isAudioNode, isAudioParam } from \"../util/AdvancedTypeCheck\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { Param } from \"./Param\";\nimport { ToneWithContext } from \"./ToneWithContext\";\nimport { assert, warn } from \"../util/Debug\";\n/**\n * ToneAudioNode is the base class for classes which process audio.\n */\n\nexport class ToneAudioNode extends ToneWithContext {\n  constructor() {\n    super(...arguments);\n    /**\n     * The name of the class\n     */\n\n    this.name = \"ToneAudioNode\";\n    /**\n     * List all of the node that must be set to match the ChannelProperties\n     */\n\n    this._internalChannels = [];\n  }\n  /**\n   * The number of inputs feeding into the AudioNode.\n   * For source nodes, this will be 0.\n   * @example\n   * const node = new Tone.Gain();\n   * console.log(node.numberOfInputs);\n   */\n\n\n  get numberOfInputs() {\n    if (isDefined(this.input)) {\n      if (isAudioParam(this.input) || this.input instanceof Param) {\n        return 1;\n      } else {\n        return this.input.numberOfInputs;\n      }\n    } else {\n      return 0;\n    }\n  }\n  /**\n   * The number of outputs of the AudioNode.\n   * @example\n   * const node = new Tone.Gain();\n   * console.log(node.numberOfOutputs);\n   */\n\n\n  get numberOfOutputs() {\n    if (isDefined(this.output)) {\n      return this.output.numberOfOutputs;\n    } else {\n      return 0;\n    }\n  } //-------------------------------------\n  // AUDIO PROPERTIES\n  //-------------------------------------\n\n  /**\n   * Used to decide which nodes to get/set properties on\n   */\n\n\n  _isAudioNode(node) {\n    return isDefined(node) && (node instanceof ToneAudioNode || isAudioNode(node));\n  }\n  /**\n   * Get all of the audio nodes (either internal or input/output) which together\n   * make up how the class node responds to channel input/output\n   */\n\n\n  _getInternalNodes() {\n    const nodeList = this._internalChannels.slice(0);\n\n    if (this._isAudioNode(this.input)) {\n      nodeList.push(this.input);\n    }\n\n    if (this._isAudioNode(this.output)) {\n      if (this.input !== this.output) {\n        nodeList.push(this.output);\n      }\n    }\n\n    return nodeList;\n  }\n  /**\n   * Set the audio options for this node such as channelInterpretation\n   * channelCount, etc.\n   * @param options\n   */\n\n\n  _setChannelProperties(options) {\n    const nodeList = this._getInternalNodes();\n\n    nodeList.forEach(node => {\n      node.channelCount = options.channelCount;\n      node.channelCountMode = options.channelCountMode;\n      node.channelInterpretation = options.channelInterpretation;\n    });\n  }\n  /**\n   * Get the current audio options for this node such as channelInterpretation\n   * channelCount, etc.\n   */\n\n\n  _getChannelProperties() {\n    const nodeList = this._getInternalNodes();\n\n    assert(nodeList.length > 0, \"ToneAudioNode does not have any internal nodes\"); // use the first node to get properties\n    // they should all be the same\n\n    const node = nodeList[0];\n    return {\n      channelCount: node.channelCount,\n      channelCountMode: node.channelCountMode,\n      channelInterpretation: node.channelInterpretation\n    };\n  }\n  /**\n   * channelCount is the number of channels used when up-mixing and down-mixing\n   * connections to any inputs to the node. The default value is 2 except for\n   * specific nodes where its value is specially determined.\n   */\n\n\n  get channelCount() {\n    return this._getChannelProperties().channelCount;\n  }\n\n  set channelCount(channelCount) {\n    const props = this._getChannelProperties(); // merge it with the other properties\n\n\n    this._setChannelProperties(Object.assign(props, {\n      channelCount\n    }));\n  }\n  /**\n   * channelCountMode determines how channels will be counted when up-mixing and\n   * down-mixing connections to any inputs to the node.\n   * The default value is \"max\". This attribute has no effect for nodes with no inputs.\n   * * \"max\" - computedNumberOfChannels is the maximum of the number of channels of all connections to an input. In this mode channelCount is ignored.\n   * * \"clamped-max\" - computedNumberOfChannels is determined as for \"max\" and then clamped to a maximum value of the given channelCount.\n   * * \"explicit\" - computedNumberOfChannels is the exact value as specified by the channelCount.\n   */\n\n\n  get channelCountMode() {\n    return this._getChannelProperties().channelCountMode;\n  }\n\n  set channelCountMode(channelCountMode) {\n    const props = this._getChannelProperties(); // merge it with the other properties\n\n\n    this._setChannelProperties(Object.assign(props, {\n      channelCountMode\n    }));\n  }\n  /**\n   * channelInterpretation determines how individual channels will be treated\n   * when up-mixing and down-mixing connections to any inputs to the node.\n   * The default value is \"speakers\".\n   */\n\n\n  get channelInterpretation() {\n    return this._getChannelProperties().channelInterpretation;\n  }\n\n  set channelInterpretation(channelInterpretation) {\n    const props = this._getChannelProperties(); // merge it with the other properties\n\n\n    this._setChannelProperties(Object.assign(props, {\n      channelInterpretation\n    }));\n  } //-------------------------------------\n  // CONNECTIONS\n  //-------------------------------------\n\n  /**\n   * connect the output of a ToneAudioNode to an AudioParam, AudioNode, or ToneAudioNode\n   * @param destination The output to connect to\n   * @param outputNum The output to connect from\n   * @param inputNum The input to connect to\n   */\n\n\n  connect(destination, outputNum = 0, inputNum = 0) {\n    connect(this, destination, outputNum, inputNum);\n    return this;\n  }\n  /**\n   * Connect the output to the context's destination node.\n   * @example\n   * const osc = new Tone.Oscillator().start();\n   * osc.toDestination();\n   */\n\n\n  toDestination() {\n    this.connect(this.context.destination);\n    return this;\n  }\n  /**\n   * Connect the output to the context's destination node.\n   * See [[toDestination]]\n   * @deprecated\n   */\n\n\n  toMaster() {\n    warn(\"toMaster() has been renamed toDestination()\");\n    return this.toDestination();\n  }\n  /**\n   * disconnect the output\n   */\n\n\n  disconnect(destination, outputNum = 0, inputNum = 0) {\n    disconnect(this, destination, outputNum, inputNum);\n    return this;\n  }\n  /**\n   * Connect the output of this node to the rest of the nodes in series.\n   * @example\n   * const osc = new Tone.Oscillator().start();\n   * const filter = new Tone.Filter();\n   * const volume = new Tone.Volume(-8);\n   * // connect a node to the filter, volume and then to the master output\n   * osc.chain(filter, volume, Tone.Destination);\n   */\n\n\n  chain(...nodes) {\n    connectSeries(this, ...nodes);\n    return this;\n  }\n  /**\n   * connect the output of this node to the rest of the nodes in parallel.\n   */\n\n\n  fan(...nodes) {\n    nodes.forEach(node => this.connect(node));\n    return this;\n  }\n  /**\n   * Dispose and disconnect\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    if (isDefined(this.input)) {\n      if (this.input instanceof ToneAudioNode) {\n        this.input.dispose();\n      } else if (isAudioNode(this.input)) {\n        this.input.disconnect();\n      }\n    }\n\n    if (isDefined(this.output)) {\n      if (this.output instanceof ToneAudioNode) {\n        this.output.dispose();\n      } else if (isAudioNode(this.output)) {\n        this.output.disconnect();\n      }\n    }\n\n    this._internalChannels = [];\n    return this;\n  }\n\n} //-------------------------------------\n// CONNECTIONS\n//-------------------------------------\n\n/**\n * connect together all of the arguments in series\n * @param nodes\n */\n\nexport function connectSeries(...nodes) {\n  const first = nodes.shift();\n  nodes.reduce((prev, current) => {\n    if (prev instanceof ToneAudioNode) {\n      prev.connect(current);\n    } else if (isAudioNode(prev)) {\n      connect(prev, current);\n    }\n\n    return current;\n  }, first);\n}\n/**\n * Connect two nodes together so that signal flows from the\n * first node to the second. Optionally specify the input and output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\n\nexport function connect(srcNode, dstNode, outputNumber = 0, inputNumber = 0) {\n  assert(isDefined(srcNode), \"Cannot connect from undefined node\");\n  assert(isDefined(dstNode), \"Cannot connect to undefined node\");\n\n  if (dstNode instanceof ToneAudioNode || isAudioNode(dstNode)) {\n    assert(dstNode.numberOfInputs > 0, \"Cannot connect to node with no inputs\");\n  }\n\n  assert(srcNode.numberOfOutputs > 0, \"Cannot connect from node with no outputs\"); // resolve the input of the dstNode\n\n  while (dstNode instanceof ToneAudioNode || dstNode instanceof Param) {\n    if (isDefined(dstNode.input)) {\n      dstNode = dstNode.input;\n    }\n  }\n\n  while (srcNode instanceof ToneAudioNode) {\n    if (isDefined(srcNode.output)) {\n      srcNode = srcNode.output;\n    }\n  } // make the connection\n\n\n  if (isAudioParam(dstNode)) {\n    srcNode.connect(dstNode, outputNumber);\n  } else {\n    srcNode.connect(dstNode, outputNumber, inputNumber);\n  }\n}\n/**\n * Disconnect a node from all nodes or optionally include a destination node and input/output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\n\nexport function disconnect(srcNode, dstNode, outputNumber = 0, inputNumber = 0) {\n  // resolve the destination node\n  if (isDefined(dstNode)) {\n    while (dstNode instanceof ToneAudioNode) {\n      dstNode = dstNode.input;\n    }\n  } // resolve the src node\n\n\n  while (!isAudioNode(srcNode)) {\n    if (isDefined(srcNode.output)) {\n      srcNode = srcNode.output;\n    }\n  }\n\n  if (isAudioParam(dstNode)) {\n    srcNode.disconnect(dstNode, outputNumber);\n  } else if (isAudioNode(dstNode)) {\n    srcNode.disconnect(dstNode, outputNumber, inputNumber);\n  } else {\n    srcNode.disconnect();\n  }\n}","import { Param } from \"../context/Param\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode } from \"./ToneAudioNode\";\n/**\n * A thin wrapper around the Native Web Audio GainNode.\n * The GainNode is a basic building block of the Web Audio\n * API and is useful for routing audio and adjusting gains.\n * @category Core\n * @offline 0.7 1\n * @example\n * const gainNode = new Tone.Gain(0).toDestination();\n * const osc = new Tone.Oscillator().connect(gainNode);\n * gainNode.gain.rampTo(1, 0.1);\n * gainNode.gain.rampTo(0, 0.4, 0.2);\n */\n\nexport class Gain extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]));\n    this.name = \"Gain\";\n    /**\n     * The wrapped GainNode.\n     */\n\n    this._gainNode = this.context.createGain(); // input = output\n\n    this.input = this._gainNode;\n    this.output = this._gainNode;\n    const options = optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]);\n    this.gain = new Param({\n      context: this.context,\n      convert: options.convert,\n      param: this._gainNode.gain,\n      units: options.units,\n      value: options.gain,\n      minValue: options.minValue,\n      maxValue: options.maxValue\n    });\n    readOnly(this, \"gain\");\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      convert: true,\n      gain: 1,\n      units: \"gain\"\n    });\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._gainNode.disconnect();\n\n    this.gain.dispose();\n    return this;\n  }\n\n}","import { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { noOp } from \"../core/util/Interface\";\nimport { assert } from \"../core/util/Debug\";\n/**\n * Base class for fire-and-forget nodes\n */\n\nexport class OneShotSource extends ToneAudioNode {\n  constructor(options) {\n    super(options);\n    /**\n     * The callback to invoke after the\n     * source is done playing.\n     */\n\n    this.onended = noOp;\n    /**\n     * The start time\n     */\n\n    this._startTime = -1;\n    /**\n     * The stop time\n     */\n\n    this._stopTime = -1;\n    /**\n     * The id of the timeout\n     */\n\n    this._timeout = -1;\n    /**\n     * The public output node\n     */\n\n    this.output = new Gain({\n      context: this.context,\n      gain: 0\n    });\n    /**\n     * The output gain node.\n     */\n\n    this._gainNode = this.output;\n    /**\n     * Get the playback state at the given time\n     */\n\n    this.getStateAtTime = function (time) {\n      const computedTime = this.toSeconds(time);\n\n      if (this._startTime !== -1 && computedTime >= this._startTime && (this._stopTime === -1 || computedTime <= this._stopTime)) {\n        return \"started\";\n      } else {\n        return \"stopped\";\n      }\n    };\n\n    this._fadeIn = options.fadeIn;\n    this._fadeOut = options.fadeOut;\n    this._curve = options.curve;\n    this.onended = options.onended;\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      curve: \"linear\",\n      fadeIn: 0,\n      fadeOut: 0,\n      onended: noOp\n    });\n  }\n  /**\n   * Start the source at the given time\n   * @param  time When to start the source\n   */\n\n\n  _startGain(time, gain = 1) {\n    assert(this._startTime === -1, \"Source cannot be started more than once\"); // apply a fade in envelope\n\n    const fadeInTime = this.toSeconds(this._fadeIn); // record the start time\n\n    this._startTime = time + fadeInTime;\n    this._startTime = Math.max(this._startTime, this.context.currentTime); // schedule the envelope\n\n    if (fadeInTime > 0) {\n      this._gainNode.gain.setValueAtTime(0, time);\n\n      if (this._curve === \"linear\") {\n        this._gainNode.gain.linearRampToValueAtTime(gain, time + fadeInTime);\n      } else {\n        this._gainNode.gain.exponentialApproachValueAtTime(gain, time, fadeInTime);\n      }\n    } else {\n      this._gainNode.gain.setValueAtTime(gain, time);\n    }\n\n    return this;\n  }\n  /**\n   * Stop the source node at the given time.\n   * @param time When to stop the source\n   */\n\n\n  stop(time) {\n    this.log(\"stop\", time);\n\n    this._stopGain(this.toSeconds(time));\n\n    return this;\n  }\n  /**\n   * Stop the source at the given time\n   * @param  time When to stop the source\n   */\n\n\n  _stopGain(time) {\n    assert(this._startTime !== -1, \"'start' must be called before 'stop'\"); // cancel the previous stop\n\n    this.cancelStop(); // the fadeOut time\n\n    const fadeOutTime = this.toSeconds(this._fadeOut); // schedule the stop callback\n\n    this._stopTime = this.toSeconds(time) + fadeOutTime;\n    this._stopTime = Math.max(this._stopTime, this.context.currentTime);\n\n    if (fadeOutTime > 0) {\n      // start the fade out curve at the given time\n      if (this._curve === \"linear\") {\n        this._gainNode.gain.linearRampTo(0, fadeOutTime, time);\n      } else {\n        this._gainNode.gain.targetRampTo(0, fadeOutTime, time);\n      }\n    } else {\n      // stop any ongoing ramps, and set the value to 0\n      this._gainNode.gain.cancelAndHoldAtTime(time);\n\n      this._gainNode.gain.setValueAtTime(0, time);\n    }\n\n    this.context.clearTimeout(this._timeout);\n    this._timeout = this.context.setTimeout(() => {\n      // allow additional time for the exponential curve to fully decay\n      const additionalTail = this._curve === \"exponential\" ? fadeOutTime * 2 : 0;\n\n      this._stopSource(this.now() + additionalTail);\n\n      this._onended();\n    }, this._stopTime - this.context.currentTime);\n    return this;\n  }\n  /**\n   * Invoke the onended callback\n   */\n\n\n  _onended() {\n    if (this.onended !== noOp) {\n      this.onended(this); // overwrite onended to make sure it only is called once\n\n      this.onended = noOp; // dispose when it's ended to free up for garbage collection only in the online context\n\n      if (!this.context.isOffline) {\n        setTimeout(() => this.dispose(), 1000);\n      }\n    }\n  }\n  /**\n   * Get the playback state at the current time\n   */\n\n\n  get state() {\n    return this.getStateAtTime(this.now());\n  }\n  /**\n   * Cancel a scheduled stop event\n   */\n\n\n  cancelStop() {\n    this.log(\"cancelStop\");\n    assert(this._startTime !== -1, \"Source is not started\"); // cancel the stop envelope\n\n    this._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n\n    this.context.clearTimeout(this._timeout);\n    this._stopTime = -1;\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._gainNode.disconnect();\n\n    return this;\n  }\n\n}","import { connect } from \"../core/context/ToneAudioNode\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { OneShotSource } from \"../source/OneShotSource\";\n/**\n * Wrapper around the native fire-and-forget ConstantSource.\n * Adds the ability to reschedule the stop method.\n * @category Signal\n */\n\nexport class ToneConstantSource extends OneShotSource {\n  constructor() {\n    super(optionsFromArguments(ToneConstantSource.getDefaults(), arguments, [\"offset\"]));\n    this.name = \"ToneConstantSource\";\n    /**\n     * The signal generator\n     */\n\n    this._source = this.context.createConstantSource();\n    const options = optionsFromArguments(ToneConstantSource.getDefaults(), arguments, [\"offset\"]);\n    connect(this._source, this._gainNode);\n    this.offset = new Param({\n      context: this.context,\n      convert: options.convert,\n      param: this._source.offset,\n      units: options.units,\n      value: options.offset,\n      minValue: options.minValue,\n      maxValue: options.maxValue\n    });\n  }\n\n  static getDefaults() {\n    return Object.assign(OneShotSource.getDefaults(), {\n      convert: true,\n      offset: 1,\n      units: \"number\"\n    });\n  }\n  /**\n   * Start the source node at the given time\n   * @param  time When to start the source\n   */\n\n\n  start(time) {\n    const computedTime = this.toSeconds(time);\n    this.log(\"start\", computedTime);\n\n    this._startGain(computedTime);\n\n    this._source.start(computedTime);\n\n    return this;\n  }\n\n  _stopSource(time) {\n    this._source.stop(time);\n  }\n\n  dispose() {\n    super.dispose();\n\n    if (this.state === \"started\") {\n      this.stop();\n    }\n\n    this._source.disconnect();\n\n    this.offset.dispose();\n    return this;\n  }\n\n}","import { Param } from \"../core/context/Param\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { connect } from \"../core/context/ToneAudioNode\";\nimport { isAudioParam } from \"../core/util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { ToneConstantSource } from \"./ToneConstantSource\";\n/**\n * A signal is an audio-rate value. Tone.Signal is a core component of the library.\n * Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n * has all of the methods available to native Web Audio\n * [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n * as well as additional conveniences. Read more about working with signals\n * [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n *\n * @example\n * const osc = new Tone.Oscillator().toDestination().start();\n * // a scheduleable signal which can be connected to control an AudioParam or another Signal\n * const signal = new Tone.Signal({\n * \tvalue: \"C4\",\n * \tunits: \"frequency\"\n * }).connect(osc.frequency);\n * // the scheduled ramp controls the connected signal\n * signal.rampTo(\"C2\", 4, \"+0.5\");\n * @category Signal\n */\n\nexport class Signal extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]));\n    this.name = \"Signal\";\n    /**\n     * Indicates if the value should be overridden on connection.\n     */\n\n    this.override = true;\n    const options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]);\n    this.output = this._constantSource = new ToneConstantSource({\n      context: this.context,\n      convert: options.convert,\n      offset: options.value,\n      units: options.units,\n      minValue: options.minValue,\n      maxValue: options.maxValue\n    });\n\n    this._constantSource.start(0);\n\n    this.input = this._param = this._constantSource.offset;\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      convert: true,\n      units: \"number\",\n      value: 0\n    });\n  }\n\n  connect(destination, outputNum = 0, inputNum = 0) {\n    // start it only when connected to something\n    connectSignal(this, destination, outputNum, inputNum);\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._param.dispose();\n\n    this._constantSource.dispose();\n\n    return this;\n  } //-------------------------------------\n  // ABSTRACT PARAM INTERFACE\n  // just a proxy for the ConstantSourceNode's offset AudioParam\n  // all docs are generated from AbstractParam.ts\n  //-------------------------------------\n\n\n  setValueAtTime(value, time) {\n    this._param.setValueAtTime(value, time);\n\n    return this;\n  }\n\n  getValueAtTime(time) {\n    return this._param.getValueAtTime(time);\n  }\n\n  setRampPoint(time) {\n    this._param.setRampPoint(time);\n\n    return this;\n  }\n\n  linearRampToValueAtTime(value, time) {\n    this._param.linearRampToValueAtTime(value, time);\n\n    return this;\n  }\n\n  exponentialRampToValueAtTime(value, time) {\n    this._param.exponentialRampToValueAtTime(value, time);\n\n    return this;\n  }\n\n  exponentialRampTo(value, rampTime, startTime) {\n    this._param.exponentialRampTo(value, rampTime, startTime);\n\n    return this;\n  }\n\n  linearRampTo(value, rampTime, startTime) {\n    this._param.linearRampTo(value, rampTime, startTime);\n\n    return this;\n  }\n\n  targetRampTo(value, rampTime, startTime) {\n    this._param.targetRampTo(value, rampTime, startTime);\n\n    return this;\n  }\n\n  exponentialApproachValueAtTime(value, time, rampTime) {\n    this._param.exponentialApproachValueAtTime(value, time, rampTime);\n\n    return this;\n  }\n\n  setTargetAtTime(value, startTime, timeConstant) {\n    this._param.setTargetAtTime(value, startTime, timeConstant);\n\n    return this;\n  }\n\n  setValueCurveAtTime(values, startTime, duration, scaling) {\n    this._param.setValueCurveAtTime(values, startTime, duration, scaling);\n\n    return this;\n  }\n\n  cancelScheduledValues(time) {\n    this._param.cancelScheduledValues(time);\n\n    return this;\n  }\n\n  cancelAndHoldAtTime(time) {\n    this._param.cancelAndHoldAtTime(time);\n\n    return this;\n  }\n\n  rampTo(value, rampTime, startTime) {\n    this._param.rampTo(value, rampTime, startTime);\n\n    return this;\n  }\n\n  get value() {\n    return this._param.value;\n  }\n\n  set value(value) {\n    this._param.value = value;\n  }\n\n  get convert() {\n    return this._param.convert;\n  }\n\n  set convert(convert) {\n    this._param.convert = convert;\n  }\n\n  get units() {\n    return this._param.units;\n  }\n\n  get overridden() {\n    return this._param.overridden;\n  }\n\n  set overridden(overridden) {\n    this._param.overridden = overridden;\n  }\n\n  get maxValue() {\n    return this._param.maxValue;\n  }\n\n  get minValue() {\n    return this._param.minValue;\n  }\n  /**\n   * See [[Param.apply]].\n   */\n\n\n  apply(param) {\n    this._param.apply(param);\n\n    return this;\n  }\n\n}\n/**\n * When connecting from a signal, it's necessary to zero out the node destination\n * node if that node is also a signal. If the destination is not 0, then the values\n * will be summed. This method insures that the output of the destination signal will\n * be the same as the source signal, making the destination signal a pass through node.\n * @param signal The output signal to connect from\n * @param destination the destination to connect to\n * @param outputNum the optional output number\n * @param inputNum the input number\n */\n\nexport function connectSignal(signal, destination, outputNum, inputNum) {\n  if (destination instanceof Param || isAudioParam(destination) || destination instanceof Signal && destination.override) {\n    // cancel changes\n    destination.cancelScheduledValues(0); // reset the value\n\n    destination.setValueAtTime(0, 0); // mark the value as overridden\n\n    if (destination instanceof Signal) {\n      destination.overridden = true;\n    }\n  }\n\n  connect(signal, destination, outputNum, inputNum);\n}","import { Param } from \"../context/Param\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isUndef } from \"../util/TypeCheck\";\n/**\n * A Param class just for computing ticks. Similar to the [[Param]] class,\n * but offers conversion to BPM values as well as ability to compute tick\n * duration and elapsed ticks\n */\n\nexport class TickParam extends Param {\n  constructor() {\n    super(optionsFromArguments(TickParam.getDefaults(), arguments, [\"value\"]));\n    this.name = \"TickParam\";\n    /**\n     * The timeline which tracks all of the automations.\n     */\n\n    this._events = new Timeline(Infinity);\n    /**\n     * The internal holder for the multiplier value\n     */\n\n    this._multiplier = 1;\n    const options = optionsFromArguments(TickParam.getDefaults(), arguments, [\"value\"]); // set the multiplier\n\n    this._multiplier = options.multiplier; // clear the ticks from the beginning\n\n    this._events.cancel(0); // set an initial event\n\n\n    this._events.add({\n      ticks: 0,\n      time: 0,\n      type: \"setValueAtTime\",\n      value: this._fromType(options.value)\n    });\n\n    this.setValueAtTime(options.value, 0);\n  }\n\n  static getDefaults() {\n    return Object.assign(Param.getDefaults(), {\n      multiplier: 1,\n      units: \"hertz\",\n      value: 1\n    });\n  }\n\n  setTargetAtTime(value, time, constant) {\n    // approximate it with multiple linear ramps\n    time = this.toSeconds(time);\n    this.setRampPoint(time);\n\n    const computedValue = this._fromType(value); // start from previously scheduled value\n\n\n    const prevEvent = this._events.get(time);\n\n    const segments = Math.round(Math.max(1 / constant, 1));\n\n    for (let i = 0; i <= segments; i++) {\n      const segTime = constant * i + time;\n\n      const rampVal = this._exponentialApproach(prevEvent.time, prevEvent.value, computedValue, constant, segTime);\n\n      this.linearRampToValueAtTime(this._toType(rampVal), segTime);\n    }\n\n    return this;\n  }\n\n  setValueAtTime(value, time) {\n    const computedTime = this.toSeconds(time);\n    super.setValueAtTime(value, time);\n\n    const event = this._events.get(computedTime);\n\n    const previousEvent = this._events.previousEvent(event);\n\n    const ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\n    event.ticks = Math.max(ticksUntilTime, 0);\n    return this;\n  }\n\n  linearRampToValueAtTime(value, time) {\n    const computedTime = this.toSeconds(time);\n    super.linearRampToValueAtTime(value, time);\n\n    const event = this._events.get(computedTime);\n\n    const previousEvent = this._events.previousEvent(event);\n\n    const ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\n    event.ticks = Math.max(ticksUntilTime, 0);\n    return this;\n  }\n\n  exponentialRampToValueAtTime(value, time) {\n    // aproximate it with multiple linear ramps\n    time = this.toSeconds(time);\n\n    const computedVal = this._fromType(value); // start from previously scheduled value\n\n\n    const prevEvent = this._events.get(time); // approx 10 segments per second\n\n\n    const segments = Math.round(Math.max((time - prevEvent.time) * 10, 1));\n    const segmentDur = (time - prevEvent.time) / segments;\n\n    for (let i = 0; i <= segments; i++) {\n      const segTime = segmentDur * i + prevEvent.time;\n\n      const rampVal = this._exponentialInterpolate(prevEvent.time, prevEvent.value, time, computedVal, segTime);\n\n      this.linearRampToValueAtTime(this._toType(rampVal), segTime);\n    }\n\n    return this;\n  }\n  /**\n   * Returns the tick value at the time. Takes into account\n   * any automation curves scheduled on the signal.\n   * @param  event The time to get the tick count at\n   * @return The number of ticks which have elapsed at the time given any automations.\n   */\n\n\n  _getTicksUntilEvent(event, time) {\n    if (event === null) {\n      event = {\n        ticks: 0,\n        time: 0,\n        type: \"setValueAtTime\",\n        value: 0\n      };\n    } else if (isUndef(event.ticks)) {\n      const previousEvent = this._events.previousEvent(event);\n\n      event.ticks = this._getTicksUntilEvent(previousEvent, event.time);\n    }\n\n    const val0 = this._fromType(this.getValueAtTime(event.time));\n\n    let val1 = this._fromType(this.getValueAtTime(time)); // if it's right on the line, take the previous value\n\n\n    const onTheLineEvent = this._events.get(time);\n\n    if (onTheLineEvent && onTheLineEvent.time === time && onTheLineEvent.type === \"setValueAtTime\") {\n      val1 = this._fromType(this.getValueAtTime(time - this.sampleTime));\n    }\n\n    return 0.5 * (time - event.time) * (val0 + val1) + event.ticks;\n  }\n  /**\n   * Returns the tick value at the time. Takes into account\n   * any automation curves scheduled on the signal.\n   * @param  time The time to get the tick count at\n   * @return The number of ticks which have elapsed at the time given any automations.\n   */\n\n\n  getTicksAtTime(time) {\n    const computedTime = this.toSeconds(time);\n\n    const event = this._events.get(computedTime);\n\n    return Math.max(this._getTicksUntilEvent(event, computedTime), 0);\n  }\n  /**\n   * Return the elapsed time of the number of ticks from the given time\n   * @param ticks The number of ticks to calculate\n   * @param  time The time to get the next tick from\n   * @return The duration of the number of ticks from the given time in seconds\n   */\n\n\n  getDurationOfTicks(ticks, time) {\n    const computedTime = this.toSeconds(time);\n    const currentTick = this.getTicksAtTime(time);\n    return this.getTimeOfTick(currentTick + ticks) - computedTime;\n  }\n  /**\n   * Given a tick, returns the time that tick occurs at.\n   * @return The time that the tick occurs.\n   */\n\n\n  getTimeOfTick(tick) {\n    const before = this._events.get(tick, \"ticks\");\n\n    const after = this._events.getAfter(tick, \"ticks\");\n\n    if (before && before.ticks === tick) {\n      return before.time;\n    } else if (before && after && after.type === \"linearRampToValueAtTime\" && before.value !== after.value) {\n      const val0 = this._fromType(this.getValueAtTime(before.time));\n\n      const val1 = this._fromType(this.getValueAtTime(after.time));\n\n      const delta = (val1 - val0) / (after.time - before.time);\n      const k = Math.sqrt(Math.pow(val0, 2) - 2 * delta * (before.ticks - tick));\n      const sol1 = (-val0 + k) / delta;\n      const sol2 = (-val0 - k) / delta;\n      return (sol1 > 0 ? sol1 : sol2) + before.time;\n    } else if (before) {\n      if (before.value === 0) {\n        return Infinity;\n      } else {\n        return before.time + (tick - before.ticks) / before.value;\n      }\n    } else {\n      return tick / this._initialValue;\n    }\n  }\n  /**\n   * Convert some number of ticks their the duration in seconds accounting\n   * for any automation curves starting at the given time.\n   * @param  ticks The number of ticks to convert to seconds.\n   * @param  when  When along the automation timeline to convert the ticks.\n   * @return The duration in seconds of the ticks.\n   */\n\n\n  ticksToTime(ticks, when) {\n    return this.getDurationOfTicks(ticks, when);\n  }\n  /**\n   * The inverse of [[ticksToTime]]. Convert a duration in\n   * seconds to the corresponding number of ticks accounting for any\n   * automation curves starting at the given time.\n   * @param  duration The time interval to convert to ticks.\n   * @param  when When along the automation timeline to convert the ticks.\n   * @return The duration in ticks.\n   */\n\n\n  timeToTicks(duration, when) {\n    const computedTime = this.toSeconds(when);\n    const computedDuration = this.toSeconds(duration);\n    const startTicks = this.getTicksAtTime(computedTime);\n    const endTicks = this.getTicksAtTime(computedTime + computedDuration);\n    return endTicks - startTicks;\n  }\n  /**\n   * Convert from the type when the unit value is BPM\n   */\n\n\n  _fromType(val) {\n    if (this.units === \"bpm\" && this.multiplier) {\n      return 1 / (60 / val / this.multiplier);\n    } else {\n      return super._fromType(val);\n    }\n  }\n  /**\n   * Special case of type conversion where the units === \"bpm\"\n   */\n\n\n  _toType(val) {\n    if (this.units === \"bpm\" && this.multiplier) {\n      return val / this.multiplier * 60;\n    } else {\n      return super._toType(val);\n    }\n  }\n  /**\n   * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n   */\n\n\n  get multiplier() {\n    return this._multiplier;\n  }\n\n  set multiplier(m) {\n    // get and reset the current value with the new multiplier\n    // might be necessary to clear all the previous values\n    const currentVal = this.value;\n    this._multiplier = m;\n    this.cancelScheduledValues(0);\n    this.setValueAtTime(currentVal, 0);\n  }\n\n}","import { Signal } from \"../../signal/Signal\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { TickParam } from \"./TickParam\";\n/**\n * TickSignal extends Tone.Signal, but adds the capability\n * to calculate the number of elapsed ticks. exponential and target curves\n * are approximated with multiple linear ramps.\n *\n * Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos,\n * for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)\n * describing integrating timing functions for tempo calculations.\n */\n\nexport class TickSignal extends Signal {\n  constructor() {\n    super(optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]));\n    this.name = \"TickSignal\";\n    const options = optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]);\n    this.input = this._param = new TickParam({\n      context: this.context,\n      convert: options.convert,\n      multiplier: options.multiplier,\n      param: this._constantSource.offset,\n      units: options.units,\n      value: options.value\n    });\n  }\n\n  static getDefaults() {\n    return Object.assign(Signal.getDefaults(), {\n      multiplier: 1,\n      units: \"hertz\",\n      value: 1\n    });\n  }\n\n  ticksToTime(ticks, when) {\n    return this._param.ticksToTime(ticks, when);\n  }\n\n  timeToTicks(duration, when) {\n    return this._param.timeToTicks(duration, when);\n  }\n\n  getTimeOfTick(tick) {\n    return this._param.getTimeOfTick(tick);\n  }\n\n  getDurationOfTicks(ticks, time) {\n    return this._param.getDurationOfTicks(ticks, time);\n  }\n\n  getTicksAtTime(time) {\n    return this._param.getTicksAtTime(time);\n  }\n  /**\n   * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n   */\n\n\n  get multiplier() {\n    return this._param.multiplier;\n  }\n\n  set multiplier(m) {\n    this._param.multiplier = m;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._param.dispose();\n\n    return this;\n  }\n\n}","import { ToneWithContext } from \"../context/ToneWithContext\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { StateTimeline } from \"../util/StateTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { TickSignal } from \"./TickSignal\";\nimport { EQ } from \"../util/Math\";\n/**\n * Uses [TickSignal](TickSignal) to track elapsed ticks with complex automation curves.\n */\n\nexport class TickSource extends ToneWithContext {\n  constructor() {\n    super(optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]));\n    this.name = \"TickSource\";\n    /**\n     * The state timeline\n     */\n\n    this._state = new StateTimeline();\n    /**\n     * The offset values of the ticks\n     */\n\n    this._tickOffset = new Timeline();\n    const options = optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]);\n    this.frequency = new TickSignal({\n      context: this.context,\n      units: options.units,\n      value: options.frequency\n    });\n    readOnly(this, \"frequency\"); // set the initial state\n\n    this._state.setStateAtTime(\"stopped\", 0); // add the first event\n\n\n    this.setTicksAtTime(0, 0);\n  }\n\n  static getDefaults() {\n    return Object.assign({\n      frequency: 1,\n      units: \"hertz\"\n    }, ToneWithContext.getDefaults());\n  }\n  /**\n   * Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n   */\n\n\n  get state() {\n    return this.getStateAtTime(this.now());\n  }\n  /**\n   * Start the clock at the given time. Optionally pass in an offset\n   * of where to start the tick counter from.\n   * @param  time    The time the clock should start\n   * @param offset The number of ticks to start the source at\n   */\n\n\n  start(time, offset) {\n    const computedTime = this.toSeconds(time);\n\n    if (this._state.getValueAtTime(computedTime) !== \"started\") {\n      this._state.setStateAtTime(\"started\", computedTime);\n\n      if (isDefined(offset)) {\n        this.setTicksAtTime(offset, computedTime);\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Stop the clock. Stopping the clock resets the tick counter to 0.\n   * @param time The time when the clock should stop.\n   */\n\n\n  stop(time) {\n    const computedTime = this.toSeconds(time); // cancel the previous stop\n\n    if (this._state.getValueAtTime(computedTime) === \"stopped\") {\n      const event = this._state.get(computedTime);\n\n      if (event && event.time > 0) {\n        this._tickOffset.cancel(event.time);\n\n        this._state.cancel(event.time);\n      }\n    }\n\n    this._state.cancel(computedTime);\n\n    this._state.setStateAtTime(\"stopped\", computedTime);\n\n    this.setTicksAtTime(0, computedTime);\n    return this;\n  }\n  /**\n   * Pause the clock. Pausing does not reset the tick counter.\n   * @param time The time when the clock should stop.\n   */\n\n\n  pause(time) {\n    const computedTime = this.toSeconds(time);\n\n    if (this._state.getValueAtTime(computedTime) === \"started\") {\n      this._state.setStateAtTime(\"paused\", computedTime);\n    }\n\n    return this;\n  }\n  /**\n   * Cancel start/stop/pause and setTickAtTime events scheduled after the given time.\n   * @param time When to clear the events after\n   */\n\n\n  cancel(time) {\n    time = this.toSeconds(time);\n\n    this._state.cancel(time);\n\n    this._tickOffset.cancel(time);\n\n    return this;\n  }\n  /**\n   * Get the elapsed ticks at the given time\n   * @param  time  When to get the tick value\n   * @return The number of ticks\n   */\n\n\n  getTicksAtTime(time) {\n    const computedTime = this.toSeconds(time);\n\n    const stopEvent = this._state.getLastState(\"stopped\", computedTime); // this event allows forEachBetween to iterate until the current time\n\n\n    const tmpEvent = {\n      state: \"paused\",\n      time: computedTime\n    };\n\n    this._state.add(tmpEvent); // keep track of the previous offset event\n\n\n    let lastState = stopEvent;\n    let elapsedTicks = 0; // iterate through all the events since the last stop\n\n    this._state.forEachBetween(stopEvent.time, computedTime + this.sampleTime, e => {\n      let periodStartTime = lastState.time; // if there is an offset event in this period use that\n\n      const offsetEvent = this._tickOffset.get(e.time);\n\n      if (offsetEvent && offsetEvent.time >= lastState.time) {\n        elapsedTicks = offsetEvent.ticks;\n        periodStartTime = offsetEvent.time;\n      }\n\n      if (lastState.state === \"started\" && e.state !== \"started\") {\n        elapsedTicks += this.frequency.getTicksAtTime(e.time) - this.frequency.getTicksAtTime(periodStartTime);\n      }\n\n      lastState = e;\n    }); // remove the temporary event\n\n\n    this._state.remove(tmpEvent); // return the ticks\n\n\n    return elapsedTicks;\n  }\n  /**\n   * The number of times the callback was invoked. Starts counting at 0\n   * and increments after the callback was invoked. Returns -1 when stopped.\n   */\n\n\n  get ticks() {\n    return this.getTicksAtTime(this.now());\n  }\n\n  set ticks(t) {\n    this.setTicksAtTime(t, this.now());\n  }\n  /**\n   * The time since ticks=0 that the TickSource has been running. Accounts\n   * for tempo curves\n   */\n\n\n  get seconds() {\n    return this.getSecondsAtTime(this.now());\n  }\n\n  set seconds(s) {\n    const now = this.now();\n    const ticks = this.frequency.timeToTicks(s, now);\n    this.setTicksAtTime(ticks, now);\n  }\n  /**\n   * Return the elapsed seconds at the given time.\n   * @param  time  When to get the elapsed seconds\n   * @return  The number of elapsed seconds\n   */\n\n\n  getSecondsAtTime(time) {\n    time = this.toSeconds(time);\n\n    const stopEvent = this._state.getLastState(\"stopped\", time); // this event allows forEachBetween to iterate until the current time\n\n\n    const tmpEvent = {\n      state: \"paused\",\n      time\n    };\n\n    this._state.add(tmpEvent); // keep track of the previous offset event\n\n\n    let lastState = stopEvent;\n    let elapsedSeconds = 0; // iterate through all the events since the last stop\n\n    this._state.forEachBetween(stopEvent.time, time + this.sampleTime, e => {\n      let periodStartTime = lastState.time; // if there is an offset event in this period use that\n\n      const offsetEvent = this._tickOffset.get(e.time);\n\n      if (offsetEvent && offsetEvent.time >= lastState.time) {\n        elapsedSeconds = offsetEvent.seconds;\n        periodStartTime = offsetEvent.time;\n      }\n\n      if (lastState.state === \"started\" && e.state !== \"started\") {\n        elapsedSeconds += e.time - periodStartTime;\n      }\n\n      lastState = e;\n    }); // remove the temporary event\n\n\n    this._state.remove(tmpEvent); // return the ticks\n\n\n    return elapsedSeconds;\n  }\n  /**\n   * Set the clock's ticks at the given time.\n   * @param  ticks The tick value to set\n   * @param  time  When to set the tick value\n   */\n\n\n  setTicksAtTime(ticks, time) {\n    time = this.toSeconds(time);\n\n    this._tickOffset.cancel(time);\n\n    this._tickOffset.add({\n      seconds: this.frequency.getDurationOfTicks(ticks, time),\n      ticks,\n      time\n    });\n\n    return this;\n  }\n  /**\n   * Returns the scheduled state at the given time.\n   * @param  time  The time to query.\n   */\n\n\n  getStateAtTime(time) {\n    time = this.toSeconds(time);\n    return this._state.getValueAtTime(time);\n  }\n  /**\n   * Get the time of the given tick. The second argument\n   * is when to test before. Since ticks can be set (with setTicksAtTime)\n   * there may be multiple times for a given tick value.\n   * @param  tick The tick number.\n   * @param  before When to measure the tick value from.\n   * @return The time of the tick\n   */\n\n\n  getTimeOfTick(tick, before = this.now()) {\n    const offset = this._tickOffset.get(before);\n\n    const event = this._state.get(before);\n\n    const startTime = Math.max(offset.time, event.time);\n    const absoluteTicks = this.frequency.getTicksAtTime(startTime) + tick - offset.ticks;\n    return this.frequency.getTimeOfTick(absoluteTicks);\n  }\n  /**\n   * Invoke the callback event at all scheduled ticks between the\n   * start time and the end time\n   * @param  startTime  The beginning of the search range\n   * @param  endTime    The end of the search range\n   * @param  callback   The callback to invoke with each tick\n   */\n\n\n  forEachTickBetween(startTime, endTime, callback) {\n    // only iterate through the sections where it is \"started\"\n    let lastStateEvent = this._state.get(startTime);\n\n    this._state.forEachBetween(startTime, endTime, event => {\n      if (lastStateEvent && lastStateEvent.state === \"started\" && event.state !== \"started\") {\n        this.forEachTickBetween(Math.max(lastStateEvent.time, startTime), event.time - this.sampleTime, callback);\n      }\n\n      lastStateEvent = event;\n    });\n\n    let error = null;\n\n    if (lastStateEvent && lastStateEvent.state === \"started\") {\n      const maxStartTime = Math.max(lastStateEvent.time, startTime); // figure out the difference between the frequency ticks and the\n\n      const startTicks = this.frequency.getTicksAtTime(maxStartTime);\n      const ticksAtStart = this.frequency.getTicksAtTime(lastStateEvent.time);\n      const diff = startTicks - ticksAtStart;\n      let offset = Math.ceil(diff) - diff; // guard against floating point issues\n\n      offset = EQ(offset, 1) ? 0 : offset;\n      let nextTickTime = this.frequency.getTimeOfTick(startTicks + offset);\n\n      while (nextTickTime < endTime) {\n        try {\n          callback(nextTickTime, Math.round(this.getTicksAtTime(nextTickTime)));\n        } catch (e) {\n          error = e;\n          break;\n        }\n\n        nextTickTime += this.frequency.getDurationOfTicks(1, nextTickTime);\n      }\n    }\n\n    if (error) {\n      throw error;\n    }\n\n    return this;\n  }\n  /**\n   * Clean up\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._state.dispose();\n\n    this._tickOffset.dispose();\n\n    this.frequency.dispose();\n    return this;\n  }\n\n}","import { ToneWithContext } from \"../context/ToneWithContext\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { noOp, readOnly } from \"../util/Interface\";\nimport { StateTimeline } from \"../util/StateTimeline\";\nimport { TickSource } from \"./TickSource\";\nimport { assertContextRunning } from \"../util/Debug\";\n/**\n * A sample accurate clock which provides a callback at the given rate.\n * While the callback is not sample-accurate (it is still susceptible to\n * loose JS timing), the time passed in as the argument to the callback\n * is precise. For most applications, it is better to use Tone.Transport\n * instead of the Clock by itself since you can synchronize multiple callbacks.\n * @example\n * // the callback will be invoked approximately once a second\n * // and will print the time exactly once a second apart.\n * const clock = new Tone.Clock(time => {\n * \tconsole.log(time);\n * }, 1);\n * clock.start();\n * @category Core\n */\n\nexport class Clock extends ToneWithContext {\n  constructor() {\n    super(optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]));\n    this.name = \"Clock\";\n    /**\n     * The callback function to invoke at the scheduled tick.\n     */\n\n    this.callback = noOp;\n    /**\n     * The last time the loop callback was invoked\n     */\n\n    this._lastUpdate = 0;\n    /**\n     * Keep track of the playback state\n     */\n\n    this._state = new StateTimeline(\"stopped\");\n    /**\n     * Context bound reference to the _loop method\n     * This is necessary to remove the event in the end.\n     */\n\n    this._boundLoop = this._loop.bind(this);\n    const options = optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]);\n    this.callback = options.callback;\n    this._tickSource = new TickSource({\n      context: this.context,\n      frequency: options.frequency,\n      units: options.units\n    });\n    this._lastUpdate = 0;\n    this.frequency = this._tickSource.frequency;\n    readOnly(this, \"frequency\"); // add an initial state\n\n    this._state.setStateAtTime(\"stopped\", 0); // bind a callback to the worker thread\n\n\n    this.context.on(\"tick\", this._boundLoop);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneWithContext.getDefaults(), {\n      callback: noOp,\n      frequency: 1,\n      units: \"hertz\"\n    });\n  }\n  /**\n   * Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n   */\n\n\n  get state() {\n    return this._state.getValueAtTime(this.now());\n  }\n  /**\n   * Start the clock at the given time. Optionally pass in an offset\n   * of where to start the tick counter from.\n   * @param  time    The time the clock should start\n   * @param offset  Where the tick counter starts counting from.\n   */\n\n\n  start(time, offset) {\n    // make sure the context is running\n    assertContextRunning(this.context); // start the loop\n\n    const computedTime = this.toSeconds(time);\n    this.log(\"start\", computedTime);\n\n    if (this._state.getValueAtTime(computedTime) !== \"started\") {\n      this._state.setStateAtTime(\"started\", computedTime);\n\n      this._tickSource.start(computedTime, offset);\n\n      if (computedTime < this._lastUpdate) {\n        this.emit(\"start\", computedTime, offset);\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Stop the clock. Stopping the clock resets the tick counter to 0.\n   * @param time The time when the clock should stop.\n   * @example\n   * const clock = new Tone.Clock(time => {\n   * \tconsole.log(time);\n   * }, 1);\n   * clock.start();\n   * // stop the clock after 10 seconds\n   * clock.stop(\"+10\");\n   */\n\n\n  stop(time) {\n    const computedTime = this.toSeconds(time);\n    this.log(\"stop\", computedTime);\n\n    this._state.cancel(computedTime);\n\n    this._state.setStateAtTime(\"stopped\", computedTime);\n\n    this._tickSource.stop(computedTime);\n\n    if (computedTime < this._lastUpdate) {\n      this.emit(\"stop\", computedTime);\n    }\n\n    return this;\n  }\n  /**\n   * Pause the clock. Pausing does not reset the tick counter.\n   * @param time The time when the clock should stop.\n   */\n\n\n  pause(time) {\n    const computedTime = this.toSeconds(time);\n\n    if (this._state.getValueAtTime(computedTime) === \"started\") {\n      this._state.setStateAtTime(\"paused\", computedTime);\n\n      this._tickSource.pause(computedTime);\n\n      if (computedTime < this._lastUpdate) {\n        this.emit(\"pause\", computedTime);\n      }\n    }\n\n    return this;\n  }\n  /**\n   * The number of times the callback was invoked. Starts counting at 0\n   * and increments after the callback was invoked.\n   */\n\n\n  get ticks() {\n    return Math.ceil(this.getTicksAtTime(this.now()));\n  }\n\n  set ticks(t) {\n    this._tickSource.ticks = t;\n  }\n  /**\n   * The time since ticks=0 that the Clock has been running. Accounts for tempo curves\n   */\n\n\n  get seconds() {\n    return this._tickSource.seconds;\n  }\n\n  set seconds(s) {\n    this._tickSource.seconds = s;\n  }\n  /**\n   * Return the elapsed seconds at the given time.\n   * @param  time  When to get the elapsed seconds\n   * @return  The number of elapsed seconds\n   */\n\n\n  getSecondsAtTime(time) {\n    return this._tickSource.getSecondsAtTime(time);\n  }\n  /**\n   * Set the clock's ticks at the given time.\n   * @param  ticks The tick value to set\n   * @param  time  When to set the tick value\n   */\n\n\n  setTicksAtTime(ticks, time) {\n    this._tickSource.setTicksAtTime(ticks, time);\n\n    return this;\n  }\n  /**\n   * Get the time of the given tick. The second argument\n   * is when to test before. Since ticks can be set (with setTicksAtTime)\n   * there may be multiple times for a given tick value.\n   * @param  tick The tick number.\n   * @param  before When to measure the tick value from.\n   * @return The time of the tick\n   */\n\n\n  getTimeOfTick(tick, before = this.now()) {\n    return this._tickSource.getTimeOfTick(tick, before);\n  }\n  /**\n   * Get the clock's ticks at the given time.\n   * @param  time  When to get the tick value\n   * @return The tick value at the given time.\n   */\n\n\n  getTicksAtTime(time) {\n    return this._tickSource.getTicksAtTime(time);\n  }\n  /**\n   * Get the time of the next tick\n   * @param  offset The tick number.\n   */\n\n\n  nextTickTime(offset, when) {\n    const computedTime = this.toSeconds(when);\n    const currentTick = this.getTicksAtTime(computedTime);\n    return this._tickSource.getTimeOfTick(currentTick + offset, computedTime);\n  }\n  /**\n   * The scheduling loop.\n   */\n\n\n  _loop() {\n    const startTime = this._lastUpdate;\n    const endTime = this.now();\n    this._lastUpdate = endTime;\n    this.log(\"loop\", startTime, endTime);\n\n    if (startTime !== endTime) {\n      // the state change events\n      this._state.forEachBetween(startTime, endTime, e => {\n        switch (e.state) {\n          case \"started\":\n            const offset = this._tickSource.getTicksAtTime(e.time);\n\n            this.emit(\"start\", e.time, offset);\n            break;\n\n          case \"stopped\":\n            if (e.time !== 0) {\n              this.emit(\"stop\", e.time);\n            }\n\n            break;\n\n          case \"paused\":\n            this.emit(\"pause\", e.time);\n            break;\n        }\n      }); // the tick callbacks\n\n\n      this._tickSource.forEachTickBetween(startTime, endTime, (time, ticks) => {\n        this.callback(time, ticks);\n      });\n    }\n  }\n  /**\n   * Returns the scheduled state at the given time.\n   * @param  time  The time to query.\n   * @return  The name of the state input in setStateAtTime.\n   * @example\n   * const clock = new Tone.Clock();\n   * clock.start(\"+0.1\");\n   * clock.getStateAtTime(\"+0.1\"); // returns \"started\"\n   */\n\n\n  getStateAtTime(time) {\n    const computedTime = this.toSeconds(time);\n    return this._state.getValueAtTime(computedTime);\n  }\n  /**\n   * Clean up\n   */\n\n\n  dispose() {\n    super.dispose();\n    this.context.off(\"tick\", this._boundLoop);\n\n    this._tickSource.dispose();\n\n    this._state.dispose();\n\n    return this;\n  }\n\n}\nEmitter.mixin(Clock);","import { Timeline } from \"./Timeline\";\nimport { Tone } from \"../Tone\";\n/**\n * Represents a single value which is gettable and settable in a timed way\n */\n\nexport class TimelineValue extends Tone {\n  /**\n   * @param initialValue The value to return if there is no scheduled values\n   */\n  constructor(initialValue) {\n    super();\n    this.name = \"TimelineValue\";\n    /**\n     * The timeline which stores the values\n     */\n\n    this._timeline = new Timeline({\n      memory: 10\n    });\n    this._initialValue = initialValue;\n  }\n  /**\n   * Set the value at the given time\n   */\n\n\n  set(value, time) {\n    this._timeline.add({\n      value,\n      time\n    });\n\n    return this;\n  }\n  /**\n   * Get the value at the given time\n   */\n\n\n  get(time) {\n    const event = this._timeline.get(time);\n\n    if (event) {\n      return event.value;\n    } else {\n      return this._initialValue;\n    }\n  }\n\n}","import { getContext } from \"../Global\";\nimport { TransportTimeClass } from \"./TransportTime\";\n/**\n * Ticks is a primitive type for encoding Time values.\n * Ticks can be constructed with or without the `new` keyword. Ticks can be passed\n * into the parameter of any method which takes time as an argument.\n * @example\n * const t = Tone.Ticks(\"4n\"); // a quarter note as ticks\n * @category Unit\n */\n\nexport class TicksClass extends TransportTimeClass {\n  constructor() {\n    super(...arguments);\n    this.name = \"Ticks\";\n    this.defaultUnits = \"i\";\n  }\n  /**\n   * Get the current time in the given units\n   */\n\n\n  _now() {\n    return this.context.transport.ticks;\n  }\n  /**\n   * Return the value of the beats in the current units\n   */\n\n\n  _beatsToUnits(beats) {\n    return this._getPPQ() * beats;\n  }\n  /**\n   * Returns the value of a second in the current units\n   */\n\n\n  _secondsToUnits(seconds) {\n    return Math.floor(seconds / (60 / this._getBpm()) * this._getPPQ());\n  }\n  /**\n   * Returns the value of a tick in the current time units\n   */\n\n\n  _ticksToUnits(ticks) {\n    return ticks;\n  }\n  /**\n   * Return the time in ticks\n   */\n\n\n  toTicks() {\n    return this.valueOf();\n  }\n  /**\n   * Return the time in seconds\n   */\n\n\n  toSeconds() {\n    return this.valueOf() / this._getPPQ() * (60 / this._getBpm());\n  }\n\n}\n/**\n * Convert a time representation to ticks\n * @category Unit\n */\n\nexport function Ticks(value, units) {\n  return new TicksClass(getContext(), value, units);\n}","import { Tone } from \"../Tone\";\nimport { isDefined } from \"./TypeCheck\";\nimport { assert } from \"./Debug\";\n/**\n * Similar to Tone.Timeline, but all events represent\n * intervals with both \"time\" and \"duration\" times. The\n * events are placed in a tree structure optimized\n * for querying an intersection point with the timeline\n * events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n * to represent the data.\n */\n\nexport class IntervalTimeline extends Tone {\n  constructor() {\n    super(...arguments);\n    this.name = \"IntervalTimeline\";\n    /**\n     * The root node of the inteval tree\n     */\n\n    this._root = null;\n    /**\n     * Keep track of the length of the timeline.\n     */\n\n    this._length = 0;\n  }\n  /**\n   * The event to add to the timeline. All events must\n   * have a time and duration value\n   * @param  event  The event to add to the timeline\n   */\n\n\n  add(event) {\n    assert(isDefined(event.time), \"Events must have a time property\");\n    assert(isDefined(event.duration), \"Events must have a duration parameter\");\n    event.time = event.time.valueOf();\n    let node = new IntervalNode(event.time, event.time + event.duration, event);\n\n    if (this._root === null) {\n      this._root = node;\n    } else {\n      this._root.insert(node);\n    }\n\n    this._length++; // Restructure tree to be balanced\n\n    while (node !== null) {\n      node.updateHeight();\n      node.updateMax();\n\n      this._rebalance(node);\n\n      node = node.parent;\n    }\n\n    return this;\n  }\n  /**\n   * Remove an event from the timeline.\n   * @param  event  The event to remove from the timeline\n   */\n\n\n  remove(event) {\n    if (this._root !== null) {\n      const results = [];\n\n      this._root.search(event.time, results);\n\n      for (const node of results) {\n        if (node.event === event) {\n          this._removeNode(node);\n\n          this._length--;\n          break;\n        }\n      }\n    }\n\n    return this;\n  }\n  /**\n   * The number of items in the timeline.\n   * @readOnly\n   */\n\n\n  get length() {\n    return this._length;\n  }\n  /**\n   * Remove events whose time time is after the given time\n   * @param  after  The time to query.\n   */\n\n\n  cancel(after) {\n    this.forEachFrom(after, event => this.remove(event));\n    return this;\n  }\n  /**\n   * Set the root node as the given node\n   */\n\n\n  _setRoot(node) {\n    this._root = node;\n\n    if (this._root !== null) {\n      this._root.parent = null;\n    }\n  }\n  /**\n   * Replace the references to the node in the node's parent\n   * with the replacement node.\n   */\n\n\n  _replaceNodeInParent(node, replacement) {\n    if (node.parent !== null) {\n      if (node.isLeftChild()) {\n        node.parent.left = replacement;\n      } else {\n        node.parent.right = replacement;\n      }\n\n      this._rebalance(node.parent);\n    } else {\n      this._setRoot(replacement);\n    }\n  }\n  /**\n   * Remove the node from the tree and replace it with\n   * a successor which follows the schema.\n   */\n\n\n  _removeNode(node) {\n    if (node.left === null && node.right === null) {\n      this._replaceNodeInParent(node, null);\n    } else if (node.right === null) {\n      this._replaceNodeInParent(node, node.left);\n    } else if (node.left === null) {\n      this._replaceNodeInParent(node, node.right);\n    } else {\n      const balance = node.getBalance();\n      let replacement;\n      let temp = null;\n\n      if (balance > 0) {\n        if (node.left.right === null) {\n          replacement = node.left;\n          replacement.right = node.right;\n          temp = replacement;\n        } else {\n          replacement = node.left.right;\n\n          while (replacement.right !== null) {\n            replacement = replacement.right;\n          }\n\n          if (replacement.parent) {\n            replacement.parent.right = replacement.left;\n            temp = replacement.parent;\n            replacement.left = node.left;\n            replacement.right = node.right;\n          }\n        }\n      } else if (node.right.left === null) {\n        replacement = node.right;\n        replacement.left = node.left;\n        temp = replacement;\n      } else {\n        replacement = node.right.left;\n\n        while (replacement.left !== null) {\n          replacement = replacement.left;\n        }\n\n        if (replacement.parent) {\n          replacement.parent.left = replacement.right;\n          temp = replacement.parent;\n          replacement.left = node.left;\n          replacement.right = node.right;\n        }\n      }\n\n      if (node.parent !== null) {\n        if (node.isLeftChild()) {\n          node.parent.left = replacement;\n        } else {\n          node.parent.right = replacement;\n        }\n      } else {\n        this._setRoot(replacement);\n      }\n\n      if (temp) {\n        this._rebalance(temp);\n      }\n    }\n\n    node.dispose();\n  }\n  /**\n   * Rotate the tree to the left\n   */\n\n\n  _rotateLeft(node) {\n    const parent = node.parent;\n    const isLeftChild = node.isLeftChild(); // Make node.right the new root of this sub tree (instead of node)\n\n    const pivotNode = node.right;\n\n    if (pivotNode) {\n      node.right = pivotNode.left;\n      pivotNode.left = node;\n    }\n\n    if (parent !== null) {\n      if (isLeftChild) {\n        parent.left = pivotNode;\n      } else {\n        parent.right = pivotNode;\n      }\n    } else {\n      this._setRoot(pivotNode);\n    }\n  }\n  /**\n   * Rotate the tree to the right\n   */\n\n\n  _rotateRight(node) {\n    const parent = node.parent;\n    const isLeftChild = node.isLeftChild(); // Make node.left the new root of this sub tree (instead of node)\n\n    const pivotNode = node.left;\n\n    if (pivotNode) {\n      node.left = pivotNode.right;\n      pivotNode.right = node;\n    }\n\n    if (parent !== null) {\n      if (isLeftChild) {\n        parent.left = pivotNode;\n      } else {\n        parent.right = pivotNode;\n      }\n    } else {\n      this._setRoot(pivotNode);\n    }\n  }\n  /**\n   * Balance the BST\n   */\n\n\n  _rebalance(node) {\n    const balance = node.getBalance();\n\n    if (balance > 1 && node.left) {\n      if (node.left.getBalance() < 0) {\n        this._rotateLeft(node.left);\n      } else {\n        this._rotateRight(node);\n      }\n    } else if (balance < -1 && node.right) {\n      if (node.right.getBalance() > 0) {\n        this._rotateRight(node.right);\n      } else {\n        this._rotateLeft(node);\n      }\n    }\n  }\n  /**\n   * Get an event whose time and duration span the give time. Will\n   * return the match whose \"time\" value is closest to the given time.\n   * @return  The event which spans the desired time\n   */\n\n\n  get(time) {\n    if (this._root !== null) {\n      const results = [];\n\n      this._root.search(time, results);\n\n      if (results.length > 0) {\n        let max = results[0];\n\n        for (let i = 1; i < results.length; i++) {\n          if (results[i].low > max.low) {\n            max = results[i];\n          }\n        }\n\n        return max.event;\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Iterate over everything in the timeline.\n   * @param  callback The callback to invoke with every item\n   */\n\n\n  forEach(callback) {\n    if (this._root !== null) {\n      const allNodes = [];\n\n      this._root.traverse(node => allNodes.push(node));\n\n      allNodes.forEach(node => {\n        if (node.event) {\n          callback(node.event);\n        }\n      });\n    }\n\n    return this;\n  }\n  /**\n   * Iterate over everything in the array in which the given time\n   * overlaps with the time and duration time of the event.\n   * @param  time The time to check if items are overlapping\n   * @param  callback The callback to invoke with every item\n   */\n\n\n  forEachAtTime(time, callback) {\n    if (this._root !== null) {\n      const results = [];\n\n      this._root.search(time, results);\n\n      results.forEach(node => {\n        if (node.event) {\n          callback(node.event);\n        }\n      });\n    }\n\n    return this;\n  }\n  /**\n   * Iterate over everything in the array in which the time is greater\n   * than or equal to the given time.\n   * @param  time The time to check if items are before\n   * @param  callback The callback to invoke with every item\n   */\n\n\n  forEachFrom(time, callback) {\n    if (this._root !== null) {\n      const results = [];\n\n      this._root.searchAfter(time, results);\n\n      results.forEach(node => {\n        if (node.event) {\n          callback(node.event);\n        }\n      });\n    }\n\n    return this;\n  }\n  /**\n   * Clean up\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    if (this._root !== null) {\n      this._root.traverse(node => node.dispose());\n    }\n\n    this._root = null;\n    return this;\n  }\n\n} //-------------------------------------\n// \tINTERVAL NODE HELPER\n//-------------------------------------\n\n/**\n * Represents a node in the binary search tree, with the addition\n * of a \"high\" value which keeps track of the highest value of\n * its children.\n * References:\n * https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/\n * http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf\n * @param low\n * @param high\n */\n\nclass IntervalNode {\n  constructor(low, high, event) {\n    // the nodes to the left\n    this._left = null; // the nodes to the right\n\n    this._right = null; // the parent node\n\n    this.parent = null; // the number of child nodes\n\n    this.height = 0;\n    this.event = event; // the low value\n\n    this.low = low; // the high value\n\n    this.high = high; // the high value for this and all child nodes\n\n    this.max = this.high;\n  }\n  /**\n   * Insert a node into the correct spot in the tree\n   */\n\n\n  insert(node) {\n    if (node.low <= this.low) {\n      if (this.left === null) {\n        this.left = node;\n      } else {\n        this.left.insert(node);\n      }\n    } else if (this.right === null) {\n      this.right = node;\n    } else {\n      this.right.insert(node);\n    }\n  }\n  /**\n   * Search the tree for nodes which overlap\n   * with the given point\n   * @param  point  The point to query\n   * @param  results  The array to put the results\n   */\n\n\n  search(point, results) {\n    // If p is to the right of the rightmost point of any interval\n    // in this node and all children, there won't be any matches.\n    if (point > this.max) {\n      return;\n    } // Search left children\n\n\n    if (this.left !== null) {\n      this.left.search(point, results);\n    } // Check this node\n\n\n    if (this.low <= point && this.high > point) {\n      results.push(this);\n    } // If p is to the left of the time of this interval,\n    // then it can't be in any child to the right.\n\n\n    if (this.low > point) {\n      return;\n    } // Search right children\n\n\n    if (this.right !== null) {\n      this.right.search(point, results);\n    }\n  }\n  /**\n   * Search the tree for nodes which are less\n   * than the given point\n   * @param  point  The point to query\n   * @param  results  The array to put the results\n   */\n\n\n  searchAfter(point, results) {\n    // Check this node\n    if (this.low >= point) {\n      results.push(this);\n\n      if (this.left !== null) {\n        this.left.searchAfter(point, results);\n      }\n    } // search the right side\n\n\n    if (this.right !== null) {\n      this.right.searchAfter(point, results);\n    }\n  }\n  /**\n   * Invoke the callback on this element and both it's branches\n   * @param  {Function}  callback\n   */\n\n\n  traverse(callback) {\n    callback(this);\n\n    if (this.left !== null) {\n      this.left.traverse(callback);\n    }\n\n    if (this.right !== null) {\n      this.right.traverse(callback);\n    }\n  }\n  /**\n   * Update the height of the node\n   */\n\n\n  updateHeight() {\n    if (this.left !== null && this.right !== null) {\n      this.height = Math.max(this.left.height, this.right.height) + 1;\n    } else if (this.right !== null) {\n      this.height = this.right.height + 1;\n    } else if (this.left !== null) {\n      this.height = this.left.height + 1;\n    } else {\n      this.height = 0;\n    }\n  }\n  /**\n   * Update the height of the node\n   */\n\n\n  updateMax() {\n    this.max = this.high;\n\n    if (this.left !== null) {\n      this.max = Math.max(this.max, this.left.max);\n    }\n\n    if (this.right !== null) {\n      this.max = Math.max(this.max, this.right.max);\n    }\n  }\n  /**\n   * The balance is how the leafs are distributed on the node\n   * @return  Negative numbers are balanced to the right\n   */\n\n\n  getBalance() {\n    let balance = 0;\n\n    if (this.left !== null && this.right !== null) {\n      balance = this.left.height - this.right.height;\n    } else if (this.left !== null) {\n      balance = this.left.height + 1;\n    } else if (this.right !== null) {\n      balance = -(this.right.height + 1);\n    }\n\n    return balance;\n  }\n  /**\n   * @returns true if this node is the left child of its parent\n   */\n\n\n  isLeftChild() {\n    return this.parent !== null && this.parent.left === this;\n  }\n  /**\n   * get/set the left node\n   */\n\n\n  get left() {\n    return this._left;\n  }\n\n  set left(node) {\n    this._left = node;\n\n    if (node !== null) {\n      node.parent = this;\n    }\n\n    this.updateHeight();\n    this.updateMax();\n  }\n  /**\n   * get/set the right node\n   */\n\n\n  get right() {\n    return this._right;\n  }\n\n  set right(node) {\n    this._right = node;\n\n    if (node !== null) {\n      node.parent = this;\n    }\n\n    this.updateHeight();\n    this.updateMax();\n  }\n  /**\n   * null out references.\n   */\n\n\n  dispose() {\n    this.parent = null;\n    this._left = null;\n    this._right = null;\n    this.event = null;\n  }\n\n}","import { noOp } from \"../util/Interface\";\n/**\n * TransportEvent is an internal class used by [[Transport]]\n * to schedule events. Do no invoke this class directly, it is\n * handled from within Tone.Transport.\n */\n\nexport class TransportEvent {\n  /**\n   * @param transport The transport object which the event belongs to\n   */\n  constructor(transport, opts) {\n    /**\n     * The unique id of the event\n     */\n    this.id = TransportEvent._eventId++;\n    const options = Object.assign(TransportEvent.getDefaults(), opts);\n    this.transport = transport;\n    this.callback = options.callback;\n    this._once = options.once;\n    this.time = options.time;\n  }\n\n  static getDefaults() {\n    return {\n      callback: noOp,\n      once: false,\n      time: 0\n    };\n  }\n  /**\n   * Invoke the event callback.\n   * @param  time  The AudioContext time in seconds of the event\n   */\n\n\n  invoke(time) {\n    if (this.callback) {\n      this.callback(time);\n\n      if (this._once) {\n        this.transport.clear(this.id);\n      }\n    }\n  }\n  /**\n   * Clean up\n   */\n\n\n  dispose() {\n    this.callback = undefined;\n    return this;\n  }\n\n}\n/**\n * Current ID counter\n */\n\nTransportEvent._eventId = 0;","import { TicksClass } from \"../type/Ticks\";\nimport { TransportEvent } from \"./TransportEvent\";\n/**\n * TransportRepeatEvent is an internal class used by Tone.Transport\n * to schedule repeat events. This class should not be instantiated directly.\n */\n\nexport class TransportRepeatEvent extends TransportEvent {\n  /**\n   * @param transport The transport object which the event belongs to\n   */\n  constructor(transport, opts) {\n    super(transport, opts);\n    /**\n     * The ID of the current timeline event\n     */\n\n    this._currentId = -1;\n    /**\n     * The ID of the next timeline event\n     */\n\n    this._nextId = -1;\n    /**\n     * The time of the next event\n     */\n\n    this._nextTick = this.time;\n    /**\n     * a reference to the bound start method\n     */\n\n    this._boundRestart = this._restart.bind(this);\n    const options = Object.assign(TransportRepeatEvent.getDefaults(), opts);\n    this.duration = new TicksClass(transport.context, options.duration).valueOf();\n    this._interval = new TicksClass(transport.context, options.interval).valueOf();\n    this._nextTick = options.time;\n    this.transport.on(\"start\", this._boundRestart);\n    this.transport.on(\"loopStart\", this._boundRestart);\n    this.context = this.transport.context;\n\n    this._restart();\n  }\n\n  static getDefaults() {\n    return Object.assign({}, TransportEvent.getDefaults(), {\n      duration: Infinity,\n      interval: 1,\n      once: false\n    });\n  }\n  /**\n   * Invoke the callback. Returns the tick time which\n   * the next event should be scheduled at.\n   * @param  time  The AudioContext time in seconds of the event\n   */\n\n\n  invoke(time) {\n    // create more events if necessary\n    this._createEvents(time); // call the super class\n\n\n    super.invoke(time);\n  }\n  /**\n   * Push more events onto the timeline to keep up with the position of the timeline\n   */\n\n\n  _createEvents(time) {\n    // schedule the next event\n    const ticks = this.transport.getTicksAtTime(time);\n\n    if (ticks >= this.time && ticks >= this._nextTick && this._nextTick + this._interval < this.time + this.duration) {\n      this._nextTick += this._interval;\n      this._currentId = this._nextId;\n      this._nextId = this.transport.scheduleOnce(this.invoke.bind(this), new TicksClass(this.context, this._nextTick).toSeconds());\n    }\n  }\n  /**\n   * Push more events onto the timeline to keep up with the position of the timeline\n   */\n\n\n  _restart(time) {\n    this.transport.clear(this._currentId);\n    this.transport.clear(this._nextId);\n    this._nextTick = this.time;\n    const ticks = this.transport.getTicksAtTime(time);\n\n    if (ticks > this.time) {\n      this._nextTick = this.time + Math.ceil((ticks - this.time) / this._interval) * this._interval;\n    }\n\n    this._currentId = this.transport.scheduleOnce(this.invoke.bind(this), new TicksClass(this.context, this._nextTick).toSeconds());\n    this._nextTick += this._interval;\n    this._nextId = this.transport.scheduleOnce(this.invoke.bind(this), new TicksClass(this.context, this._nextTick).toSeconds());\n  }\n  /**\n   * Clean up\n   */\n\n\n  dispose() {\n    super.dispose();\n    this.transport.clear(this._currentId);\n    this.transport.clear(this._nextId);\n    this.transport.off(\"start\", this._boundRestart);\n    this.transport.off(\"loopStart\", this._boundRestart);\n    return this;\n  }\n\n}","import { TimeClass } from \"../../core/type/Time\";\nimport { TimelineValue } from \"../../core/util/TimelineValue\";\nimport { onContextClose, onContextInit } from \"../context/ContextInitialization\";\nimport { Gain } from \"../context/Gain\";\nimport { ToneWithContext } from \"../context/ToneWithContext\";\nimport { TicksClass } from \"../type/Ticks\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { readOnly, writable } from \"../util/Interface\";\nimport { IntervalTimeline } from \"../util/IntervalTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isArray, isDefined } from \"../util/TypeCheck\";\nimport { Clock } from \"./Clock\";\nimport { TransportEvent } from \"./TransportEvent\";\nimport { TransportRepeatEvent } from \"./TransportRepeatEvent\";\n/**\n * Transport for timing musical events.\n * Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)\n * Transport timing events pass in the exact time of the scheduled event\n * in the argument of the callback function. Pass that time value to the object\n * you're scheduling. <br><br>\n * A single transport is created for you when the library is initialized.\n * <br><br>\n * The transport emits the events: \"start\", \"stop\", \"pause\", and \"loop\" which are\n * called with the time of that event as the argument.\n *\n * @example\n * const osc = new Tone.Oscillator().toDestination();\n * // repeated event every 8th note\n * Tone.Transport.scheduleRepeat((time) => {\n * \t// use the callback time to schedule events\n * \tosc.start(time).stop(time + 0.1);\n * }, \"8n\");\n * // transport must be started before it starts invoking events\n * Tone.Transport.start();\n * @category Core\n */\n\nexport class Transport extends ToneWithContext {\n  constructor() {\n    super(optionsFromArguments(Transport.getDefaults(), arguments));\n    this.name = \"Transport\"; //-------------------------------------\n    // \tLOOPING\n    //-------------------------------------\n\n    /**\n     * If the transport loops or not.\n     */\n\n    this._loop = new TimelineValue(false);\n    /**\n     * The loop start position in ticks\n     */\n\n    this._loopStart = 0;\n    /**\n     * The loop end position in ticks\n     */\n\n    this._loopEnd = 0; //-------------------------------------\n    // \tTIMELINE EVENTS\n    //-------------------------------------\n\n    /**\n     * All the events in an object to keep track by ID\n     */\n\n    this._scheduledEvents = {};\n    /**\n     * The scheduled events.\n     */\n\n    this._timeline = new Timeline();\n    /**\n     * Repeated events\n     */\n\n    this._repeatedEvents = new IntervalTimeline();\n    /**\n     * All of the synced Signals\n     */\n\n    this._syncedSignals = [];\n    /**\n     * The swing amount\n     */\n\n    this._swingAmount = 0;\n    const options = optionsFromArguments(Transport.getDefaults(), arguments); // CLOCK/TEMPO\n\n    this._ppq = options.ppq;\n    this._clock = new Clock({\n      callback: this._processTick.bind(this),\n      context: this.context,\n      frequency: 0,\n      units: \"bpm\"\n    });\n\n    this._bindClockEvents();\n\n    this.bpm = this._clock.frequency;\n    this._clock.frequency.multiplier = options.ppq;\n    this.bpm.setValueAtTime(options.bpm, 0);\n    readOnly(this, \"bpm\");\n    this._timeSignature = options.timeSignature; // SWING\n\n    this._swingTicks = options.ppq / 2; // 8n\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneWithContext.getDefaults(), {\n      bpm: 120,\n      loopEnd: \"4m\",\n      loopStart: 0,\n      ppq: 192,\n      swing: 0,\n      swingSubdivision: \"8n\",\n      timeSignature: 4\n    });\n  } //-------------------------------------\n  // \tTICKS\n  //-------------------------------------\n\n  /**\n   * called on every tick\n   * @param  tickTime clock relative tick time\n   */\n\n\n  _processTick(tickTime, ticks) {\n    // handle swing\n    if (this._swingAmount > 0 && ticks % this._ppq !== 0 && // not on a downbeat\n    ticks % (this._swingTicks * 2) !== 0) {\n      // add some swing\n      const progress = ticks % (this._swingTicks * 2) / (this._swingTicks * 2);\n\n      const amount = Math.sin(progress * Math.PI) * this._swingAmount;\n\n      tickTime += new TicksClass(this.context, this._swingTicks * 2 / 3).toSeconds() * amount;\n    } // do the loop test\n\n\n    if (this._loop.get(tickTime)) {\n      if (ticks >= this._loopEnd) {\n        this.emit(\"loopEnd\", tickTime);\n\n        this._clock.setTicksAtTime(this._loopStart, tickTime);\n\n        ticks = this._loopStart;\n        this.emit(\"loopStart\", tickTime, this._clock.getSecondsAtTime(tickTime));\n        this.emit(\"loop\", tickTime);\n      }\n    } // invoke the timeline events scheduled on this tick\n\n\n    this._timeline.forEachAtTime(ticks, event => event.invoke(tickTime));\n  } //-------------------------------------\n  // \tSCHEDULABLE EVENTS\n  //-------------------------------------\n\n  /**\n   * Schedule an event along the timeline.\n   * @param callback The callback to be invoked at the time.\n   * @param time The time to invoke the callback at.\n   * @return The id of the event which can be used for canceling the event.\n   * @example\n   * // schedule an event on the 16th measure\n   * Tone.Transport.schedule((time) => {\n   * \t// invoked on measure 16\n   * \tconsole.log(\"measure 16!\");\n   * }, \"16:0:0\");\n   */\n\n\n  schedule(callback, time) {\n    const event = new TransportEvent(this, {\n      callback,\n      time: new TransportTimeClass(this.context, time).toTicks()\n    });\n    return this._addEvent(event, this._timeline);\n  }\n  /**\n   * Schedule a repeated event along the timeline. The event will fire\n   * at the `interval` starting at the `startTime` and for the specified\n   * `duration`.\n   * @param  callback   The callback to invoke.\n   * @param  interval   The duration between successive callbacks. Must be a positive number.\n   * @param  startTime  When along the timeline the events should start being invoked.\n   * @param  duration How long the event should repeat.\n   * @return  The ID of the scheduled event. Use this to cancel the event.\n   * @example\n   * const osc = new Tone.Oscillator().toDestination().start();\n   * // a callback invoked every eighth note after the first measure\n   * Tone.Transport.scheduleRepeat((time) => {\n   * \tosc.start(time).stop(time + 0.1);\n   * }, \"8n\", \"1m\");\n   */\n\n\n  scheduleRepeat(callback, interval, startTime, duration = Infinity) {\n    const event = new TransportRepeatEvent(this, {\n      callback,\n      duration: new TimeClass(this.context, duration).toTicks(),\n      interval: new TimeClass(this.context, interval).toTicks(),\n      time: new TransportTimeClass(this.context, startTime).toTicks()\n    }); // kick it off if the Transport is started\n    // @ts-ignore\n\n    return this._addEvent(event, this._repeatedEvents);\n  }\n  /**\n   * Schedule an event that will be removed after it is invoked.\n   * @param callback The callback to invoke once.\n   * @param time The time the callback should be invoked.\n   * @returns The ID of the scheduled event.\n   */\n\n\n  scheduleOnce(callback, time) {\n    const event = new TransportEvent(this, {\n      callback,\n      once: true,\n      time: new TransportTimeClass(this.context, time).toTicks()\n    });\n    return this._addEvent(event, this._timeline);\n  }\n  /**\n   * Clear the passed in event id from the timeline\n   * @param eventId The id of the event.\n   */\n\n\n  clear(eventId) {\n    if (this._scheduledEvents.hasOwnProperty(eventId)) {\n      const item = this._scheduledEvents[eventId.toString()];\n\n      item.timeline.remove(item.event);\n      item.event.dispose();\n      delete this._scheduledEvents[eventId.toString()];\n    }\n\n    return this;\n  }\n  /**\n   * Add an event to the correct timeline. Keep track of the\n   * timeline it was added to.\n   * @returns the event id which was just added\n   */\n\n\n  _addEvent(event, timeline) {\n    this._scheduledEvents[event.id.toString()] = {\n      event,\n      timeline\n    };\n    timeline.add(event);\n    return event.id;\n  }\n  /**\n   * Remove scheduled events from the timeline after\n   * the given time. Repeated events will be removed\n   * if their startTime is after the given time\n   * @param after Clear all events after this time.\n   */\n\n\n  cancel(after = 0) {\n    const computedAfter = this.toTicks(after);\n\n    this._timeline.forEachFrom(computedAfter, event => this.clear(event.id));\n\n    this._repeatedEvents.forEachFrom(computedAfter, event => this.clear(event.id));\n\n    return this;\n  } //-------------------------------------\n  // \tSTART/STOP/PAUSE\n  //-------------------------------------\n\n  /**\n   * Bind start/stop/pause events from the clock and emit them.\n   */\n\n\n  _bindClockEvents() {\n    this._clock.on(\"start\", (time, offset) => {\n      offset = new TicksClass(this.context, offset).toSeconds();\n      this.emit(\"start\", time, offset);\n    });\n\n    this._clock.on(\"stop\", time => {\n      this.emit(\"stop\", time);\n    });\n\n    this._clock.on(\"pause\", time => {\n      this.emit(\"pause\", time);\n    });\n  }\n  /**\n   * Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"\n   */\n\n\n  get state() {\n    return this._clock.getStateAtTime(this.now());\n  }\n  /**\n   * Start the transport and all sources synced to the transport.\n   * @param  time The time when the transport should start.\n   * @param  offset The timeline offset to start the transport.\n   * @example\n   * // start the transport in one second starting at beginning of the 5th measure.\n   * Tone.Transport.start(\"+1\", \"4:0:0\");\n   */\n\n\n  start(time, offset) {\n    let offsetTicks;\n\n    if (isDefined(offset)) {\n      offsetTicks = this.toTicks(offset);\n    } // start the clock\n\n\n    this._clock.start(time, offsetTicks);\n\n    return this;\n  }\n  /**\n   * Stop the transport and all sources synced to the transport.\n   * @param time The time when the transport should stop.\n   * @example\n   * Tone.Transport.stop();\n   */\n\n\n  stop(time) {\n    this._clock.stop(time);\n\n    return this;\n  }\n  /**\n   * Pause the transport and all sources synced to the transport.\n   */\n\n\n  pause(time) {\n    this._clock.pause(time);\n\n    return this;\n  }\n  /**\n   * Toggle the current state of the transport. If it is\n   * started, it will stop it, otherwise it will start the Transport.\n   * @param  time The time of the event\n   */\n\n\n  toggle(time) {\n    time = this.toSeconds(time);\n\n    if (this._clock.getStateAtTime(time) !== \"started\") {\n      this.start(time);\n    } else {\n      this.stop(time);\n    }\n\n    return this;\n  } //-------------------------------------\n  // \tSETTERS/GETTERS\n  //-------------------------------------\n\n  /**\n   * The time signature as just the numerator over 4.\n   * For example 4/4 would be just 4 and 6/8 would be 3.\n   * @example\n   * // common time\n   * Tone.Transport.timeSignature = 4;\n   * // 7/8\n   * Tone.Transport.timeSignature = [7, 8];\n   * // this will be reduced to a single number\n   * Tone.Transport.timeSignature; // returns 3.5\n   */\n\n\n  get timeSignature() {\n    return this._timeSignature;\n  }\n\n  set timeSignature(timeSig) {\n    if (isArray(timeSig)) {\n      timeSig = timeSig[0] / timeSig[1] * 4;\n    }\n\n    this._timeSignature = timeSig;\n  }\n  /**\n   * When the Transport.loop = true, this is the starting position of the loop.\n   */\n\n\n  get loopStart() {\n    return new TimeClass(this.context, this._loopStart, \"i\").toSeconds();\n  }\n\n  set loopStart(startPosition) {\n    this._loopStart = this.toTicks(startPosition);\n  }\n  /**\n   * When the Transport.loop = true, this is the ending position of the loop.\n   */\n\n\n  get loopEnd() {\n    return new TimeClass(this.context, this._loopEnd, \"i\").toSeconds();\n  }\n\n  set loopEnd(endPosition) {\n    this._loopEnd = this.toTicks(endPosition);\n  }\n  /**\n   * If the transport loops or not.\n   */\n\n\n  get loop() {\n    return this._loop.get(this.now());\n  }\n\n  set loop(loop) {\n    this._loop.set(loop, this.now());\n  }\n  /**\n   * Set the loop start and stop at the same time.\n   * @example\n   * // loop over the first measure\n   * Tone.Transport.setLoopPoints(0, \"1m\");\n   * Tone.Transport.loop = true;\n   */\n\n\n  setLoopPoints(startPosition, endPosition) {\n    this.loopStart = startPosition;\n    this.loopEnd = endPosition;\n    return this;\n  }\n  /**\n   * The swing value. Between 0-1 where 1 equal to the note + half the subdivision.\n   */\n\n\n  get swing() {\n    return this._swingAmount;\n  }\n\n  set swing(amount) {\n    // scale the values to a normal range\n    this._swingAmount = amount;\n  }\n  /**\n   * Set the subdivision which the swing will be applied to.\n   * The default value is an 8th note. Value must be less\n   * than a quarter note.\n   */\n\n\n  get swingSubdivision() {\n    return new TicksClass(this.context, this._swingTicks).toNotation();\n  }\n\n  set swingSubdivision(subdivision) {\n    this._swingTicks = this.toTicks(subdivision);\n  }\n  /**\n   * The Transport's position in Bars:Beats:Sixteenths.\n   * Setting the value will jump to that position right away.\n   */\n\n\n  get position() {\n    const now = this.now();\n\n    const ticks = this._clock.getTicksAtTime(now);\n\n    return new TicksClass(this.context, ticks).toBarsBeatsSixteenths();\n  }\n\n  set position(progress) {\n    const ticks = this.toTicks(progress);\n    this.ticks = ticks;\n  }\n  /**\n   * The Transport's position in seconds\n   * Setting the value will jump to that position right away.\n   */\n\n\n  get seconds() {\n    return this._clock.seconds;\n  }\n\n  set seconds(s) {\n    const now = this.now();\n\n    const ticks = this._clock.frequency.timeToTicks(s, now);\n\n    this.ticks = ticks;\n  }\n  /**\n   * The Transport's loop position as a normalized value. Always\n   * returns 0 if the transport if loop is not true.\n   */\n\n\n  get progress() {\n    if (this.loop) {\n      const now = this.now();\n\n      const ticks = this._clock.getTicksAtTime(now);\n\n      return (ticks - this._loopStart) / (this._loopEnd - this._loopStart);\n    } else {\n      return 0;\n    }\n  }\n  /**\n   * The transports current tick position.\n   */\n\n\n  get ticks() {\n    return this._clock.ticks;\n  }\n\n  set ticks(t) {\n    if (this._clock.ticks !== t) {\n      const now = this.now(); // stop everything synced to the transport\n\n      if (this.state === \"started\") {\n        const ticks = this._clock.getTicksAtTime(now); // schedule to start on the next tick, #573\n\n\n        const time = this._clock.getTimeOfTick(Math.ceil(ticks));\n\n        this.emit(\"stop\", time);\n\n        this._clock.setTicksAtTime(t, time); // restart it with the new time\n\n\n        this.emit(\"start\", time, this._clock.getSecondsAtTime(time));\n      } else {\n        this._clock.setTicksAtTime(t, now);\n      }\n    }\n  }\n  /**\n   * Get the clock's ticks at the given time.\n   * @param  time  When to get the tick value\n   * @return The tick value at the given time.\n   */\n\n\n  getTicksAtTime(time) {\n    return Math.round(this._clock.getTicksAtTime(time));\n  }\n  /**\n   * Return the elapsed seconds at the given time.\n   * @param  time  When to get the elapsed seconds\n   * @return  The number of elapsed seconds\n   */\n\n\n  getSecondsAtTime(time) {\n    return this._clock.getSecondsAtTime(time);\n  }\n  /**\n   * Pulses Per Quarter note. This is the smallest resolution\n   * the Transport timing supports. This should be set once\n   * on initialization and not set again. Changing this value\n   * after other objects have been created can cause problems.\n   */\n\n\n  get PPQ() {\n    return this._clock.frequency.multiplier;\n  }\n\n  set PPQ(ppq) {\n    this._clock.frequency.multiplier = ppq;\n  } //-------------------------------------\n  // \tSYNCING\n  //-------------------------------------\n\n  /**\n   * Returns the time aligned to the next subdivision\n   * of the Transport. If the Transport is not started,\n   * it will return 0.\n   * Note: this will not work precisely during tempo ramps.\n   * @param  subdivision  The subdivision to quantize to\n   * @return  The context time of the next subdivision.\n   * @example\n   * // the transport must be started, otherwise returns 0\n   * Tone.Transport.start();\n   * Tone.Transport.nextSubdivision(\"4n\");\n   */\n\n\n  nextSubdivision(subdivision) {\n    subdivision = this.toTicks(subdivision);\n\n    if (this.state !== \"started\") {\n      // if the transport's not started, return 0\n      return 0;\n    } else {\n      const now = this.now(); // the remainder of the current ticks and the subdivision\n\n      const transportPos = this.getTicksAtTime(now);\n      const remainingTicks = subdivision - transportPos % subdivision;\n      return this._clock.nextTickTime(remainingTicks, now);\n    }\n  }\n  /**\n   * Attaches the signal to the tempo control signal so that\n   * any changes in the tempo will change the signal in the same\n   * ratio.\n   *\n   * @param signal\n   * @param ratio Optionally pass in the ratio between the two signals.\n   * \t\t\tOtherwise it will be computed based on their current values.\n   */\n\n\n  syncSignal(signal, ratio) {\n    if (!ratio) {\n      // get the sync ratio\n      const now = this.now();\n\n      if (signal.getValueAtTime(now) !== 0) {\n        const bpm = this.bpm.getValueAtTime(now);\n        const computedFreq = 1 / (60 / bpm / this.PPQ);\n        ratio = signal.getValueAtTime(now) / computedFreq;\n      } else {\n        ratio = 0;\n      }\n    }\n\n    const ratioSignal = new Gain(ratio); // @ts-ignore\n\n    this.bpm.connect(ratioSignal); // @ts-ignore\n\n    ratioSignal.connect(signal._param);\n\n    this._syncedSignals.push({\n      initial: signal.value,\n      ratio: ratioSignal,\n      signal\n    });\n\n    signal.value = 0;\n    return this;\n  }\n  /**\n   * Unsyncs a previously synced signal from the transport's control.\n   * See Transport.syncSignal.\n   */\n\n\n  unsyncSignal(signal) {\n    for (let i = this._syncedSignals.length - 1; i >= 0; i--) {\n      const syncedSignal = this._syncedSignals[i];\n\n      if (syncedSignal.signal === signal) {\n        syncedSignal.ratio.dispose();\n        syncedSignal.signal.value = syncedSignal.initial;\n\n        this._syncedSignals.splice(i, 1);\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._clock.dispose();\n\n    writable(this, \"bpm\");\n\n    this._timeline.dispose();\n\n    this._repeatedEvents.dispose();\n\n    return this;\n  }\n\n}\nEmitter.mixin(Transport); //-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\n\nonContextInit(context => {\n  context.transport = new Transport({\n    context\n  });\n});\nonContextClose(context => {\n  context.transport.dispose();\n});","import { Param } from \"../context/Param\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode } from \"./ToneAudioNode\";\n/**\n * Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface).\n * @category Core\n * @offline 0.5 1\n * @example\n * const delay = new Tone.Delay(0.1).toDestination();\n * // connect the signal to both the delay and the destination\n * const pulse = new Tone.PulseOscillator().fan(delay, Tone.Destination);\n * // start and stop the pulse\n * pulse.start(0).stop(0.01);\n */\n\nexport class Delay extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]));\n    this.name = \"Delay\";\n    const options = optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]);\n    const maxDelayInSeconds = this.toSeconds(options.maxDelay);\n    this._maxDelay = Math.max(maxDelayInSeconds, this.toSeconds(options.delayTime));\n    this._delayNode = this.input = this.output = this.context.createDelay(maxDelayInSeconds);\n    this.delayTime = new Param({\n      context: this.context,\n      param: this._delayNode.delayTime,\n      units: \"time\",\n      value: options.delayTime,\n      minValue: 0,\n      maxValue: this.maxDelay\n    });\n    readOnly(this, \"delayTime\");\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      delayTime: 0,\n      maxDelay: 1\n    });\n  }\n  /**\n   * The maximum delay time. This cannot be changed after\n   * the value is passed into the constructor.\n   */\n\n\n  get maxDelay() {\n    return this._maxDelay;\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._delayNode.disconnect();\n\n    this.delayTime.dispose();\n    return this;\n  }\n\n}","import { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * Volume is a simple volume node, useful for creating a volume fader.\n *\n * @example\n * const vol = new Tone.Volume(-12).toDestination();\n * const osc = new Tone.Oscillator().connect(vol).start();\n * @category Component\n */\n\nexport class Volume extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]));\n    this.name = \"Volume\";\n    const options = optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]);\n    this.input = this.output = new Gain({\n      context: this.context,\n      gain: options.volume,\n      units: \"decibels\"\n    });\n    this.volume = this.output.gain;\n    readOnly(this, \"volume\");\n    this._unmutedVolume = options.volume; // set the mute initially\n\n    this.mute = options.mute;\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      mute: false,\n      volume: 0\n    });\n  }\n  /**\n   * Mute the output.\n   * @example\n   * const vol = new Tone.Volume(-12).toDestination();\n   * const osc = new Tone.Oscillator().connect(vol).start();\n   * // mute the output\n   * vol.mute = true;\n   */\n\n\n  get mute() {\n    return this.volume.value === -Infinity;\n  }\n\n  set mute(mute) {\n    if (!this.mute && mute) {\n      this._unmutedVolume = this.volume.value; // maybe it should ramp here?\n\n      this.volume.value = -Infinity;\n    } else if (this.mute && !mute) {\n      this.volume.value = this._unmutedVolume;\n    }\n  }\n  /**\n   * clean up\n   */\n\n\n  dispose() {\n    super.dispose();\n    this.input.dispose();\n    this.volume.dispose();\n    return this;\n  }\n\n}","import { Volume } from \"../../component/channel/Volume\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization\";\nimport { Gain } from \"./Gain\";\nimport { connectSeries, ToneAudioNode } from \"./ToneAudioNode\";\n/**\n * A single master output which is connected to the\n * AudioDestinationNode (aka your speakers).\n * It provides useful conveniences such as the ability\n * to set the volume and mute the entire application.\n * It also gives you the ability to apply master effects to your application.\n *\n * @example\n * const oscillator = new Tone.Oscillator().start();\n * // the audio will go from the oscillator to the speakers\n * oscillator.connect(Tone.Destination);\n * // a convenience for connecting to the master output is also provided:\n * oscillator.toDestination();\n * @category Core\n */\n\nexport class Destination extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Destination.getDefaults(), arguments));\n    this.name = \"Destination\";\n    this.input = new Volume({\n      context: this.context\n    });\n    this.output = new Gain({\n      context: this.context\n    });\n    /**\n     * The volume of the master output.\n     */\n\n    this.volume = this.input.volume;\n    const options = optionsFromArguments(Destination.getDefaults(), arguments);\n    connectSeries(this.input, this.output, this.context.rawContext.destination);\n    this.mute = options.mute;\n    this._internalChannels = [this.input, this.context.rawContext.destination, this.output];\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      mute: false,\n      volume: 0\n    });\n  }\n  /**\n   * Mute the output.\n   * @example\n   * const oscillator = new Tone.Oscillator().start().toDestination();\n   * setTimeout(() => {\n   * \t// mute the output\n   * \tTone.Destination.mute = true;\n   * }, 1000);\n   */\n\n\n  get mute() {\n    return this.input.mute;\n  }\n\n  set mute(mute) {\n    this.input.mute = mute;\n  }\n  /**\n   * Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n   * chained in the master effects chain.\n   * @param args All arguments will be connected in a row and the Master will be routed through it.\n   * @example\n   * // route all audio through a filter and compressor\n   * const lowpass = new Tone.Filter(800, \"lowpass\");\n   * const compressor = new Tone.Compressor(-18);\n   * Tone.Destination.chain(lowpass, compressor);\n   */\n\n\n  chain(...args) {\n    this.input.disconnect();\n    args.unshift(this.input);\n    args.push(this.output);\n    connectSeries(...args);\n    return this;\n  }\n  /**\n   * The maximum number of channels the system can output\n   * @example\n   * console.log(Tone.Destination.maxChannelCount);\n   */\n\n\n  get maxChannelCount() {\n    return this.context.rawContext.destination.maxChannelCount;\n  }\n  /**\n   * Clean up\n   */\n\n\n  dispose() {\n    super.dispose();\n    this.volume.dispose();\n    return this;\n  }\n\n} //-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\n\nonContextInit(context => {\n  context.destination = new Destination({\n    context\n  });\n});\nonContextClose(context => {\n  context.destination.dispose();\n});","import { __awaiter } from \"tslib\";\nimport { getContext, setContext } from \"../Global\";\nimport { OfflineContext } from \"./OfflineContext\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\n/**\n * Generate a buffer by rendering all of the Tone.js code within the callback using the OfflineAudioContext.\n * The OfflineAudioContext is capable of rendering much faster than real time in many cases.\n * The callback function also passes in an offline instance of [[Context]] which can be used\n * to schedule events along the Transport.\n * @param  callback  All Tone.js nodes which are created and scheduled within this callback are recorded into the output Buffer.\n * @param  duration     the amount of time to record for.\n * @return  The promise which is invoked with the ToneAudioBuffer of the recorded output.\n * @example\n * // render 2 seconds of the oscillator\n * Tone.Offline(() => {\n * \t// only nodes created in this callback will be recorded\n * \tconst oscillator = new Tone.Oscillator().toDestination().start(0);\n * }, 2).then((buffer) => {\n * \t// do something with the output buffer\n * \tconsole.log(buffer);\n * });\n * @example\n * // can also schedule events along the Transport\n * // using the passed in Offline Transport\n * Tone.Offline(({ transport }) => {\n * \tconst osc = new Tone.Oscillator().toDestination();\n * \ttransport.schedule(time => {\n * \t\tosc.start(time).stop(time + 0.1);\n * \t}, 1);\n * \t// make sure to start the transport\n * \ttransport.start(0.2);\n * }, 4).then((buffer) => {\n * \t// do something with the output buffer\n * \tconsole.log(buffer);\n * });\n * @category Core\n */\n\nexport function Offline(callback, duration, channels = 2, sampleRate = getContext().sampleRate) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // set the OfflineAudioContext based on the current context\n    const originalContext = getContext();\n    const context = new OfflineContext(channels, duration, sampleRate);\n    setContext(context); // invoke the callback/scheduling\n\n    yield callback(context); // then render the audio\n\n    const bufferPromise = context.render(); // return the original AudioContext\n\n    setContext(originalContext); // await the rendering\n\n    const buffer = yield bufferPromise; // return the audio\n\n    return new ToneAudioBuffer(buffer);\n  });\n}","import { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isString } from \"../util/TypeCheck\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\nimport { assert } from \"../util/Debug\";\n/**\n * A data structure for holding multiple buffers in a Map-like datastructure.\n *\n * @example\n * const pianoSamples = new Tone.ToneAudioBuffers({\n * \tC1: \"https://tonejs.github.io/examples/audio/casio/C1.mp3\",\n * \tC2: \"https://tonejs.github.io/examples/audio/casio/C2.mp3\",\n * }, () => {\n * \tconst player = new Tone.Player().toDestination();\n * \t// play one of the samples when they all load\n * \tplayer.buffer = pianoSamples.get(\"C2\");\n * \tplayer.start();\n * });\n * @example\n * // To pass in additional parameters in the second parameter\n * const buffers = new Tone.ToneAudioBuffers({\n * \t urls: {\n * \t\t C1: \"C1.mp3\",\n * \t\t C2: \"C2.mp3\",\n * \t },\n * \t onload: () => console.log(\"loaded\"),\n * \t baseUrl: \"https://tonejs.github.io/examples/audio/casio/\"\n * });\n * @category Core\n */\n\nexport class ToneAudioBuffers extends Tone {\n  constructor() {\n    super();\n    this.name = \"ToneAudioBuffers\";\n    /**\n     * All of the buffers\n     */\n\n    this._buffers = new Map();\n    /**\n     * Keep track of the number of loaded buffers\n     */\n\n    this._loadingCount = 0;\n    const options = optionsFromArguments(ToneAudioBuffers.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\");\n    this.baseUrl = options.baseUrl; // add each one\n\n    Object.keys(options.urls).forEach(name => {\n      this._loadingCount++;\n      const url = options.urls[name];\n      this.add(name, url, this._bufferLoaded.bind(this, options.onload), options.onerror);\n    });\n  }\n\n  static getDefaults() {\n    return {\n      baseUrl: \"\",\n      onerror: noOp,\n      onload: noOp,\n      urls: {}\n    };\n  }\n  /**\n   * True if the buffers object has a buffer by that name.\n   * @param  name  The key or index of the buffer.\n   */\n\n\n  has(name) {\n    return this._buffers.has(name.toString());\n  }\n  /**\n   * Get a buffer by name. If an array was loaded,\n   * then use the array index.\n   * @param  name  The key or index of the buffer.\n   */\n\n\n  get(name) {\n    assert(this.has(name), `ToneAudioBuffers has no buffer named: ${name}`);\n    return this._buffers.get(name.toString());\n  }\n  /**\n   * A buffer was loaded. decrement the counter.\n   */\n\n\n  _bufferLoaded(callback) {\n    this._loadingCount--;\n\n    if (this._loadingCount === 0 && callback) {\n      callback();\n    }\n  }\n  /**\n   * If the buffers are loaded or not\n   */\n\n\n  get loaded() {\n    return Array.from(this._buffers).every(([_, buffer]) => buffer.loaded);\n  }\n  /**\n   * Add a buffer by name and url to the Buffers\n   * @param  name      A unique name to give the buffer\n   * @param  url  Either the url of the bufer, or a buffer which will be added with the given name.\n   * @param  callback  The callback to invoke when the url is loaded.\n   * @param  onerror  Invoked if the buffer can't be loaded\n   */\n\n\n  add(name, url, callback = noOp, onerror = noOp) {\n    if (isString(url)) {\n      this._buffers.set(name.toString(), new ToneAudioBuffer(this.baseUrl + url, callback, onerror));\n    } else {\n      this._buffers.set(name.toString(), new ToneAudioBuffer(url, callback, onerror));\n    }\n\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._buffers.forEach(buffer => buffer.dispose());\n\n    this._buffers.clear();\n\n    return this;\n  }\n\n}","import { getContext } from \"../Global\";\nimport { ftom, mtof } from \"./Conversions\";\nimport { FrequencyClass } from \"./Frequency\";\n/**\n * Midi is a primitive type for encoding Time values.\n * Midi can be constructed with or without the `new` keyword. Midi can be passed\n * into the parameter of any method which takes time as an argument.\n * @category Unit\n */\n\nexport class MidiClass extends FrequencyClass {\n  constructor() {\n    super(...arguments);\n    this.name = \"MidiClass\";\n    this.defaultUnits = \"midi\";\n  }\n  /**\n   * Returns the value of a frequency in the current units\n   */\n\n\n  _frequencyToUnits(freq) {\n    return ftom(super._frequencyToUnits(freq));\n  }\n  /**\n   * Returns the value of a tick in the current time units\n   */\n\n\n  _ticksToUnits(ticks) {\n    return ftom(super._ticksToUnits(ticks));\n  }\n  /**\n   * Return the value of the beats in the current units\n   */\n\n\n  _beatsToUnits(beats) {\n    return ftom(super._beatsToUnits(beats));\n  }\n  /**\n   * Returns the value of a second in the current units\n   */\n\n\n  _secondsToUnits(seconds) {\n    return ftom(super._secondsToUnits(seconds));\n  }\n  /**\n   * Return the value of the frequency as a MIDI note\n   * @example\n   * Tone.Midi(60).toMidi(); // 60\n   */\n\n\n  toMidi() {\n    return this.valueOf();\n  }\n  /**\n   * Return the value of the frequency as a MIDI note\n   * @example\n   * Tone.Midi(60).toFrequency(); // 261.6255653005986\n   */\n\n\n  toFrequency() {\n    return mtof(this.toMidi());\n  }\n  /**\n   * Transposes the frequency by the given number of semitones.\n   * @return A new transposed MidiClass\n   * @example\n   * Tone.Midi(\"A4\").transpose(3); // \"C5\"\n   */\n\n\n  transpose(interval) {\n    return new MidiClass(this.context, this.toMidi() + interval);\n  }\n\n}\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n */\n\nexport function Midi(value, units) {\n  return new MidiClass(getContext(), value, units);\n}","import { ToneWithContext } from \"../context/ToneWithContext\";\nimport { Timeline } from \"./Timeline\";\nimport { onContextClose, onContextInit } from \"../context/ContextInitialization\";\n/**\n * Draw is useful for synchronizing visuals and audio events.\n * Callbacks from Tone.Transport or any of the Tone.Event classes\n * always happen _before_ the scheduled time and are not synchronized\n * to the animation frame so they are not good for triggering tightly\n * synchronized visuals and sound. Draw makes it easy to schedule\n * callbacks using the AudioContext time and uses requestAnimationFrame.\n * @example\n * Tone.Transport.schedule((time) => {\n * \t// use the time argument to schedule a callback with Draw\n * \tTone.Draw.schedule(() => {\n * \t\t// do drawing or DOM manipulation here\n * \t\tconsole.log(time);\n * \t}, time);\n * }, \"+0.5\");\n * Tone.Transport.start();\n * @category Core\n */\n\nexport class Draw extends ToneWithContext {\n  constructor() {\n    super(...arguments);\n    this.name = \"Draw\";\n    /**\n     * The duration after which events are not invoked.\n     */\n\n    this.expiration = 0.25;\n    /**\n     * The amount of time before the scheduled time\n     * that the callback can be invoked. Default is\n     * half the time of an animation frame (0.008 seconds).\n     */\n\n    this.anticipation = 0.008;\n    /**\n     * All of the events.\n     */\n\n    this._events = new Timeline();\n    /**\n     * The draw loop\n     */\n\n    this._boundDrawLoop = this._drawLoop.bind(this);\n    /**\n     * The animation frame id\n     */\n\n    this._animationFrame = -1;\n  }\n  /**\n   * Schedule a function at the given time to be invoked\n   * on the nearest animation frame.\n   * @param  callback  Callback is invoked at the given time.\n   * @param  time      The time relative to the AudioContext time to invoke the callback.\n   * @example\n   * Tone.Transport.scheduleRepeat(time => {\n   * \tTone.Draw.schedule(() => console.log(time), time);\n   * }, 1);\n   * Tone.Transport.start();\n   */\n\n\n  schedule(callback, time) {\n    this._events.add({\n      callback,\n      time: this.toSeconds(time)\n    }); // start the draw loop on the first event\n\n\n    if (this._events.length === 1) {\n      this._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n    }\n\n    return this;\n  }\n  /**\n   * Cancel events scheduled after the given time\n   * @param  after  Time after which scheduled events will be removed from the scheduling timeline.\n   */\n\n\n  cancel(after) {\n    this._events.cancel(this.toSeconds(after));\n\n    return this;\n  }\n  /**\n   * The draw loop\n   */\n\n\n  _drawLoop() {\n    const now = this.context.currentTime;\n\n    while (this._events.length && this._events.peek().time - this.anticipation <= now) {\n      const event = this._events.shift();\n\n      if (event && now - event.time <= this.expiration) {\n        event.callback();\n      }\n    }\n\n    if (this._events.length > 0) {\n      this._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n    }\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._events.dispose();\n\n    cancelAnimationFrame(this._animationFrame);\n    return this;\n  }\n\n} //-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\n\nonContextInit(context => {\n  context.draw = new Draw({\n    context\n  });\n});\nonContextClose(context => {\n  context.draw.dispose();\n});","import { Volume } from \"../component/channel/Volume\";\nimport \"../core/context/Destination\";\nimport \"../core/clock/Transport\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { defaultArg } from \"../core/util/Defaults\";\nimport { noOp, readOnly } from \"../core/util/Interface\";\nimport { StateTimeline } from \"../core/util/StateTimeline\";\nimport { isDefined, isUndef } from \"../core/util/TypeCheck\";\nimport { assert, assertContextRunning } from \"../core/util/Debug\";\nimport { GT } from \"../core/util/Math\";\n/**\n * Base class for sources.\n * start/stop of this.context.transport.\n *\n * ```\n * // Multiple state change events can be chained together,\n * // but must be set in the correct order and with ascending times\n * // OK\n * state.start().stop(\"+0.2\");\n * // OK\n * state.start().stop(\"+0.2\").start(\"+0.4\").stop(\"+0.7\")\n * // BAD\n * state.stop(\"+0.2\").start();\n * // BAD\n * state.start(\"+0.3\").stop(\"+0.2\");\n * ```\n */\n\nexport class Source extends ToneAudioNode {\n  constructor(options) {\n    super(options);\n    /**\n     * Sources have no inputs\n     */\n\n    this.input = undefined;\n    /**\n     * Keep track of the scheduled state.\n     */\n\n    this._state = new StateTimeline(\"stopped\");\n    /**\n     * The synced `start` callback function from the transport\n     */\n\n    this._synced = false;\n    /**\n     * Keep track of all of the scheduled event ids\n     */\n\n    this._scheduled = [];\n    /**\n     * Placeholder functions for syncing/unsyncing to transport\n     */\n\n    this._syncedStart = noOp;\n    this._syncedStop = noOp;\n    this._state.memory = 100;\n    this._state.increasing = true;\n    this._volume = this.output = new Volume({\n      context: this.context,\n      mute: options.mute,\n      volume: options.volume\n    });\n    this.volume = this._volume.volume;\n    readOnly(this, \"volume\");\n    this.onstop = options.onstop;\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      mute: false,\n      onstop: noOp,\n      volume: 0\n    });\n  }\n  /**\n   * Returns the playback state of the source, either \"started\" or \"stopped\".\n   * @example\n   * const player = new Tone.Player(\"https://tonejs.github.io/examples/audio/FWDL.mp3\", () => {\n   * \tplayer.start();\n   * \tconsole.log(player.state);\n   * }).toDestination();\n   */\n\n\n  get state() {\n    if (this._synced) {\n      if (this.context.transport.state === \"started\") {\n        return this._state.getValueAtTime(this.context.transport.seconds);\n      } else {\n        return \"stopped\";\n      }\n    } else {\n      return this._state.getValueAtTime(this.now());\n    }\n  }\n  /**\n   * Mute the output.\n   * @example\n   * const osc = new Tone.Oscillator().toDestination().start();\n   * // mute the output\n   * osc.mute = true;\n   */\n\n\n  get mute() {\n    return this._volume.mute;\n  }\n\n  set mute(mute) {\n    this._volume.mute = mute;\n  }\n  /**\n   * Ensure that the scheduled time is not before the current time.\n   * Should only be used when scheduled unsynced.\n   */\n\n\n  _clampToCurrentTime(time) {\n    if (this._synced) {\n      return time;\n    } else {\n      return Math.max(time, this.context.currentTime);\n    }\n  }\n  /**\n   * Start the source at the specified time. If no time is given,\n   * start the source now.\n   * @param  time When the source should be started.\n   * @example\n   * const source = new Tone.Oscillator().toDestination();\n   * source.start(\"+0.5\"); // starts the source 0.5 seconds from now\n   */\n\n\n  start(time, offset, duration) {\n    let computedTime = isUndef(time) && this._synced ? this.context.transport.seconds : this.toSeconds(time);\n    computedTime = this._clampToCurrentTime(computedTime); // if it's started, stop it and restart it\n\n    if (!this._synced && this._state.getValueAtTime(computedTime) === \"started\") {\n      // time should be strictly greater than the previous start time\n      assert(GT(computedTime, this._state.get(computedTime).time), \"Start time must be strictly greater than previous start time\");\n\n      this._state.cancel(computedTime);\n\n      this._state.setStateAtTime(\"started\", computedTime);\n\n      this.log(\"restart\", computedTime);\n      this.restart(computedTime, offset, duration);\n    } else {\n      this.log(\"start\", computedTime);\n\n      this._state.setStateAtTime(\"started\", computedTime);\n\n      if (this._synced) {\n        // add the offset time to the event\n        const event = this._state.get(computedTime);\n\n        if (event) {\n          event.offset = this.toSeconds(defaultArg(offset, 0));\n          event.duration = duration ? this.toSeconds(duration) : undefined;\n        }\n\n        const sched = this.context.transport.schedule(t => {\n          this._start(t, offset, duration);\n        }, computedTime);\n\n        this._scheduled.push(sched); // if it's already started\n\n\n        if (this.context.transport.state === \"started\") {\n          this._syncedStart(this.now(), this.context.transport.seconds);\n        }\n      } else {\n        this._start(computedTime, offset, duration);\n      }\n\n      assertContextRunning(this.context);\n    }\n\n    return this;\n  }\n  /**\n   * Stop the source at the specified time. If no time is given,\n   * stop the source now.\n   * @param  time When the source should be stopped.\n   * @example\n   * const source = new Tone.Oscillator().toDestination();\n   * source.start();\n   * source.stop(\"+0.5\"); // stops the source 0.5 seconds from now\n   */\n\n\n  stop(time) {\n    let computedTime = isUndef(time) && this._synced ? this.context.transport.seconds : this.toSeconds(time);\n    computedTime = this._clampToCurrentTime(computedTime);\n\n    if (this._state.getValueAtTime(computedTime) === \"started\" || isDefined(this._state.getNextState(\"started\", computedTime))) {\n      this.log(\"stop\", computedTime);\n\n      if (!this._synced) {\n        this._stop(computedTime);\n      } else {\n        const sched = this.context.transport.schedule(this._stop.bind(this), computedTime);\n\n        this._scheduled.push(sched);\n      }\n\n      this._state.cancel(computedTime);\n\n      this._state.setStateAtTime(\"stopped\", computedTime);\n    }\n\n    return this;\n  }\n  /**\n   * Restart the source.\n   */\n\n\n  restart(time, offset, duration) {\n    time = this.toSeconds(time);\n\n    if (this._state.getValueAtTime(time) === \"started\") {\n      this._state.cancel(time);\n\n      this._restart(time, offset, duration);\n    }\n\n    return this;\n  }\n  /**\n   * Sync the source to the Transport so that all subsequent\n   * calls to `start` and `stop` are synced to the TransportTime\n   * instead of the AudioContext time.\n   *\n   * @example\n   * const osc = new Tone.Oscillator().toDestination();\n   * // sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n   * osc.sync().start(0).stop(0.3);\n   * // start the transport.\n   * Tone.Transport.start();\n   * // set it to loop once a second\n   * Tone.Transport.loop = true;\n   * Tone.Transport.loopEnd = 1;\n   */\n\n\n  sync() {\n    if (!this._synced) {\n      this._synced = true;\n\n      this._syncedStart = (time, offset) => {\n        if (offset > 0) {\n          // get the playback state at that time\n          const stateEvent = this._state.get(offset); // listen for start events which may occur in the middle of the sync'ed time\n\n\n          if (stateEvent && stateEvent.state === \"started\" && stateEvent.time !== offset) {\n            // get the offset\n            const startOffset = offset - this.toSeconds(stateEvent.time);\n            let duration;\n\n            if (stateEvent.duration) {\n              duration = this.toSeconds(stateEvent.duration) - startOffset;\n            }\n\n            this._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);\n          }\n        }\n      };\n\n      this._syncedStop = time => {\n        const seconds = this.context.transport.getSecondsAtTime(Math.max(time - this.sampleTime, 0));\n\n        if (this._state.getValueAtTime(seconds) === \"started\") {\n          this._stop(time);\n        }\n      };\n\n      this.context.transport.on(\"start\", this._syncedStart);\n      this.context.transport.on(\"loopStart\", this._syncedStart);\n      this.context.transport.on(\"stop\", this._syncedStop);\n      this.context.transport.on(\"pause\", this._syncedStop);\n      this.context.transport.on(\"loopEnd\", this._syncedStop);\n    }\n\n    return this;\n  }\n  /**\n   * Unsync the source to the Transport. See Source.sync\n   */\n\n\n  unsync() {\n    if (this._synced) {\n      this.context.transport.off(\"stop\", this._syncedStop);\n      this.context.transport.off(\"pause\", this._syncedStop);\n      this.context.transport.off(\"loopEnd\", this._syncedStop);\n      this.context.transport.off(\"start\", this._syncedStart);\n      this.context.transport.off(\"loopStart\", this._syncedStart);\n    }\n\n    this._synced = false; // clear all of the scheduled ids\n\n    this._scheduled.forEach(id => this.context.transport.clear(id));\n\n    this._scheduled = [];\n\n    this._state.cancel(0);\n\n    return this;\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n    this.onstop = noOp;\n    this.unsync();\n\n    this._volume.dispose();\n\n    this._state.dispose();\n\n    return this;\n  }\n\n}","import { connect } from \"../../core/context/ToneAudioNode\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isDefined } from \"../../core/util/TypeCheck\";\nimport { assert } from \"../../core/util/Debug\";\nimport { OneShotSource } from \"../OneShotSource\";\nimport { EQ, GTE, LT } from \"../../core/util/Math\";\n/**\n * Wrapper around the native BufferSourceNode.\n * @category Source\n */\n\nexport class ToneBufferSource extends OneShotSource {\n  constructor() {\n    super(optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"url\", \"onload\"]));\n    this.name = \"ToneBufferSource\";\n    /**\n     * The oscillator\n     */\n\n    this._source = this.context.createBufferSource();\n    this._internalChannels = [this._source];\n    /**\n     * indicators if the source has started/stopped\n     */\n\n    this._sourceStarted = false;\n    this._sourceStopped = false;\n    const options = optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"url\", \"onload\"]);\n    connect(this._source, this._gainNode);\n\n    this._source.onended = () => this._stopSource();\n    /**\n     * The playbackRate of the buffer\n     */\n\n\n    this.playbackRate = new Param({\n      context: this.context,\n      param: this._source.playbackRate,\n      units: \"positive\",\n      value: options.playbackRate\n    }); // set some values initially\n\n    this.loop = options.loop;\n    this.loopStart = options.loopStart;\n    this.loopEnd = options.loopEnd;\n    this._buffer = new ToneAudioBuffer(options.url, options.onload, options.onerror);\n\n    this._internalChannels.push(this._source);\n  }\n\n  static getDefaults() {\n    return Object.assign(OneShotSource.getDefaults(), {\n      url: new ToneAudioBuffer(),\n      loop: false,\n      loopEnd: 0,\n      loopStart: 0,\n      onload: noOp,\n      onerror: noOp,\n      playbackRate: 1\n    });\n  }\n  /**\n   * The fadeIn time of the amplitude envelope.\n   */\n\n\n  get fadeIn() {\n    return this._fadeIn;\n  }\n\n  set fadeIn(t) {\n    this._fadeIn = t;\n  }\n  /**\n   * The fadeOut time of the amplitude envelope.\n   */\n\n\n  get fadeOut() {\n    return this._fadeOut;\n  }\n\n  set fadeOut(t) {\n    this._fadeOut = t;\n  }\n  /**\n   * The curve applied to the fades, either \"linear\" or \"exponential\"\n   */\n\n\n  get curve() {\n    return this._curve;\n  }\n\n  set curve(t) {\n    this._curve = t;\n  }\n  /**\n   * Start the buffer\n   * @param  time When the player should start.\n   * @param  offset The offset from the beginning of the sample to start at.\n   * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)\n   * @param  gain  The gain to play the buffer back at.\n   */\n\n\n  start(time, offset, duration, gain = 1) {\n    assert(this.buffer.loaded, \"buffer is either not set or not loaded\");\n    const computedTime = this.toSeconds(time); // apply the gain envelope\n\n    this._startGain(computedTime, gain); // if it's a loop the default offset is the loopstart point\n\n\n    if (this.loop) {\n      offset = defaultArg(offset, this.loopStart);\n    } else {\n      // otherwise the default offset is 0\n      offset = defaultArg(offset, 0);\n    } // make sure the offset is not less than 0\n\n\n    let computedOffset = Math.max(this.toSeconds(offset), 0); // start the buffer source\n\n    if (this.loop) {\n      // modify the offset if it's greater than the loop time\n      const loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n      const loopStart = this.toSeconds(this.loopStart);\n      const loopDuration = loopEnd - loopStart; // move the offset back\n\n      if (GTE(computedOffset, loopEnd)) {\n        computedOffset = (computedOffset - loopStart) % loopDuration + loopStart;\n      } // when the offset is very close to the duration, set it to 0\n\n\n      if (EQ(computedOffset, this.buffer.duration)) {\n        computedOffset = 0;\n      }\n    } // this.buffer.loaded would have return false if the AudioBuffer was undefined\n\n\n    this._source.buffer = this.buffer.get();\n    this._source.loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n\n    if (LT(computedOffset, this.buffer.duration)) {\n      this._sourceStarted = true;\n\n      this._source.start(computedTime, computedOffset);\n    } // if a duration is given, schedule a stop\n\n\n    if (isDefined(duration)) {\n      let computedDur = this.toSeconds(duration); // make sure it's never negative\n\n      computedDur = Math.max(computedDur, 0);\n      this.stop(computedTime + computedDur);\n    }\n\n    return this;\n  }\n\n  _stopSource(time) {\n    if (!this._sourceStopped && this._sourceStarted) {\n      this._sourceStopped = true;\n\n      this._source.stop(this.toSeconds(time));\n\n      this._onended();\n    }\n  }\n  /**\n   * If loop is true, the loop will start at this position.\n   */\n\n\n  get loopStart() {\n    return this._source.loopStart;\n  }\n\n  set loopStart(loopStart) {\n    this._source.loopStart = this.toSeconds(loopStart);\n  }\n  /**\n   * If loop is true, the loop will end at this position.\n   */\n\n\n  get loopEnd() {\n    return this._source.loopEnd;\n  }\n\n  set loopEnd(loopEnd) {\n    this._source.loopEnd = this.toSeconds(loopEnd);\n  }\n  /**\n   * The audio buffer belonging to the player.\n   */\n\n\n  get buffer() {\n    return this._buffer;\n  }\n\n  set buffer(buffer) {\n    this._buffer.set(buffer);\n  }\n  /**\n   * If the buffer should loop once it's over.\n   */\n\n\n  get loop() {\n    return this._source.loop;\n  }\n\n  set loop(loop) {\n    this._source.loop = loop;\n\n    if (this._sourceStarted) {\n      this.cancelStop();\n    }\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n    this._source.onended = null;\n\n    this._source.disconnect();\n\n    this._buffer.dispose();\n\n    this.playbackRate.dispose();\n    return this;\n  }\n\n}","import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { assert } from \"../core/util/Debug\";\nimport { Source } from \"../source/Source\";\nimport { ToneBufferSource } from \"./buffer/ToneBufferSource\";\n/**\n * Noise is a noise generator. It uses looped noise buffers to save on performance.\n * Noise supports the noise types: \"pink\", \"white\", and \"brown\". Read more about\n * colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).\n *\n * @example\n * // initialize the noise and start\n * const noise = new Tone.Noise(\"pink\").start();\n * // make an autofilter to shape the noise\n * const autoFilter = new Tone.AutoFilter({\n * \tfrequency: \"8n\",\n * \tbaseFrequency: 200,\n * \toctaves: 8\n * }).toDestination().start();\n * // connect the noise\n * noise.connect(autoFilter);\n * // start the autofilter LFO\n * autoFilter.start();\n * @category Source\n */\n\nexport class Noise extends Source {\n  constructor() {\n    super(optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]));\n    this.name = \"Noise\";\n    /**\n     * Private reference to the source\n     */\n\n    this._source = null;\n    const options = optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]);\n    this._playbackRate = options.playbackRate;\n    this.type = options.type;\n    this._fadeIn = options.fadeIn;\n    this._fadeOut = options.fadeOut;\n  }\n\n  static getDefaults() {\n    return Object.assign(Source.getDefaults(), {\n      fadeIn: 0,\n      fadeOut: 0,\n      playbackRate: 1,\n      type: \"white\"\n    });\n  }\n  /**\n   * The type of the noise. Can be \"white\", \"brown\", or \"pink\".\n   * @example\n   * const noise = new Tone.Noise().toDestination().start();\n   * noise.type = \"brown\";\n   */\n\n\n  get type() {\n    return this._type;\n  }\n\n  set type(type) {\n    assert(type in _noiseBuffers, \"Noise: invalid type: \" + type);\n\n    if (this._type !== type) {\n      this._type = type; // if it's playing, stop and restart it\n\n      if (this.state === \"started\") {\n        const now = this.now();\n\n        this._stop(now);\n\n        this._start(now);\n      }\n    }\n  }\n  /**\n   * The playback rate of the noise. Affects\n   * the \"frequency\" of the noise.\n   */\n\n\n  get playbackRate() {\n    return this._playbackRate;\n  }\n\n  set playbackRate(rate) {\n    this._playbackRate = rate;\n\n    if (this._source) {\n      this._source.playbackRate.value = rate;\n    }\n  }\n  /**\n   * internal start method\n   */\n\n\n  _start(time) {\n    const buffer = _noiseBuffers[this._type];\n    this._source = new ToneBufferSource({\n      url: buffer,\n      context: this.context,\n      fadeIn: this._fadeIn,\n      fadeOut: this._fadeOut,\n      loop: true,\n      onended: () => this.onstop(this),\n      playbackRate: this._playbackRate\n    }).connect(this.output);\n\n    this._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));\n  }\n  /**\n   * internal stop method\n   */\n\n\n  _stop(time) {\n    if (this._source) {\n      this._source.stop(this.toSeconds(time));\n\n      this._source = null;\n    }\n  }\n  /**\n   * The fadeIn time of the amplitude envelope.\n   */\n\n\n  get fadeIn() {\n    return this._fadeIn;\n  }\n\n  set fadeIn(time) {\n    this._fadeIn = time;\n\n    if (this._source) {\n      this._source.fadeIn = this._fadeIn;\n    }\n  }\n  /**\n   * The fadeOut time of the amplitude envelope.\n   */\n\n\n  get fadeOut() {\n    return this._fadeOut;\n  }\n\n  set fadeOut(time) {\n    this._fadeOut = time;\n\n    if (this._source) {\n      this._source.fadeOut = this._fadeOut;\n    }\n  }\n\n  _restart(time) {\n    // TODO could be optimized by cancelling the buffer source 'stop'\n    this._stop(time);\n\n    this._start(time);\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    if (this._source) {\n      this._source.disconnect();\n    }\n\n    return this;\n  }\n\n} //--------------------\n// THE NOISE BUFFERS\n//--------------------\n// Noise buffer stats\n\nconst BUFFER_LENGTH = 44100 * 5;\nconst NUM_CHANNELS = 2;\n/**\n * Cache the noise buffers\n */\n\nconst _noiseCache = {\n  brown: null,\n  pink: null,\n  white: null\n};\n/**\n * The noise arrays. Generated on initialization.\n * borrowed heavily from https://github.com/zacharydenton/noise.js\n * (c) 2013 Zach Denton (MIT)\n */\n\nconst _noiseBuffers = {\n  get brown() {\n    if (!_noiseCache.brown) {\n      const buffer = [];\n\n      for (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n        const channel = new Float32Array(BUFFER_LENGTH);\n        buffer[channelNum] = channel;\n        let lastOut = 0.0;\n\n        for (let i = 0; i < BUFFER_LENGTH; i++) {\n          const white = Math.random() * 2 - 1;\n          channel[i] = (lastOut + 0.02 * white) / 1.02;\n          lastOut = channel[i];\n          channel[i] *= 3.5; // (roughly) compensate for gain\n        }\n      }\n\n      _noiseCache.brown = new ToneAudioBuffer().fromArray(buffer);\n    }\n\n    return _noiseCache.brown;\n  },\n\n  get pink() {\n    if (!_noiseCache.pink) {\n      const buffer = [];\n\n      for (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n        const channel = new Float32Array(BUFFER_LENGTH);\n        buffer[channelNum] = channel;\n        let b0, b1, b2, b3, b4, b5, b6;\n        b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n\n        for (let i = 0; i < BUFFER_LENGTH; i++) {\n          const white = Math.random() * 2 - 1;\n          b0 = 0.99886 * b0 + white * 0.0555179;\n          b1 = 0.99332 * b1 + white * 0.0750759;\n          b2 = 0.96900 * b2 + white * 0.1538520;\n          b3 = 0.86650 * b3 + white * 0.3104856;\n          b4 = 0.55000 * b4 + white * 0.5329522;\n          b5 = -0.7616 * b5 - white * 0.0168980;\n          channel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n          channel[i] *= 0.11; // (roughly) compensate for gain\n\n          b6 = white * 0.115926;\n        }\n      }\n\n      _noiseCache.pink = new ToneAudioBuffer().fromArray(buffer);\n    }\n\n    return _noiseCache.pink;\n  },\n\n  get white() {\n    if (!_noiseCache.white) {\n      const buffer = [];\n\n      for (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n        const channel = new Float32Array(BUFFER_LENGTH);\n        buffer[channelNum] = channel;\n\n        for (let i = 0; i < BUFFER_LENGTH; i++) {\n          channel[i] = Math.random() * 2 - 1;\n        }\n      }\n\n      _noiseCache.white = new ToneAudioBuffer().fromArray(buffer);\n    }\n\n    return _noiseCache.white;\n  }\n\n};","import { __awaiter } from \"tslib\";\nimport { connect, ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { Volume } from \"../component/channel/Volume\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { assert } from \"../core/util/Debug\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { isDefined, isNumber } from \"../core/util/TypeCheck\";\n/**\n * UserMedia uses MediaDevices.getUserMedia to open up and external microphone or audio input.\n * Check [MediaDevices API Support](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia)\n * to see which browsers are supported. Access to an external input\n * is limited to secure (HTTPS) connections.\n * @example\n * const mic = new Tone.UserMedia();\n * mic.open().then(() => {\n * \t// promise resolves when input is available\n * });\n * @category Source\n */\n\nexport class UserMedia extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(UserMedia.getDefaults(), arguments, [\"volume\"]));\n    this.name = \"UserMedia\";\n    const options = optionsFromArguments(UserMedia.getDefaults(), arguments, [\"volume\"]);\n    this._volume = this.output = new Volume({\n      context: this.context,\n      volume: options.volume\n    });\n    this.volume = this._volume.volume;\n    readOnly(this, \"volume\");\n    this.mute = options.mute;\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      mute: false,\n      volume: 0\n    });\n  }\n  /**\n   * Open the media stream. If a string is passed in, it is assumed\n   * to be the label or id of the stream, if a number is passed in,\n   * it is the input number of the stream.\n   * @param  labelOrId The label or id of the audio input media device.\n   *                   With no argument, the default stream is opened.\n   * @return The promise is resolved when the stream is open.\n   */\n\n\n  open(labelOrId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      assert(UserMedia.supported, \"UserMedia is not supported\"); // close the previous stream\n\n      if (this.state === \"started\") {\n        this.close();\n      }\n\n      const devices = yield UserMedia.enumerateDevices();\n\n      if (isNumber(labelOrId)) {\n        this._device = devices[labelOrId];\n      } else {\n        this._device = devices.find(device => {\n          return device.label === labelOrId || device.deviceId === labelOrId;\n        }); // didn't find a matching device\n\n        if (!this._device && devices.length > 0) {\n          this._device = devices[0];\n        }\n\n        assert(isDefined(this._device), `No matching device ${labelOrId}`);\n      } // do getUserMedia\n\n\n      const constraints = {\n        audio: {\n          echoCancellation: false,\n          sampleRate: this.context.sampleRate,\n          noiseSuppression: false,\n          mozNoiseSuppression: false\n        }\n      };\n\n      if (this._device) {\n        // @ts-ignore\n        constraints.audio.deviceId = this._device.deviceId;\n      }\n\n      const stream = yield navigator.mediaDevices.getUserMedia(constraints); // start a new source only if the previous one is closed\n\n      if (!this._stream) {\n        this._stream = stream; // Wrap a MediaStreamSourceNode around the live input stream.\n\n        const mediaStreamNode = this.context.createMediaStreamSource(stream); // Connect the MediaStreamSourceNode to a gate gain node\n\n        connect(mediaStreamNode, this.output);\n        this._mediaStream = mediaStreamNode;\n      }\n\n      return this;\n    });\n  }\n  /**\n   * Close the media stream\n   */\n\n\n  close() {\n    if (this._stream && this._mediaStream) {\n      this._stream.getAudioTracks().forEach(track => {\n        track.stop();\n      });\n\n      this._stream = undefined; // remove the old media stream\n\n      this._mediaStream.disconnect();\n\n      this._mediaStream = undefined;\n    }\n\n    this._device = undefined;\n    return this;\n  }\n  /**\n   * Returns a promise which resolves with the list of audio input devices available.\n   * @return The promise that is resolved with the devices\n   * @example\n   * Tone.UserMedia.enumerateDevices().then((devices) => {\n   * \t// print the device labels\n   * \tconsole.log(devices.map(device => device.label));\n   * });\n   */\n\n\n  static enumerateDevices() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const allDevices = yield navigator.mediaDevices.enumerateDevices();\n      return allDevices.filter(device => {\n        return device.kind === \"audioinput\";\n      });\n    });\n  }\n  /**\n   * Returns the playback state of the source, \"started\" when the microphone is open\n   * and \"stopped\" when the mic is closed.\n   */\n\n\n  get state() {\n    return this._stream && this._stream.active ? \"started\" : \"stopped\";\n  }\n  /**\n   * Returns an identifier for the represented device that is\n   * persisted across sessions. It is un-guessable by other applications and\n   * unique to the origin of the calling application. It is reset when the\n   * user clears cookies (for Private Browsing, a different identifier is\n   * used that is not persisted across sessions). Returns undefined when the\n   * device is not open.\n   */\n\n\n  get deviceId() {\n    if (this._device) {\n      return this._device.deviceId;\n    } else {\n      return undefined;\n    }\n  }\n  /**\n   * Returns a group identifier. Two devices have the\n   * same group identifier if they belong to the same physical device.\n   * Returns null  when the device is not open.\n   */\n\n\n  get groupId() {\n    if (this._device) {\n      return this._device.groupId;\n    } else {\n      return undefined;\n    }\n  }\n  /**\n   * Returns a label describing this device (for example \"Built-in Microphone\").\n   * Returns undefined when the device is not open or label is not available\n   * because of permissions.\n   */\n\n\n  get label() {\n    if (this._device) {\n      return this._device.label;\n    } else {\n      return undefined;\n    }\n  }\n  /**\n   * Mute the output.\n   * @example\n   * const mic = new Tone.UserMedia();\n   * mic.open().then(() => {\n   * \t// promise resolves when input is available\n   * });\n   * // mute the output\n   * mic.mute = true;\n   */\n\n\n  get mute() {\n    return this._volume.mute;\n  }\n\n  set mute(mute) {\n    this._volume.mute = mute;\n  }\n\n  dispose() {\n    super.dispose();\n    this.close();\n\n    this._volume.dispose();\n\n    this.volume.dispose();\n    return this;\n  }\n  /**\n   * If getUserMedia is supported by the browser.\n   */\n\n\n  static get supported() {\n    return isDefined(navigator.mediaDevices) && isDefined(navigator.mediaDevices.getUserMedia);\n  }\n\n}","import { __awaiter } from \"tslib\";\nimport { OfflineContext } from \"../../core/context/OfflineContext\";\n/**\n * Render a segment of the oscillator to an offline context and return the results as an array\n */\n\nexport function generateWaveform(instance, length) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const duration = length / instance.context.sampleRate;\n    const context = new OfflineContext(1, duration, instance.context.sampleRate);\n    const clone = new instance.constructor(Object.assign(instance.get(), {\n      // should do 2 iterations\n      frequency: 2 / duration,\n      // zero out the detune\n      detune: 0,\n      context\n    })).toDestination();\n    clone.start(0);\n    const buffer = yield context.render();\n    return buffer.getChannelData(0);\n  });\n}","import { connect } from \"../../core/context/ToneAudioNode\";\nimport { Param } from \"../../core/context/Param\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OneShotSource } from \"../OneShotSource\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * Wrapper around the native fire-and-forget OscillatorNode.\n * Adds the ability to reschedule the stop method.\n * ***[[Oscillator]] is better for most use-cases***\n * @category Source\n */\n\nexport class ToneOscillatorNode extends OneShotSource {\n  constructor() {\n    super(optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]));\n    this.name = \"ToneOscillatorNode\";\n    /**\n     * The oscillator\n     */\n\n    this._oscillator = this.context.createOscillator();\n    this._internalChannels = [this._oscillator];\n    const options = optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]);\n    connect(this._oscillator, this._gainNode);\n    this.type = options.type;\n    this.frequency = new Param({\n      context: this.context,\n      param: this._oscillator.frequency,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    this.detune = new Param({\n      context: this.context,\n      param: this._oscillator.detune,\n      units: \"cents\",\n      value: options.detune\n    });\n    readOnly(this, [\"frequency\", \"detune\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(OneShotSource.getDefaults(), {\n      detune: 0,\n      frequency: 440,\n      type: \"sine\"\n    });\n  }\n  /**\n   * Start the oscillator node at the given time\n   * @param  time When to start the oscillator\n   */\n\n\n  start(time) {\n    const computedTime = this.toSeconds(time);\n    this.log(\"start\", computedTime);\n\n    this._startGain(computedTime);\n\n    this._oscillator.start(computedTime);\n\n    return this;\n  }\n\n  _stopSource(time) {\n    this._oscillator.stop(time);\n  }\n  /**\n   * Sets an arbitrary custom periodic waveform given a PeriodicWave.\n   * @param  periodicWave PeriodicWave should be created with context.createPeriodicWave\n   */\n\n\n  setPeriodicWave(periodicWave) {\n    this._oscillator.setPeriodicWave(periodicWave);\n\n    return this;\n  }\n  /**\n   * The oscillator type. Either 'sine', 'sawtooth', 'square', or 'triangle'\n   */\n\n\n  get type() {\n    return this._oscillator.type;\n  }\n\n  set type(type) {\n    this._oscillator.type = type;\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    if (this.state === \"started\") {\n      this.stop();\n    }\n\n    this._oscillator.disconnect();\n\n    this.frequency.dispose();\n    this.detune.dispose();\n    return this;\n  }\n\n}","import { __awaiter } from \"tslib\";\nimport { deepEquals, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { isDefined } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { generateWaveform } from \"./OscillatorInterface\";\nimport { ToneOscillatorNode } from \"./ToneOscillatorNode\";\nimport { assertRange } from \"../../core/util/Debug\";\nimport { clamp } from \"../../core/util/Math\";\n/**\n * Oscillator supports a number of features including\n * phase rotation, multiple oscillator types (see Oscillator.type),\n * and Transport syncing (see Oscillator.syncFrequency).\n *\n * @example\n * // make and start a 440hz sine tone\n * const osc = new Tone.Oscillator(440, \"sine\").toDestination().start();\n * @category Source\n */\n\nexport class Oscillator extends Source {\n  constructor() {\n    super(optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n    this.name = \"Oscillator\";\n    /**\n     * the main oscillator\n     */\n\n    this._oscillator = null;\n    const options = optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n    this.frequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    readOnly(this, \"frequency\");\n    this.detune = new Signal({\n      context: this.context,\n      units: \"cents\",\n      value: options.detune\n    });\n    readOnly(this, \"detune\");\n    this._partials = options.partials;\n    this._partialCount = options.partialCount;\n    this._type = options.type;\n\n    if (options.partialCount && options.type !== \"custom\") {\n      this._type = this.baseType + options.partialCount.toString();\n    }\n\n    this.phase = options.phase;\n  }\n\n  static getDefaults() {\n    return Object.assign(Source.getDefaults(), {\n      detune: 0,\n      frequency: 440,\n      partialCount: 0,\n      partials: [],\n      phase: 0,\n      type: \"sine\"\n    });\n  }\n  /**\n   * start the oscillator\n   */\n\n\n  _start(time) {\n    const computedTime = this.toSeconds(time); // new oscillator with previous values\n\n    const oscillator = new ToneOscillatorNode({\n      context: this.context,\n      onended: () => this.onstop(this)\n    });\n    this._oscillator = oscillator;\n\n    if (this._wave) {\n      this._oscillator.setPeriodicWave(this._wave);\n    } else {\n      this._oscillator.type = this._type;\n    } // connect the control signal to the oscillator frequency & detune\n\n\n    this._oscillator.connect(this.output);\n\n    this.frequency.connect(this._oscillator.frequency);\n    this.detune.connect(this._oscillator.detune); // start the oscillator\n\n    this._oscillator.start(computedTime);\n  }\n  /**\n   * stop the oscillator\n   */\n\n\n  _stop(time) {\n    const computedTime = this.toSeconds(time);\n\n    if (this._oscillator) {\n      this._oscillator.stop(computedTime);\n    }\n  }\n  /**\n   * Restart the oscillator. Does not stop the oscillator, but instead\n   * just cancels any scheduled 'stop' from being invoked.\n   */\n\n\n  _restart(time) {\n    const computedTime = this.toSeconds(time);\n    this.log(\"restart\", computedTime);\n\n    if (this._oscillator) {\n      this._oscillator.cancelStop();\n    }\n\n    this._state.cancel(computedTime);\n\n    return this;\n  }\n  /**\n   * Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n   * will also affect the oscillators frequency.\n   * @example\n   * const osc = new Tone.Oscillator().toDestination().start();\n   * osc.frequency.value = 440;\n   * // the ratio between the bpm and the frequency will be maintained\n   * osc.syncFrequency();\n   * // double the tempo\n   * Tone.Transport.bpm.value *= 2;\n   * // the frequency of the oscillator is doubled to 880\n   */\n\n\n  syncFrequency() {\n    this.context.transport.syncSignal(this.frequency);\n    return this;\n  }\n  /**\n   * Unsync the oscillator's frequency from the Transport.\n   * See Oscillator.syncFrequency\n   */\n\n\n  unsyncFrequency() {\n    this.context.transport.unsyncSignal(this.frequency);\n    return this;\n  }\n  /**\n   * Get a cached periodic wave. Avoids having to recompute\n   * the oscillator values when they have already been computed\n   * with the same values.\n   */\n\n\n  _getCachedPeriodicWave() {\n    if (this._type === \"custom\") {\n      const oscProps = Oscillator._periodicWaveCache.find(description => {\n        return description.phase === this._phase && deepEquals(description.partials, this._partials);\n      });\n\n      return oscProps;\n    } else {\n      const oscProps = Oscillator._periodicWaveCache.find(description => {\n        return description.type === this._type && description.phase === this._phase;\n      });\n\n      this._partialCount = oscProps ? oscProps.partialCount : this._partialCount;\n      return oscProps;\n    }\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  set type(type) {\n    this._type = type;\n    const isBasicType = [\"sine\", \"square\", \"sawtooth\", \"triangle\"].indexOf(type) !== -1;\n\n    if (this._phase === 0 && isBasicType) {\n      this._wave = undefined;\n      this._partialCount = 0; // just go with the basic approach\n\n      if (this._oscillator !== null) {\n        // already tested that it's a basic type\n        this._oscillator.type = type;\n      }\n    } else {\n      // first check if the value is cached\n      const cache = this._getCachedPeriodicWave();\n\n      if (isDefined(cache)) {\n        const {\n          partials,\n          wave\n        } = cache;\n        this._wave = wave;\n        this._partials = partials;\n\n        if (this._oscillator !== null) {\n          this._oscillator.setPeriodicWave(this._wave);\n        }\n      } else {\n        const [real, imag] = this._getRealImaginary(type, this._phase);\n\n        const periodicWave = this.context.createPeriodicWave(real, imag);\n        this._wave = periodicWave;\n\n        if (this._oscillator !== null) {\n          this._oscillator.setPeriodicWave(this._wave);\n        } // set the cache\n\n\n        Oscillator._periodicWaveCache.push({\n          imag,\n          partialCount: this._partialCount,\n          partials: this._partials,\n          phase: this._phase,\n          real,\n          type: this._type,\n          wave: this._wave\n        });\n\n        if (Oscillator._periodicWaveCache.length > 100) {\n          Oscillator._periodicWaveCache.shift();\n        }\n      }\n    }\n  }\n\n  get baseType() {\n    return this._type.replace(this.partialCount.toString(), \"\");\n  }\n\n  set baseType(baseType) {\n    if (this.partialCount && this._type !== \"custom\" && baseType !== \"custom\") {\n      this.type = baseType + this.partialCount;\n    } else {\n      this.type = baseType;\n    }\n  }\n\n  get partialCount() {\n    return this._partialCount;\n  }\n\n  set partialCount(p) {\n    assertRange(p, 0);\n    let type = this._type;\n    const partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(this._type);\n\n    if (partial) {\n      type = partial[1];\n    }\n\n    if (this._type !== \"custom\") {\n      if (p === 0) {\n        this.type = type;\n      } else {\n        this.type = type + p.toString();\n      }\n    } else {\n      // extend or shorten the partials array\n      const fullPartials = new Float32Array(p); // copy over the partials array\n\n      this._partials.forEach((v, i) => fullPartials[i] = v);\n\n      this._partials = Array.from(fullPartials);\n      this.type = this._type;\n    }\n  }\n  /**\n   * Returns the real and imaginary components based\n   * on the oscillator type.\n   * @returns [real: Float32Array, imaginary: Float32Array]\n   */\n\n\n  _getRealImaginary(type, phase) {\n    const fftSize = 4096;\n    let periodicWaveSize = fftSize / 2;\n    const real = new Float32Array(periodicWaveSize);\n    const imag = new Float32Array(periodicWaveSize);\n    let partialCount = 1;\n\n    if (type === \"custom\") {\n      partialCount = this._partials.length + 1;\n      this._partialCount = this._partials.length;\n      periodicWaveSize = partialCount; // if the partial count is 0, don't bother doing any computation\n\n      if (this._partials.length === 0) {\n        return [real, imag];\n      }\n    } else {\n      const partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(type);\n\n      if (partial) {\n        partialCount = parseInt(partial[2], 10) + 1;\n        this._partialCount = parseInt(partial[2], 10);\n        type = partial[1];\n        partialCount = Math.max(partialCount, 2);\n        periodicWaveSize = partialCount;\n      } else {\n        this._partialCount = 0;\n      }\n\n      this._partials = [];\n    }\n\n    for (let n = 1; n < periodicWaveSize; ++n) {\n      const piFactor = 2 / (n * Math.PI);\n      let b;\n\n      switch (type) {\n        case \"sine\":\n          b = n <= partialCount ? 1 : 0;\n          this._partials[n - 1] = b;\n          break;\n\n        case \"square\":\n          b = n & 1 ? 2 * piFactor : 0;\n          this._partials[n - 1] = b;\n          break;\n\n        case \"sawtooth\":\n          b = piFactor * (n & 1 ? 1 : -1);\n          this._partials[n - 1] = b;\n          break;\n\n        case \"triangle\":\n          if (n & 1) {\n            b = 2 * (piFactor * piFactor) * (n - 1 >> 1 & 1 ? -1 : 1);\n          } else {\n            b = 0;\n          }\n\n          this._partials[n - 1] = b;\n          break;\n\n        case \"custom\":\n          b = this._partials[n - 1];\n          break;\n\n        default:\n          throw new TypeError(\"Oscillator: invalid type: \" + type);\n      }\n\n      if (b !== 0) {\n        real[n] = -b * Math.sin(phase * n);\n        imag[n] = b * Math.cos(phase * n);\n      } else {\n        real[n] = 0;\n        imag[n] = 0;\n      }\n    }\n\n    return [real, imag];\n  }\n  /**\n   * Compute the inverse FFT for a given phase.\n   */\n\n\n  _inverseFFT(real, imag, phase) {\n    let sum = 0;\n    const len = real.length;\n\n    for (let i = 0; i < len; i++) {\n      sum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);\n    }\n\n    return sum;\n  }\n  /**\n   * Returns the initial value of the oscillator when stopped.\n   * E.g. a \"sine\" oscillator with phase = 90 would return an initial value of -1.\n   */\n\n\n  getInitialValue() {\n    const [real, imag] = this._getRealImaginary(this._type, 0);\n\n    let maxValue = 0;\n    const twoPi = Math.PI * 2;\n    const testPositions = 32; // check for peaks in 16 places\n\n    for (let i = 0; i < testPositions; i++) {\n      maxValue = Math.max(this._inverseFFT(real, imag, i / testPositions * twoPi), maxValue);\n    }\n\n    return clamp(-this._inverseFFT(real, imag, this._phase) / maxValue, -1, 1);\n  }\n\n  get partials() {\n    return this._partials.slice(0, this.partialCount);\n  }\n\n  set partials(partials) {\n    this._partials = partials;\n    this._partialCount = this._partials.length;\n\n    if (partials.length) {\n      this.type = \"custom\";\n    }\n  }\n\n  get phase() {\n    return this._phase * (180 / Math.PI);\n  }\n\n  set phase(phase) {\n    this._phase = phase * Math.PI / 180; // reset the type\n\n    this.type = this._type;\n  }\n\n  asArray(length = 1024) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return generateWaveform(this, length);\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    if (this._oscillator !== null) {\n      this._oscillator.dispose();\n    }\n\n    this._wave = undefined;\n    this.frequency.dispose();\n    this.detune.dispose();\n    return this;\n  }\n\n}\n/**\n * Cache the periodic waves to avoid having to redo computations\n */\n\nOscillator._periodicWaveCache = [];","import { optionsFromArguments } from \"../core/util/Defaults\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { connectSignal } from \"./Signal\";\n/**\n * A signal operator has an input and output and modifies the signal.\n */\n\nexport class SignalOperator extends ToneAudioNode {\n  constructor() {\n    super(Object.assign(optionsFromArguments(SignalOperator.getDefaults(), arguments, [\"context\"])));\n  }\n\n  connect(destination, outputNum = 0, inputNum = 0) {\n    connectSignal(this, destination, outputNum, inputNum);\n    return this;\n  }\n\n}","import { optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isFunction } from \"../core/util/TypeCheck\";\nimport { assert } from \"../core/util/Debug\";\nimport { Signal } from \"./Signal\";\nimport { SignalOperator } from \"./SignalOperator\";\n/**\n * Wraps the native Web Audio API\n * [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n *\n * @example\n * const osc = new Tone.Oscillator().toDestination().start();\n * // multiply the output of the signal by 2 using the waveshaper's function\n * const timesTwo = new Tone.WaveShaper((val) => val * 2, 2048).connect(osc.frequency);\n * const signal = new Tone.Signal(440).connect(timesTwo);\n * @category Signal\n */\n\nexport class WaveShaper extends SignalOperator {\n  constructor() {\n    super(Object.assign(optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"])));\n    this.name = \"WaveShaper\";\n    /**\n     * the waveshaper node\n     */\n\n    this._shaper = this.context.createWaveShaper();\n    /**\n     * The input to the waveshaper node.\n     */\n\n    this.input = this._shaper;\n    /**\n     * The output from the waveshaper node\n     */\n\n    this.output = this._shaper;\n    const options = optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"]);\n\n    if (isArray(options.mapping) || options.mapping instanceof Float32Array) {\n      this.curve = Float32Array.from(options.mapping);\n    } else if (isFunction(options.mapping)) {\n      this.setMap(options.mapping, options.length);\n    }\n  }\n\n  static getDefaults() {\n    return Object.assign(Signal.getDefaults(), {\n      length: 1024\n    });\n  }\n  /**\n   * Uses a mapping function to set the value of the curve.\n   * @param mapping The function used to define the values.\n   *                The mapping function take two arguments:\n   *                the first is the value at the current position\n   *                which goes from -1 to 1 over the number of elements\n   *                in the curve array. The second argument is the array position.\n   * @example\n   * const shaper = new Tone.WaveShaper();\n   * // map the input signal from [-1, 1] to [0, 10]\n   * shaper.setMap((val, index) => (val + 1) * 5);\n   */\n\n\n  setMap(mapping, length = 1024) {\n    const array = new Float32Array(length);\n\n    for (let i = 0, len = length; i < len; i++) {\n      const normalized = i / (len - 1) * 2 - 1;\n      array[i] = mapping(normalized, i);\n    }\n\n    this.curve = array;\n    return this;\n  }\n  /**\n   * The array to set as the waveshaper curve. For linear curves\n   * array length does not make much difference, but for complex curves\n   * longer arrays will provide smoother interpolation.\n   */\n\n\n  get curve() {\n    return this._shaper.curve;\n  }\n\n  set curve(mapping) {\n    this._shaper.curve = mapping;\n  }\n  /**\n   * Specifies what type of oversampling (if any) should be used when\n   * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\".\n   */\n\n\n  get oversample() {\n    return this._shaper.oversample;\n  }\n\n  set oversample(oversampling) {\n    const isOverSampleType = [\"none\", \"2x\", \"4x\"].some(str => str.includes(oversampling));\n    assert(isOverSampleType, \"oversampling must be either 'none', '2x', or '4x'\");\n    this._shaper.oversample = oversampling;\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._shaper.disconnect();\n\n    return this;\n  }\n\n}","import { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n/**\n * AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1].\n * See {@link GainToAudio}.\n * @category Signal\n */\n\nexport class AudioToGain extends SignalOperator {\n  constructor() {\n    super(...arguments);\n    this.name = \"AudioToGain\";\n    /**\n     * The node which converts the audio ranges\n     */\n\n    this._norm = new WaveShaper({\n      context: this.context,\n      mapping: x => (x + 1) / 2\n    });\n    /**\n     * The AudioRange input [-1, 1]\n     */\n\n    this.input = this._norm;\n    /**\n     * The GainRange output [0, 1]\n     */\n\n    this.output = this._norm;\n  }\n  /**\n   * clean up\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._norm.dispose();\n\n    return this;\n  }\n\n}","import { Gain } from \"../core/context/Gain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal } from \"./Signal\";\n/**\n * Multiply two incoming signals. Or, if a number is given in the constructor,\n * multiplies the incoming signal by that value.\n *\n * @example\n * // multiply two signals\n * const mult = new Tone.Multiply();\n * const sigA = new Tone.Signal(3);\n * const sigB = new Tone.Signal(4);\n * sigA.connect(mult);\n * sigB.connect(mult.factor);\n * // output of mult is 12.\n * @example\n * // multiply a signal and a number\n * const mult = new Tone.Multiply(10);\n * const sig = new Tone.Signal(2).connect(mult);\n * // the output of mult is 20.\n * @category Signal\n */\n\nexport class Multiply extends Signal {\n  constructor() {\n    super(Object.assign(optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"])));\n    this.name = \"Multiply\";\n    /**\n     * Indicates if the value should be overridden on connection\n     */\n\n    this.override = false;\n    const options = optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"]);\n    this._mult = this.input = this.output = new Gain({\n      context: this.context,\n      minValue: options.minValue,\n      maxValue: options.maxValue\n    });\n    this.factor = this._param = this._mult.gain;\n    this.factor.setValueAtTime(options.value, 0);\n  }\n\n  static getDefaults() {\n    return Object.assign(Signal.getDefaults(), {\n      value: 0\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._mult.dispose();\n\n    return this;\n  }\n\n}","import { __awaiter } from \"tslib\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\n/**\n * An amplitude modulated oscillator node. It is implemented with\n * two oscillators, one which modulators the other's amplitude\n * through a gain node.\n * ```\n *    +-------------+       +----------+\n *    | Carrier Osc +>------> GainNode |\n *    +-------------+       |          +--->Output\n *                      +---> gain     |\n * +---------------+    |   +----------+\n * | Modulator Osc +>---+\n * +---------------+\n * ```\n * @offline 0.2 1\n * @example\n * const amOsc = new Tone.AMOscillator(30, \"sine\", \"square\").toDestination().start();\n * @category Source\n */\n\nexport class AMOscillator extends Source {\n  constructor() {\n    super(optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n    this.name = \"AMOscillator\";\n    /**\n     * convert the -1,1 output to 0,1\n     */\n\n    this._modulationScale = new AudioToGain({\n      context: this.context\n    });\n    /**\n     * the node where the modulation happens\n     */\n\n    this._modulationNode = new Gain({\n      context: this.context\n    });\n    const options = optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n    this._carrier = new Oscillator({\n      context: this.context,\n      detune: options.detune,\n      frequency: options.frequency,\n      onstop: () => this.onstop(this),\n      phase: options.phase,\n      type: options.type\n    });\n    this.frequency = this._carrier.frequency, this.detune = this._carrier.detune;\n    this._modulator = new Oscillator({\n      context: this.context,\n      phase: options.phase,\n      type: options.modulationType\n    });\n    this.harmonicity = new Multiply({\n      context: this.context,\n      units: \"positive\",\n      value: options.harmonicity\n    }); // connections\n\n    this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\n    this._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\n    this._carrier.chain(this._modulationNode, this.output);\n\n    readOnly(this, [\"frequency\", \"detune\", \"harmonicity\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(Oscillator.getDefaults(), {\n      harmonicity: 1,\n      modulationType: \"square\"\n    });\n  }\n  /**\n   * start the oscillator\n   */\n\n\n  _start(time) {\n    this._modulator.start(time);\n\n    this._carrier.start(time);\n  }\n  /**\n   * stop the oscillator\n   */\n\n\n  _stop(time) {\n    this._modulator.stop(time);\n\n    this._carrier.stop(time);\n  }\n\n  _restart(time) {\n    this._modulator.restart(time);\n\n    this._carrier.restart(time);\n  }\n  /**\n   * The type of the carrier oscillator\n   */\n\n\n  get type() {\n    return this._carrier.type;\n  }\n\n  set type(type) {\n    this._carrier.type = type;\n  }\n\n  get baseType() {\n    return this._carrier.baseType;\n  }\n\n  set baseType(baseType) {\n    this._carrier.baseType = baseType;\n  }\n\n  get partialCount() {\n    return this._carrier.partialCount;\n  }\n\n  set partialCount(partialCount) {\n    this._carrier.partialCount = partialCount;\n  }\n  /**\n   * The type of the modulator oscillator\n   */\n\n\n  get modulationType() {\n    return this._modulator.type;\n  }\n\n  set modulationType(type) {\n    this._modulator.type = type;\n  }\n\n  get phase() {\n    return this._carrier.phase;\n  }\n\n  set phase(phase) {\n    this._carrier.phase = phase;\n    this._modulator.phase = phase;\n  }\n\n  get partials() {\n    return this._carrier.partials;\n  }\n\n  set partials(partials) {\n    this._carrier.partials = partials;\n  }\n\n  asArray(length = 1024) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return generateWaveform(this, length);\n    });\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n    this.frequency.dispose();\n    this.detune.dispose();\n    this.harmonicity.dispose();\n\n    this._carrier.dispose();\n\n    this._modulator.dispose();\n\n    this._modulationNode.dispose();\n\n    this._modulationScale.dispose();\n\n    return this;\n  }\n\n}","import { __awaiter } from \"tslib\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\n/**\n * FMOscillator implements a frequency modulation synthesis\n * ```\n *                                              +-------------+\n * +---------------+        +-------------+     | Carrier Osc |\n * | Modulator Osc +>-------> GainNode    |     |             +--->Output\n * +---------------+        |             +>----> frequency   |\n *                       +--> gain        |     +-------------+\n *                       |  +-------------+\n * +-----------------+   |\n * | modulationIndex +>--+\n * +-----------------+\n * ```\n *\n * @offline 0.1 1\n * @example\n * const fmOsc = new Tone.FMOscillator({\n * \tfrequency: 200,\n * \ttype: \"square\",\n * \tmodulationType: \"triangle\",\n * \tharmonicity: 0.2,\n * \tmodulationIndex: 3\n * }).toDestination().start();\n * @category Source\n */\n\nexport class FMOscillator extends Source {\n  constructor() {\n    super(optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n    this.name = \"FMOscillator\";\n    /**\n     * the node where the modulation happens\n     */\n\n    this._modulationNode = new Gain({\n      context: this.context,\n      gain: 0\n    });\n    const options = optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n    this._carrier = new Oscillator({\n      context: this.context,\n      detune: options.detune,\n      frequency: 0,\n      onstop: () => this.onstop(this),\n      phase: options.phase,\n      type: options.type\n    });\n    this.detune = this._carrier.detune;\n    this.frequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    this._modulator = new Oscillator({\n      context: this.context,\n      phase: options.phase,\n      type: options.modulationType\n    });\n    this.harmonicity = new Multiply({\n      context: this.context,\n      units: \"positive\",\n      value: options.harmonicity\n    });\n    this.modulationIndex = new Multiply({\n      context: this.context,\n      units: \"positive\",\n      value: options.modulationIndex\n    }); // connections\n\n    this.frequency.connect(this._carrier.frequency);\n    this.frequency.chain(this.harmonicity, this._modulator.frequency);\n    this.frequency.chain(this.modulationIndex, this._modulationNode);\n\n    this._modulator.connect(this._modulationNode.gain);\n\n    this._modulationNode.connect(this._carrier.frequency);\n\n    this._carrier.connect(this.output);\n\n    this.detune.connect(this._modulator.detune);\n    readOnly(this, [\"modulationIndex\", \"frequency\", \"detune\", \"harmonicity\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(Oscillator.getDefaults(), {\n      harmonicity: 1,\n      modulationIndex: 2,\n      modulationType: \"square\"\n    });\n  }\n  /**\n   * start the oscillator\n   */\n\n\n  _start(time) {\n    this._modulator.start(time);\n\n    this._carrier.start(time);\n  }\n  /**\n   * stop the oscillator\n   */\n\n\n  _stop(time) {\n    this._modulator.stop(time);\n\n    this._carrier.stop(time);\n  }\n\n  _restart(time) {\n    this._modulator.restart(time);\n\n    this._carrier.restart(time);\n\n    return this;\n  }\n\n  get type() {\n    return this._carrier.type;\n  }\n\n  set type(type) {\n    this._carrier.type = type;\n  }\n\n  get baseType() {\n    return this._carrier.baseType;\n  }\n\n  set baseType(baseType) {\n    this._carrier.baseType = baseType;\n  }\n\n  get partialCount() {\n    return this._carrier.partialCount;\n  }\n\n  set partialCount(partialCount) {\n    this._carrier.partialCount = partialCount;\n  }\n  /**\n   * The type of the modulator oscillator\n   */\n\n\n  get modulationType() {\n    return this._modulator.type;\n  }\n\n  set modulationType(type) {\n    this._modulator.type = type;\n  }\n\n  get phase() {\n    return this._carrier.phase;\n  }\n\n  set phase(phase) {\n    this._carrier.phase = phase;\n    this._modulator.phase = phase;\n  }\n\n  get partials() {\n    return this._carrier.partials;\n  }\n\n  set partials(partials) {\n    this._carrier.partials = partials;\n  }\n\n  asArray(length = 1024) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return generateWaveform(this, length);\n    });\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n    this.frequency.dispose();\n    this.harmonicity.dispose();\n\n    this._carrier.dispose();\n\n    this._modulator.dispose();\n\n    this._modulationNode.dispose();\n\n    this.modulationIndex.dispose();\n    return this;\n  }\n\n}","import { __awaiter } from \"tslib\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { WaveShaper } from \"../../signal/WaveShaper\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\n/**\n * PulseOscillator is an oscillator with control over pulse width,\n * also known as the duty cycle. At 50% duty cycle (width = 0) the wave is\n * a square wave.\n * [Read more](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n * ```\n *    width = -0.25        width = 0.0          width = 0.25\n *\n *   +-----+            +-------+       +    +-------+     +-+\n *   |     |            |       |       |            |     |\n *   |     |            |       |       |            |     |\n * +-+     +-------+    +       +-------+            +-----+\n *\n *\n *    width = -0.5                              width = 0.5\n *\n *     +---+                                 +-------+   +---+\n *     |   |                                         |   |\n *     |   |                                         |   |\n * +---+   +-------+                                 +---+\n *\n *\n *    width = -0.75                             width = 0.75\n *\n *       +-+                                 +-------+ +-----+\n *       | |                                         | |\n *       | |                                         | |\n * +-----+ +-------+                                 +-+\n * ```\n * @offline 0.1 1\n * @example\n * const pulse = new Tone.PulseOscillator(50, 0.4).toDestination().start();\n * @category Source\n */\n\nexport class PulseOscillator extends Source {\n  constructor() {\n    super(optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]));\n    this.name = \"PulseOscillator\";\n    /**\n     * gate the width amount\n     */\n\n    this._widthGate = new Gain({\n      context: this.context,\n      gain: 0\n    });\n    /**\n     * Threshold the signal to turn it into a square\n     */\n\n    this._thresh = new WaveShaper({\n      context: this.context,\n      mapping: val => val <= 0 ? -1 : 1\n    });\n    const options = optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]);\n    this.width = new Signal({\n      context: this.context,\n      units: \"audioRange\",\n      value: options.width\n    });\n    this._triangle = new Oscillator({\n      context: this.context,\n      detune: options.detune,\n      frequency: options.frequency,\n      onstop: () => this.onstop(this),\n      phase: options.phase,\n      type: \"triangle\"\n    });\n    this.frequency = this._triangle.frequency;\n    this.detune = this._triangle.detune; // connections\n\n    this._triangle.chain(this._thresh, this.output);\n\n    this.width.chain(this._widthGate, this._thresh);\n    readOnly(this, [\"width\", \"frequency\", \"detune\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(Source.getDefaults(), {\n      detune: 0,\n      frequency: 440,\n      phase: 0,\n      type: \"pulse\",\n      width: 0.2\n    });\n  }\n  /**\n   * start the oscillator\n   */\n\n\n  _start(time) {\n    time = this.toSeconds(time);\n\n    this._triangle.start(time);\n\n    this._widthGate.gain.setValueAtTime(1, time);\n  }\n  /**\n   * stop the oscillator\n   */\n\n\n  _stop(time) {\n    time = this.toSeconds(time);\n\n    this._triangle.stop(time); // the width is still connected to the output.\n    // that needs to be stopped also\n\n\n    this._widthGate.gain.cancelScheduledValues(time);\n\n    this._widthGate.gain.setValueAtTime(0, time);\n  }\n\n  _restart(time) {\n    this._triangle.restart(time);\n\n    this._widthGate.gain.cancelScheduledValues(time);\n\n    this._widthGate.gain.setValueAtTime(1, time);\n  }\n  /**\n   * The phase of the oscillator in degrees.\n   */\n\n\n  get phase() {\n    return this._triangle.phase;\n  }\n\n  set phase(phase) {\n    this._triangle.phase = phase;\n  }\n  /**\n   * The type of the oscillator. Always returns \"pulse\".\n   */\n\n\n  get type() {\n    return \"pulse\";\n  }\n  /**\n   * The baseType of the oscillator. Always returns \"pulse\".\n   */\n\n\n  get baseType() {\n    return \"pulse\";\n  }\n  /**\n   * The partials of the waveform. Cannot set partials for this waveform type\n   */\n\n\n  get partials() {\n    return [];\n  }\n  /**\n   * No partials for this waveform type.\n   */\n\n\n  get partialCount() {\n    return 0;\n  }\n  /**\n   * *Internal use* The carrier oscillator type is fed through the\n   * waveshaper node to create the pulse. Using different carrier oscillators\n   * changes oscillator's behavior.\n   */\n\n\n  set carrierType(type) {\n    this._triangle.type = type;\n  }\n\n  asArray(length = 1024) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return generateWaveform(this, length);\n    });\n  }\n  /**\n   * Clean up method.\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._triangle.dispose();\n\n    this.width.dispose();\n\n    this._widthGate.dispose();\n\n    this._thresh.dispose();\n\n    return this;\n  }\n\n}","import { __awaiter } from \"tslib\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp, readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\nimport { assertRange } from \"../../core/util/Debug\";\n/**\n * FatOscillator is an array of oscillators with detune spread between the oscillators\n * @example\n * const fatOsc = new Tone.FatOscillator(\"Ab3\", \"sawtooth\", 40).toDestination().start();\n * @category Source\n */\n\nexport class FatOscillator extends Source {\n  constructor() {\n    super(optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]));\n    this.name = \"FatOscillator\";\n    /**\n     * The array of oscillators\n     */\n\n    this._oscillators = [];\n    const options = optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]);\n    this.frequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    this.detune = new Signal({\n      context: this.context,\n      units: \"cents\",\n      value: options.detune\n    });\n    this._spread = options.spread;\n    this._type = options.type;\n    this._phase = options.phase;\n    this._partials = options.partials;\n    this._partialCount = options.partialCount; // set the count initially\n\n    this.count = options.count;\n    readOnly(this, [\"frequency\", \"detune\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(Oscillator.getDefaults(), {\n      count: 3,\n      spread: 20,\n      type: \"sawtooth\"\n    });\n  }\n  /**\n   * start the oscillator\n   */\n\n\n  _start(time) {\n    time = this.toSeconds(time);\n\n    this._forEach(osc => osc.start(time));\n  }\n  /**\n   * stop the oscillator\n   */\n\n\n  _stop(time) {\n    time = this.toSeconds(time);\n\n    this._forEach(osc => osc.stop(time));\n  }\n\n  _restart(time) {\n    this._forEach(osc => osc.restart(time));\n  }\n  /**\n   * Iterate over all of the oscillators\n   */\n\n\n  _forEach(iterator) {\n    for (let i = 0; i < this._oscillators.length; i++) {\n      iterator(this._oscillators[i], i);\n    }\n  }\n  /**\n   * The type of the oscillator\n   */\n\n\n  get type() {\n    return this._type;\n  }\n\n  set type(type) {\n    this._type = type;\n\n    this._forEach(osc => osc.type = type);\n  }\n  /**\n   * The detune spread between the oscillators. If \"count\" is\n   * set to 3 oscillators and the \"spread\" is set to 40,\n   * the three oscillators would be detuned like this: [-20, 0, 20]\n   * for a total detune spread of 40 cents.\n   * @example\n   * const fatOsc = new Tone.FatOscillator().toDestination().start();\n   * fatOsc.spread = 70;\n   */\n\n\n  get spread() {\n    return this._spread;\n  }\n\n  set spread(spread) {\n    this._spread = spread;\n\n    if (this._oscillators.length > 1) {\n      const start = -spread / 2;\n      const step = spread / (this._oscillators.length - 1);\n\n      this._forEach((osc, i) => osc.detune.value = start + step * i);\n    }\n  }\n  /**\n   * The number of detuned oscillators. Must be an integer greater than 1.\n   * @example\n   * const fatOsc = new Tone.FatOscillator(\"C#3\", \"sawtooth\").toDestination().start();\n   * // use 4 sawtooth oscillators\n   * fatOsc.count = 4;\n   */\n\n\n  get count() {\n    return this._oscillators.length;\n  }\n\n  set count(count) {\n    assertRange(count, 1);\n\n    if (this._oscillators.length !== count) {\n      // dispose the previous oscillators\n      this._forEach(osc => osc.dispose());\n\n      this._oscillators = [];\n\n      for (let i = 0; i < count; i++) {\n        const osc = new Oscillator({\n          context: this.context,\n          volume: -6 - count * 1.1,\n          type: this._type,\n          phase: this._phase + i / count * 360,\n          partialCount: this._partialCount,\n          onstop: i === 0 ? () => this.onstop(this) : noOp\n        });\n\n        if (this.type === \"custom\") {\n          osc.partials = this._partials;\n        }\n\n        this.frequency.connect(osc.frequency);\n        this.detune.connect(osc.detune);\n        osc.detune.overridden = false;\n        osc.connect(this.output);\n        this._oscillators[i] = osc;\n      } // set the spread\n\n\n      this.spread = this._spread;\n\n      if (this.state === \"started\") {\n        this._forEach(osc => osc.start());\n      }\n    }\n  }\n\n  get phase() {\n    return this._phase;\n  }\n\n  set phase(phase) {\n    this._phase = phase;\n\n    this._forEach(osc => osc.phase = phase);\n  }\n\n  get baseType() {\n    return this._oscillators[0].baseType;\n  }\n\n  set baseType(baseType) {\n    this._forEach(osc => osc.baseType = baseType);\n\n    this._type = this._oscillators[0].type;\n  }\n\n  get partials() {\n    return this._oscillators[0].partials;\n  }\n\n  set partials(partials) {\n    this._partials = partials;\n    this._partialCount = this._partials.length;\n\n    if (partials.length) {\n      this._type = \"custom\";\n\n      this._forEach(osc => osc.partials = partials);\n    }\n  }\n\n  get partialCount() {\n    return this._oscillators[0].partialCount;\n  }\n\n  set partialCount(partialCount) {\n    this._partialCount = partialCount;\n\n    this._forEach(osc => osc.partialCount = partialCount);\n\n    this._type = this._oscillators[0].type;\n  }\n\n  asArray(length = 1024) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return generateWaveform(this, length);\n    });\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n    this.frequency.dispose();\n    this.detune.dispose();\n\n    this._forEach(osc => osc.dispose());\n\n    return this;\n  }\n\n}","import { __awaiter } from \"tslib\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\n/**\n * PWMOscillator modulates the width of a Tone.PulseOscillator\n * at the modulationFrequency. This has the effect of continuously\n * changing the timbre of the oscillator by altering the harmonics\n * generated.\n * @offline 0.1 1\n * @example\n * const pwm = new Tone.PWMOscillator(60, 0.3).toDestination().start();\n * @category Source\n */\n\nexport class PWMOscillator extends Source {\n  constructor() {\n    super(optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]));\n    this.name = \"PWMOscillator\";\n    this.sourceType = \"pwm\";\n    /**\n     * Scale the oscillator so it doesn't go silent\n     * at the extreme values.\n     */\n\n    this._scale = new Multiply({\n      context: this.context,\n      value: 2\n    });\n    const options = optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]);\n    this._pulse = new PulseOscillator({\n      context: this.context,\n      frequency: options.modulationFrequency\n    }); // change the pulse oscillator type\n\n    this._pulse.carrierType = \"sine\";\n    this.modulationFrequency = this._pulse.frequency;\n    this._modulator = new Oscillator({\n      context: this.context,\n      detune: options.detune,\n      frequency: options.frequency,\n      onstop: () => this.onstop(this),\n      phase: options.phase\n    });\n    this.frequency = this._modulator.frequency;\n    this.detune = this._modulator.detune; // connections\n\n    this._modulator.chain(this._scale, this._pulse.width);\n\n    this._pulse.connect(this.output);\n\n    readOnly(this, [\"modulationFrequency\", \"frequency\", \"detune\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(Source.getDefaults(), {\n      detune: 0,\n      frequency: 440,\n      modulationFrequency: 0.4,\n      phase: 0,\n      type: \"pwm\"\n    });\n  }\n  /**\n   * start the oscillator\n   */\n\n\n  _start(time) {\n    time = this.toSeconds(time);\n\n    this._modulator.start(time);\n\n    this._pulse.start(time);\n  }\n  /**\n   * stop the oscillator\n   */\n\n\n  _stop(time) {\n    time = this.toSeconds(time);\n\n    this._modulator.stop(time);\n\n    this._pulse.stop(time);\n  }\n  /**\n   * restart the oscillator\n   */\n\n\n  _restart(time) {\n    this._modulator.restart(time);\n\n    this._pulse.restart(time);\n  }\n  /**\n   * The type of the oscillator. Always returns \"pwm\".\n   */\n\n\n  get type() {\n    return \"pwm\";\n  }\n  /**\n   * The baseType of the oscillator. Always returns \"pwm\".\n   */\n\n\n  get baseType() {\n    return \"pwm\";\n  }\n  /**\n   * The partials of the waveform. Cannot set partials for this waveform type\n   */\n\n\n  get partials() {\n    return [];\n  }\n  /**\n   * No partials for this waveform type.\n   */\n\n\n  get partialCount() {\n    return 0;\n  }\n  /**\n   * The phase of the oscillator in degrees.\n   */\n\n\n  get phase() {\n    return this._modulator.phase;\n  }\n\n  set phase(phase) {\n    this._modulator.phase = phase;\n  }\n\n  asArray(length = 1024) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return generateWaveform(this, length);\n    });\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._pulse.dispose();\n\n    this._scale.dispose();\n\n    this._modulator.dispose();\n\n    return this;\n  }\n\n}","import { __awaiter } from \"tslib\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { isNumber, isString } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { AMOscillator } from \"./AMOscillator\";\nimport { FatOscillator } from \"./FatOscillator\";\nimport { FMOscillator } from \"./FMOscillator\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\nimport { PWMOscillator } from \"./PWMOscillator\";\nconst OmniOscillatorSourceMap = {\n  am: AMOscillator,\n  fat: FatOscillator,\n  fm: FMOscillator,\n  oscillator: Oscillator,\n  pulse: PulseOscillator,\n  pwm: PWMOscillator\n};\n/**\n * OmniOscillator aggregates all of the oscillator types into one.\n * @offline 0.1 1\n * @example\n * const omniOsc = new Tone.OmniOscillator(\"C#4\", \"pwm\").toDestination().start();\n * @category Source\n */\n\nexport class OmniOscillator extends Source {\n  constructor() {\n    super(optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n    this.name = \"OmniOscillator\";\n    const options = optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n    this.frequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    this.detune = new Signal({\n      context: this.context,\n      units: \"cents\",\n      value: options.detune\n    });\n    readOnly(this, [\"frequency\", \"detune\"]); // set the options\n\n    this.set(options);\n  }\n\n  static getDefaults() {\n    return Object.assign(Oscillator.getDefaults(), FMOscillator.getDefaults(), AMOscillator.getDefaults(), FatOscillator.getDefaults(), PulseOscillator.getDefaults(), PWMOscillator.getDefaults());\n  }\n  /**\n   * start the oscillator\n   */\n\n\n  _start(time) {\n    this._oscillator.start(time);\n  }\n  /**\n   * start the oscillator\n   */\n\n\n  _stop(time) {\n    this._oscillator.stop(time);\n  }\n\n  _restart(time) {\n    this._oscillator.restart(time);\n\n    return this;\n  }\n  /**\n   * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\n   * prefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\n   * types. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\n   * oscillator's class are accessible when the oscillator is set to that type, but throws an error\n   * when it's not.\n   * @example\n   * const omniOsc = new Tone.OmniOscillator().toDestination().start();\n   * omniOsc.type = \"pwm\";\n   * // modulationFrequency is parameter which is available\n   * // only when the type is \"pwm\".\n   * omniOsc.modulationFrequency.value = 0.5;\n   */\n\n\n  get type() {\n    let prefix = \"\";\n\n    if ([\"am\", \"fm\", \"fat\"].some(p => this._sourceType === p)) {\n      prefix = this._sourceType;\n    }\n\n    return prefix + this._oscillator.type;\n  }\n\n  set type(type) {\n    if (type.substr(0, 2) === \"fm\") {\n      this._createNewOscillator(\"fm\");\n\n      this._oscillator = this._oscillator;\n      this._oscillator.type = type.substr(2);\n    } else if (type.substr(0, 2) === \"am\") {\n      this._createNewOscillator(\"am\");\n\n      this._oscillator = this._oscillator;\n      this._oscillator.type = type.substr(2);\n    } else if (type.substr(0, 3) === \"fat\") {\n      this._createNewOscillator(\"fat\");\n\n      this._oscillator = this._oscillator;\n      this._oscillator.type = type.substr(3);\n    } else if (type === \"pwm\") {\n      this._createNewOscillator(\"pwm\");\n\n      this._oscillator = this._oscillator;\n    } else if (type === \"pulse\") {\n      this._createNewOscillator(\"pulse\");\n    } else {\n      this._createNewOscillator(\"oscillator\");\n\n      this._oscillator = this._oscillator;\n      this._oscillator.type = type;\n    }\n  }\n  /**\n   * The value is an empty array when the type is not \"custom\".\n   * This is not available on \"pwm\" and \"pulse\" oscillator types.\n   * See [[Oscillator.partials]]\n   */\n\n\n  get partials() {\n    return this._oscillator.partials;\n  }\n\n  set partials(partials) {\n    if (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n      this._oscillator.partials = partials;\n    }\n  }\n\n  get partialCount() {\n    return this._oscillator.partialCount;\n  }\n\n  set partialCount(partialCount) {\n    if (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n      this._oscillator.partialCount = partialCount;\n    }\n  }\n\n  set(props) {\n    // make sure the type is set first\n    if (Reflect.has(props, \"type\") && props.type) {\n      this.type = props.type;\n    } // then set the rest\n\n\n    super.set(props);\n    return this;\n  }\n  /**\n   * connect the oscillator to the frequency and detune signals\n   */\n\n\n  _createNewOscillator(oscType) {\n    if (oscType !== this._sourceType) {\n      this._sourceType = oscType;\n      const OscConstructor = OmniOscillatorSourceMap[oscType]; // short delay to avoid clicks on the change\n\n      const now = this.now();\n\n      if (this._oscillator) {\n        const oldOsc = this._oscillator;\n        oldOsc.stop(now); // dispose the old one\n\n        this.context.setTimeout(() => oldOsc.dispose(), this.blockTime);\n      }\n\n      this._oscillator = new OscConstructor({\n        context: this.context\n      });\n      this.frequency.connect(this._oscillator.frequency);\n      this.detune.connect(this._oscillator.detune);\n\n      this._oscillator.connect(this.output);\n\n      this._oscillator.onstop = () => this.onstop(this);\n\n      if (this.state === \"started\") {\n        this._oscillator.start(now);\n      }\n    }\n  }\n\n  get phase() {\n    return this._oscillator.phase;\n  }\n\n  set phase(phase) {\n    this._oscillator.phase = phase;\n  }\n  /**\n   * The source type of the oscillator.\n   * @example\n   * const omniOsc = new Tone.OmniOscillator(440, \"fmsquare\");\n   * console.log(omniOsc.sourceType); // 'fm'\n   */\n\n\n  get sourceType() {\n    return this._sourceType;\n  }\n\n  set sourceType(sType) {\n    // the basetype defaults to sine\n    let baseType = \"sine\";\n\n    if (this._oscillator.type !== \"pwm\" && this._oscillator.type !== \"pulse\") {\n      baseType = this._oscillator.type;\n    } // set the type\n\n\n    if (sType === \"fm\") {\n      this.type = \"fm\" + baseType;\n    } else if (sType === \"am\") {\n      this.type = \"am\" + baseType;\n    } else if (sType === \"fat\") {\n      this.type = \"fat\" + baseType;\n    } else if (sType === \"oscillator\") {\n      this.type = baseType;\n    } else if (sType === \"pulse\") {\n      this.type = \"pulse\";\n    } else if (sType === \"pwm\") {\n      this.type = \"pwm\";\n    }\n  }\n\n  _getOscType(osc, sourceType) {\n    return osc instanceof OmniOscillatorSourceMap[sourceType];\n  }\n  /**\n   * The base type of the oscillator. See [[Oscillator.baseType]]\n   * @example\n   * const omniOsc = new Tone.OmniOscillator(440, \"fmsquare4\");\n   * console.log(omniOsc.sourceType, omniOsc.baseType, omniOsc.partialCount);\n   */\n\n\n  get baseType() {\n    return this._oscillator.baseType;\n  }\n\n  set baseType(baseType) {\n    if (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\") && baseType !== \"pulse\" && baseType !== \"pwm\") {\n      this._oscillator.baseType = baseType;\n    }\n  }\n  /**\n   * The width of the oscillator when sourceType === \"pulse\".\n   * See [[PWMOscillator.width]]\n   */\n\n\n  get width() {\n    if (this._getOscType(this._oscillator, \"pulse\")) {\n      return this._oscillator.width;\n    } else {\n      return undefined;\n    }\n  }\n  /**\n   * The number of detuned oscillators when sourceType === \"fat\".\n   * See [[FatOscillator.count]]\n   */\n\n\n  get count() {\n    if (this._getOscType(this._oscillator, \"fat\")) {\n      return this._oscillator.count;\n    } else {\n      return undefined;\n    }\n  }\n\n  set count(count) {\n    if (this._getOscType(this._oscillator, \"fat\") && isNumber(count)) {\n      this._oscillator.count = count;\n    }\n  }\n  /**\n   * The detune spread between the oscillators when sourceType === \"fat\".\n   * See [[FatOscillator.count]]\n   */\n\n\n  get spread() {\n    if (this._getOscType(this._oscillator, \"fat\")) {\n      return this._oscillator.spread;\n    } else {\n      return undefined;\n    }\n  }\n\n  set spread(spread) {\n    if (this._getOscType(this._oscillator, \"fat\") && isNumber(spread)) {\n      this._oscillator.spread = spread;\n    }\n  }\n  /**\n   * The type of the modulator oscillator. Only if the oscillator is set to \"am\" or \"fm\" types.\n   * See [[AMOscillator]] or [[FMOscillator]]\n   */\n\n\n  get modulationType() {\n    if (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n      return this._oscillator.modulationType;\n    } else {\n      return undefined;\n    }\n  }\n\n  set modulationType(mType) {\n    if ((this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) && isString(mType)) {\n      this._oscillator.modulationType = mType;\n    }\n  }\n  /**\n   * The modulation index when the sourceType === \"fm\"\n   * See [[FMOscillator]].\n   */\n\n\n  get modulationIndex() {\n    if (this._getOscType(this._oscillator, \"fm\")) {\n      return this._oscillator.modulationIndex;\n    } else {\n      return undefined;\n    }\n  }\n  /**\n   * Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n   * See [[AMOscillator]] or [[FMOscillator]]\n   */\n\n\n  get harmonicity() {\n    if (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n      return this._oscillator.harmonicity;\n    } else {\n      return undefined;\n    }\n  }\n  /**\n   * The modulationFrequency Signal of the oscillator when sourceType === \"pwm\"\n   * see [[PWMOscillator]]\n   * @min 0.1\n   * @max 5\n   */\n\n\n  get modulationFrequency() {\n    if (this._getOscType(this._oscillator, \"pwm\")) {\n      return this._oscillator.modulationFrequency;\n    } else {\n      return undefined;\n    }\n  }\n\n  asArray(length = 1024) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return generateWaveform(this, length);\n    });\n  }\n\n  dispose() {\n    super.dispose();\n    this.detune.dispose();\n    this.frequency.dispose();\n\n    this._oscillator.dispose();\n\n    return this;\n  }\n\n}","import { connectSeries } from \"../core/context/ToneAudioNode\";\nimport { Gain } from \"../core/context/Gain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal } from \"./Signal\";\n/**\n * Add a signal and a number or two signals. When no value is\n * passed into the constructor, Tone.Add will sum input and `addend`\n * If a value is passed into the constructor, the it will be added to the input.\n *\n * @offline 0.5 1\n * @example\n * const add = new Tone.Add(2).toDestination();\n * add.addend.setValueAtTime(1, 0.2);\n * const signal = new Tone.Signal(2);\n * // add a signal and a scalar\n * signal.connect(add);\n * signal.setValueAtTime(1, 0.1);\n * @category Signal\n */\n\nexport class Add extends Signal {\n  constructor() {\n    super(Object.assign(optionsFromArguments(Add.getDefaults(), arguments, [\"value\"])));\n    this.override = false;\n    this.name = \"Add\";\n    /**\n     * the summing node\n     */\n\n    this._sum = new Gain({\n      context: this.context\n    });\n    this.input = this._sum;\n    this.output = this._sum;\n    /**\n     * The value which is added to the input signal\n     */\n\n    this.addend = this._param;\n    connectSeries(this._constantSource, this._sum);\n  }\n\n  static getDefaults() {\n    return Object.assign(Signal.getDefaults(), {\n      value: 0\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._sum.dispose();\n\n    return this;\n  }\n\n}","import { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Add } from \"./Add\";\nimport { Multiply } from \"./Multiply\";\nimport { SignalOperator } from \"./SignalOperator\";\n/**\n * Performs a linear scaling on an input signal.\n * Scales a NormalRange input to between\n * outputMin and outputMax.\n *\n * @example\n * const scale = new Tone.Scale(50, 100);\n * const signal = new Tone.Signal(0.5).connect(scale);\n * // the output of scale equals 75\n * @category Signal\n */\n\nexport class Scale extends SignalOperator {\n  constructor() {\n    super(Object.assign(optionsFromArguments(Scale.getDefaults(), arguments, [\"min\", \"max\"])));\n    this.name = \"Scale\";\n    const options = optionsFromArguments(Scale.getDefaults(), arguments, [\"min\", \"max\"]);\n    this._mult = this.input = new Multiply({\n      context: this.context,\n      value: options.max - options.min\n    });\n    this._add = this.output = new Add({\n      context: this.context,\n      value: options.min\n    });\n    this._min = options.min;\n    this._max = options.max;\n    this.input.connect(this.output);\n  }\n\n  static getDefaults() {\n    return Object.assign(SignalOperator.getDefaults(), {\n      max: 1,\n      min: 0\n    });\n  }\n  /**\n   * The minimum output value. This number is output when the value input value is 0.\n   */\n\n\n  get min() {\n    return this._min;\n  }\n\n  set min(min) {\n    this._min = min;\n\n    this._setRange();\n  }\n  /**\n   * The maximum output value. This number is output when the value input value is 1.\n   */\n\n\n  get max() {\n    return this._max;\n  }\n\n  set max(max) {\n    this._max = max;\n\n    this._setRange();\n  }\n  /**\n   * set the values\n   */\n\n\n  _setRange() {\n    this._add.value = this._min;\n    this._mult.value = this._max - this._min;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._add.dispose();\n\n    this._mult.dispose();\n\n    return this;\n  }\n\n}","import { Gain } from \"../core/context/Gain\";\nimport { connect, disconnect } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { SignalOperator } from \"./SignalOperator\";\n/**\n * Tone.Zero outputs 0's at audio-rate. The reason this has to be\n * it's own class is that many browsers optimize out Tone.Signal\n * with a value of 0 and will not process nodes further down the graph.\n * @category Signal\n */\n\nexport class Zero extends SignalOperator {\n  constructor() {\n    super(Object.assign(optionsFromArguments(Zero.getDefaults(), arguments)));\n    this.name = \"Zero\";\n    /**\n     * The gain node which connects the constant source to the output\n     */\n\n    this._gain = new Gain({\n      context: this.context\n    });\n    /**\n     * Only outputs 0\n     */\n\n    this.output = this._gain;\n    /**\n     * no input node\n     */\n\n    this.input = undefined;\n    connect(this.context.getConstant(0), this._gain);\n  }\n  /**\n   * clean up\n   */\n\n\n  dispose() {\n    super.dispose();\n    disconnect(this.context.getConstant(0), this._gain);\n    return this;\n  }\n\n}","import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Scale } from \"../../signal/Scale\";\nimport { connectSignal, Signal } from \"../../signal/Signal\";\nimport { Zero } from \"../../signal/Zero\";\nimport { Oscillator } from \"./Oscillator\";\n/**\n * LFO stands for low frequency oscillator. LFO produces an output signal\n * which can be attached to an AudioParam or Tone.Signal\n * in order to modulate that parameter with an oscillator. The LFO can\n * also be synced to the transport to start/stop and change when the tempo changes.\n * @offline 0.5 1\n * @example\n * const lfo = new Tone.LFO(\"4n\", 400, 4000).start().toDestination();\n * @category Source\n */\n\nexport class LFO extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(LFO.getDefaults(), arguments, [\"frequency\", \"min\", \"max\"]));\n    this.name = \"LFO\";\n    /**\n     * The value that the LFO outputs when it's stopped\n     */\n\n    this._stoppedValue = 0;\n    /**\n     * A private placeholder for the units\n     */\n\n    this._units = \"number\";\n    /**\n     * If the input value is converted using the [[units]]\n     */\n\n    this.convert = true;\n    /**\n     * Private methods borrowed from Param\n     */\n    // @ts-ignore\n\n    this._fromType = Param.prototype._fromType; // @ts-ignore\n\n    this._toType = Param.prototype._toType; // @ts-ignore\n\n    this._is = Param.prototype._is; // @ts-ignore\n\n    this._clampValue = Param.prototype._clampValue;\n    const options = optionsFromArguments(LFO.getDefaults(), arguments, [\"frequency\", \"min\", \"max\"]); // @ts-ignore\n\n    this._oscillator = new Oscillator({\n      context: this.context,\n      frequency: options.frequency,\n      type: options.type\n    });\n    this.frequency = this._oscillator.frequency;\n    this._amplitudeGain = new Gain({\n      context: this.context,\n      gain: options.amplitude,\n      units: \"normalRange\"\n    });\n    this.amplitude = this._amplitudeGain.gain;\n    this._stoppedSignal = new Signal({\n      context: this.context,\n      units: \"audioRange\",\n      value: 0\n    });\n    this._zeros = new Zero({\n      context: this.context\n    });\n    this._a2g = new AudioToGain({\n      context: this.context\n    });\n    this._scaler = this.output = new Scale({\n      context: this.context,\n      max: options.max,\n      min: options.min\n    });\n    this.units = options.units;\n    this.min = options.min;\n    this.max = options.max; // connect it up\n\n    this._oscillator.chain(this._a2g, this._amplitudeGain, this._scaler);\n\n    this._zeros.connect(this._a2g);\n\n    this._stoppedSignal.connect(this._a2g);\n\n    readOnly(this, [\"amplitude\", \"frequency\"]);\n    this.phase = options.phase;\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      amplitude: 1,\n      frequency: \"4n\",\n      max: 1,\n      min: 0,\n      phase: 0,\n      type: \"sine\",\n      units: \"number\"\n    });\n  }\n  /**\n   * Start the LFO.\n   * @param time The time the LFO will start\n   */\n\n\n  start(time) {\n    time = this.toSeconds(time);\n\n    this._stoppedSignal.setValueAtTime(0, time);\n\n    this._oscillator.start(time);\n\n    return this;\n  }\n  /**\n   * Stop the LFO.\n   * @param  time The time the LFO will stop\n   */\n\n\n  stop(time) {\n    time = this.toSeconds(time);\n\n    this._stoppedSignal.setValueAtTime(this._stoppedValue, time);\n\n    this._oscillator.stop(time);\n\n    return this;\n  }\n  /**\n   * Sync the start/stop/pause to the transport\n   * and the frequency to the bpm of the transport\n   * @example\n   * const lfo = new Tone.LFO(\"8n\");\n   * lfo.sync().start(0);\n   * // the rate of the LFO will always be an eighth note, even as the tempo changes\n   */\n\n\n  sync() {\n    this._oscillator.sync();\n\n    this._oscillator.syncFrequency();\n\n    return this;\n  }\n  /**\n   * unsync the LFO from transport control\n   */\n\n\n  unsync() {\n    this._oscillator.unsync();\n\n    this._oscillator.unsyncFrequency();\n\n    return this;\n  }\n  /**\n   * The minimum output of the LFO.\n   */\n\n\n  get min() {\n    return this._toType(this._scaler.min);\n  }\n\n  set min(min) {\n    min = this._fromType(min);\n    this._scaler.min = min;\n  }\n  /**\n   * The maximum output of the LFO.\n   */\n\n\n  get max() {\n    return this._toType(this._scaler.max);\n  }\n\n  set max(max) {\n    max = this._fromType(max);\n    this._scaler.max = max;\n  }\n  /**\n   * The type of the oscillator: See [[Oscillator.type]]\n   */\n\n\n  get type() {\n    return this._oscillator.type;\n  }\n\n  set type(type) {\n    this._oscillator.type = type;\n    this._stoppedValue = this._oscillator.getInitialValue();\n    this._stoppedSignal.value = this._stoppedValue;\n  }\n  /**\n   * The phase of the LFO.\n   */\n\n\n  get phase() {\n    return this._oscillator.phase;\n  }\n\n  set phase(phase) {\n    this._oscillator.phase = phase;\n    this._stoppedValue = this._oscillator.getInitialValue();\n    this._stoppedSignal.value = this._stoppedValue;\n  }\n  /**\n   * The output units of the LFO.\n   */\n\n\n  get units() {\n    return this._units;\n  }\n\n  set units(val) {\n    const currentMin = this.min;\n    const currentMax = this.max; // convert the min and the max\n\n    this._units = val;\n    this.min = currentMin;\n    this.max = currentMax;\n  }\n  /**\n   * Returns the playback state of the source, either \"started\" or \"stopped\".\n   */\n\n\n  get state() {\n    return this._oscillator.state;\n  }\n  /**\n   * @param node the destination to connect to\n   * @param outputNum the optional output number\n   * @param inputNum the input number\n   */\n\n\n  connect(node, outputNum, inputNum) {\n    if (node instanceof Param || node instanceof Signal) {\n      this.convert = node.convert;\n      this.units = node.units;\n    }\n\n    connectSignal(this, node, outputNum, inputNum);\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._oscillator.dispose();\n\n    this._stoppedSignal.dispose();\n\n    this._zeros.dispose();\n\n    this._scaler.dispose();\n\n    this._a2g.dispose();\n\n    this._amplitudeGain.dispose();\n\n    this.amplitude.dispose();\n    return this;\n  }\n\n}","import { assertRange } from \"./Debug\";\n/**\n * Assert that the number is in the given range.\n */\n\nexport function range(min, max = Infinity) {\n  const valueMap = new WeakMap();\n  return function (target, propertyKey) {\n    Reflect.defineProperty(target, propertyKey, {\n      configurable: true,\n      enumerable: true,\n      get: function () {\n        return valueMap.get(this);\n      },\n      set: function (newValue) {\n        assertRange(newValue, min, max);\n        valueMap.set(this, newValue);\n      }\n    });\n  };\n}\n/**\n * Convert the time to seconds and assert that the time is in between the two\n * values when being set.\n */\n\nexport function timeRange(min, max = Infinity) {\n  const valueMap = new WeakMap();\n  return function (target, propertyKey) {\n    Reflect.defineProperty(target, propertyKey, {\n      configurable: true,\n      enumerable: true,\n      get: function () {\n        return valueMap.get(this);\n      },\n      set: function (newValue) {\n        assertRange(this.toSeconds(newValue), min, max);\n        valueMap.set(this, newValue);\n      }\n    });\n  };\n}","import { __awaiter, __decorate } from \"tslib\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isUndef } from \"../../core/util/TypeCheck\";\nimport { Source } from \"../Source\";\nimport { ToneBufferSource } from \"./ToneBufferSource\";\nimport { assertRange } from \"../../core/util/Debug\";\nimport { timeRange } from \"../../core/util/Decorator\";\n/**\n * Player is an audio file player with start, loop, and stop functions.\n * @example\n * const player = new Tone.Player(\"https://tonejs.github.io/examples/audio/FWDL.mp3\").toDestination();\n * // play as soon as the buffer is loaded\n * player.autostart = true;\n * @category Source\n */\n\nexport class Player extends Source {\n  constructor() {\n    super(optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]));\n    this.name = \"Player\";\n    /**\n     * All of the active buffer source nodes\n     */\n\n    this._activeSources = new Set();\n    const options = optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]);\n    this._buffer = new ToneAudioBuffer({\n      onload: this._onload.bind(this, options.onload),\n      onerror: options.onerror,\n      reverse: options.reverse,\n      url: options.url\n    });\n    this.autostart = options.autostart;\n    this._loop = options.loop;\n    this._loopStart = options.loopStart;\n    this._loopEnd = options.loopEnd;\n    this._playbackRate = options.playbackRate;\n    this.fadeIn = options.fadeIn;\n    this.fadeOut = options.fadeOut;\n  }\n\n  static getDefaults() {\n    return Object.assign(Source.getDefaults(), {\n      autostart: false,\n      fadeIn: 0,\n      fadeOut: 0,\n      loop: false,\n      loopEnd: 0,\n      loopStart: 0,\n      onload: noOp,\n      onerror: noOp,\n      playbackRate: 1,\n      reverse: false\n    });\n  }\n  /**\n   * Load the audio file as an audio buffer.\n   * Decodes the audio asynchronously and invokes\n   * the callback once the audio buffer loads.\n   * Note: this does not need to be called if a url\n   * was passed in to the constructor. Only use this\n   * if you want to manually load a new url.\n   * @param url The url of the buffer to load. Filetype support depends on the browser.\n   */\n\n\n  load(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._buffer.load(url);\n\n      this._onload();\n\n      return this;\n    });\n  }\n  /**\n   * Internal callback when the buffer is loaded.\n   */\n\n\n  _onload(callback = noOp) {\n    callback();\n\n    if (this.autostart) {\n      this.start();\n    }\n  }\n  /**\n   * Internal callback when the buffer is done playing.\n   */\n\n\n  _onSourceEnd(source) {\n    // invoke the onstop function\n    this.onstop(this); // delete the source from the active sources\n\n    this._activeSources.delete(source);\n\n    if (this._activeSources.size === 0 && !this._synced && this._state.getValueAtTime(this.now()) === \"started\") {\n      this._state.setStateAtTime(\"stopped\", this.now());\n    }\n  }\n  /**\n   * Play the buffer at the given startTime. Optionally add an offset\n   * and/or duration which will play the buffer from a position\n   * within the buffer for the given duration.\n   *\n   * @param  time When the player should start.\n   * @param  offset The offset from the beginning of the sample to start at.\n   * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)\n   */\n\n\n  start(time, offset, duration) {\n    super.start(time, offset, duration);\n    return this;\n  }\n  /**\n   * Internal start method\n   */\n\n\n  _start(startTime, offset, duration) {\n    // if it's a loop the default offset is the loopStart point\n    if (this._loop) {\n      offset = defaultArg(offset, this._loopStart);\n    } else {\n      // otherwise the default offset is 0\n      offset = defaultArg(offset, 0);\n    } // compute the values in seconds\n\n\n    let computedOffset = this.toSeconds(offset); // if it's synced, it should factor in the playback rate for computing the offset\n\n    if (this._synced) {\n      computedOffset *= this._playbackRate;\n    } // compute the duration which is either the passed in duration of the buffer.duration - offset\n\n\n    const origDuration = duration;\n    duration = defaultArg(duration, Math.max(this._buffer.duration - computedOffset, 0));\n    let computedDuration = this.toSeconds(duration); // scale it by the playback rate\n\n    computedDuration = computedDuration / this._playbackRate; // get the start time\n\n    startTime = this.toSeconds(startTime); // make the source\n\n    const source = new ToneBufferSource({\n      url: this._buffer,\n      context: this.context,\n      fadeIn: this.fadeIn,\n      fadeOut: this.fadeOut,\n      loop: this._loop,\n      loopEnd: this._loopEnd,\n      loopStart: this._loopStart,\n      onended: this._onSourceEnd.bind(this),\n      playbackRate: this._playbackRate\n    }).connect(this.output); // set the looping properties\n\n    if (!this._loop && !this._synced) {\n      // cancel the previous stop\n      this._state.cancel(startTime + computedDuration); // if it's not looping, set the state change at the end of the sample\n\n\n      this._state.setStateAtTime(\"stopped\", startTime + computedDuration, {\n        implicitEnd: true\n      });\n    } // add it to the array of active sources\n\n\n    this._activeSources.add(source); // start it\n\n\n    if (this._loop && isUndef(origDuration)) {\n      source.start(startTime, computedOffset);\n    } else {\n      // subtract the fade out time\n      source.start(startTime, computedOffset, computedDuration - this.toSeconds(this.fadeOut));\n    }\n  }\n  /**\n   * Stop playback.\n   */\n\n\n  _stop(time) {\n    const computedTime = this.toSeconds(time);\n\n    this._activeSources.forEach(source => source.stop(computedTime));\n  }\n  /**\n   * Stop and then restart the player from the beginning (or offset)\n   * @param  time When the player should start.\n   * @param  offset The offset from the beginning of the sample to start at.\n   * @param  duration How long the sample should play. If no duration is given,\n   * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n   */\n\n\n  restart(time, offset, duration) {\n    super.restart(time, offset, duration);\n    return this;\n  }\n\n  _restart(time, offset, duration) {\n    this._stop(time);\n\n    this._start(time, offset, duration);\n  }\n  /**\n   * Seek to a specific time in the player's buffer. If the\n   * source is no longer playing at that time, it will stop.\n   * @param offset The time to seek to.\n   * @param when The time for the seek event to occur.\n   * @example\n   * const player = new Tone.Player(\"https://tonejs.github.io/examples/audio/FWDL.mp3\", () => {\n   * \tplayer.start();\n   * \t// seek to the offset in 1 second from now\n   * \tplayer.seek(0.4, \"+1\");\n   * }).toDestination();\n   */\n\n\n  seek(offset, when) {\n    const computedTime = this.toSeconds(when);\n\n    if (this._state.getValueAtTime(computedTime) === \"started\") {\n      const computedOffset = this.toSeconds(offset); // if it's currently playing, stop it\n\n      this._stop(computedTime); // restart it at the given time\n\n\n      this._start(computedTime, computedOffset);\n    }\n\n    return this;\n  }\n  /**\n   * Set the loop start and end. Will only loop if loop is set to true.\n   * @param loopStart The loop start time\n   * @param loopEnd The loop end time\n   * @example\n   * const player = new Tone.Player(\"https://tonejs.github.io/examples/audio/FWDL.mp3\").toDestination();\n   * // loop between the given points\n   * player.setLoopPoints(0.2, 0.3);\n   * player.loop = true;\n   * player.autostart = true;\n   */\n\n\n  setLoopPoints(loopStart, loopEnd) {\n    this.loopStart = loopStart;\n    this.loopEnd = loopEnd;\n    return this;\n  }\n  /**\n   * If loop is true, the loop will start at this position.\n   */\n\n\n  get loopStart() {\n    return this._loopStart;\n  }\n\n  set loopStart(loopStart) {\n    this._loopStart = loopStart;\n\n    if (this.buffer.loaded) {\n      assertRange(this.toSeconds(loopStart), 0, this.buffer.duration);\n    } // get the current source\n\n\n    this._activeSources.forEach(source => {\n      source.loopStart = loopStart;\n    });\n  }\n  /**\n   * If loop is true, the loop will end at this position.\n   */\n\n\n  get loopEnd() {\n    return this._loopEnd;\n  }\n\n  set loopEnd(loopEnd) {\n    this._loopEnd = loopEnd;\n\n    if (this.buffer.loaded) {\n      assertRange(this.toSeconds(loopEnd), 0, this.buffer.duration);\n    } // get the current source\n\n\n    this._activeSources.forEach(source => {\n      source.loopEnd = loopEnd;\n    });\n  }\n  /**\n   * The audio buffer belonging to the player.\n   */\n\n\n  get buffer() {\n    return this._buffer;\n  }\n\n  set buffer(buffer) {\n    this._buffer.set(buffer);\n  }\n  /**\n   * If the buffer should loop once it's over.\n   */\n\n\n  get loop() {\n    return this._loop;\n  }\n\n  set loop(loop) {\n    // if no change, do nothing\n    if (this._loop === loop) {\n      return;\n    }\n\n    this._loop = loop; // set the loop of all of the sources\n\n    this._activeSources.forEach(source => {\n      source.loop = loop;\n    });\n\n    if (loop) {\n      // remove the next stopEvent\n      const stopEvent = this._state.getNextState(\"stopped\", this.now());\n\n      if (stopEvent) {\n        this._state.cancel(stopEvent.time);\n      }\n    }\n  }\n  /**\n   * The playback speed. 1 is normal speed. This is not a signal because\n   * Safari and iOS currently don't support playbackRate as a signal.\n   */\n\n\n  get playbackRate() {\n    return this._playbackRate;\n  }\n\n  set playbackRate(rate) {\n    this._playbackRate = rate;\n    const now = this.now(); // cancel the stop event since it's at a different time now\n\n    const stopEvent = this._state.getNextState(\"stopped\", now);\n\n    if (stopEvent && stopEvent.implicitEnd) {\n      this._state.cancel(stopEvent.time);\n\n      this._activeSources.forEach(source => source.cancelStop());\n    } // set all the sources\n\n\n    this._activeSources.forEach(source => {\n      source.playbackRate.setValueAtTime(rate, now);\n    });\n  }\n  /**\n   * The direction the buffer should play in\n   */\n\n\n  get reverse() {\n    return this._buffer.reverse;\n  }\n\n  set reverse(rev) {\n    this._buffer.reverse = rev;\n  }\n  /**\n   * If the buffer is loaded\n   */\n\n\n  get loaded() {\n    return this._buffer.loaded;\n  }\n\n  dispose() {\n    super.dispose(); // disconnect all of the players\n\n    this._activeSources.forEach(source => source.dispose());\n\n    this._activeSources.clear();\n\n    this._buffer.dispose();\n\n    return this;\n  }\n\n}\n\n__decorate([timeRange(0)], Player.prototype, \"fadeIn\", void 0);\n\n__decorate([timeRange(0)], Player.prototype, \"fadeOut\", void 0);","import { Volume } from \"../../component/channel/Volume\";\nimport { ToneAudioBuffers } from \"../../core/context/ToneAudioBuffers\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { assert } from \"../../core/util/Debug\";\nimport { noOp, readOnly } from \"../../core/util/Interface\";\nimport { Source } from \"../Source\";\nimport { Player } from \"./Player\";\n/**\n * Players combines multiple [[Player]] objects.\n * @category Source\n */\n\nexport class Players extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Players.getDefaults(), arguments, [\"urls\", \"onload\"], \"urls\"));\n    this.name = \"Players\";\n    /**\n     * Players has no input.\n     */\n\n    this.input = undefined;\n    /**\n     * The container of all of the players\n     */\n\n    this._players = new Map();\n    const options = optionsFromArguments(Players.getDefaults(), arguments, [\"urls\", \"onload\"], \"urls\");\n    /**\n     * The output volume node\n     */\n\n    this._volume = this.output = new Volume({\n      context: this.context,\n      volume: options.volume\n    });\n    this.volume = this._volume.volume;\n    readOnly(this, \"volume\");\n    this._buffers = new ToneAudioBuffers({\n      urls: options.urls,\n      onload: options.onload,\n      baseUrl: options.baseUrl,\n      onerror: options.onerror\n    }); // mute initially\n\n    this.mute = options.mute;\n    this._fadeIn = options.fadeIn;\n    this._fadeOut = options.fadeOut;\n  }\n\n  static getDefaults() {\n    return Object.assign(Source.getDefaults(), {\n      baseUrl: \"\",\n      fadeIn: 0,\n      fadeOut: 0,\n      mute: false,\n      onload: noOp,\n      onerror: noOp,\n      urls: {},\n      volume: 0\n    });\n  }\n  /**\n   * Mute the output.\n   */\n\n\n  get mute() {\n    return this._volume.mute;\n  }\n\n  set mute(mute) {\n    this._volume.mute = mute;\n  }\n  /**\n   * The fadeIn time of the envelope applied to the source.\n   */\n\n\n  get fadeIn() {\n    return this._fadeIn;\n  }\n\n  set fadeIn(fadeIn) {\n    this._fadeIn = fadeIn;\n\n    this._players.forEach(player => {\n      player.fadeIn = fadeIn;\n    });\n  }\n  /**\n   * The fadeOut time of the each of the sources.\n   */\n\n\n  get fadeOut() {\n    return this._fadeOut;\n  }\n\n  set fadeOut(fadeOut) {\n    this._fadeOut = fadeOut;\n\n    this._players.forEach(player => {\n      player.fadeOut = fadeOut;\n    });\n  }\n  /**\n   * The state of the players object. Returns \"started\" if any of the players are playing.\n   */\n\n\n  get state() {\n    const playing = Array.from(this._players).some(([_, player]) => player.state === \"started\");\n    return playing ? \"started\" : \"stopped\";\n  }\n  /**\n   * True if the buffers object has a buffer by that name.\n   * @param name  The key or index of the buffer.\n   */\n\n\n  has(name) {\n    return this._buffers.has(name);\n  }\n  /**\n   * Get a player by name.\n   * @param  name  The players name as defined in the constructor object or `add` method.\n   */\n\n\n  player(name) {\n    assert(this.has(name), `No Player with the name ${name} exists on this object`);\n\n    if (!this._players.has(name)) {\n      const player = new Player({\n        context: this.context,\n        fadeIn: this._fadeIn,\n        fadeOut: this._fadeOut,\n        url: this._buffers.get(name)\n      }).connect(this.output);\n\n      this._players.set(name, player);\n    }\n\n    return this._players.get(name);\n  }\n  /**\n   * If all the buffers are loaded or not\n   */\n\n\n  get loaded() {\n    return this._buffers.loaded;\n  }\n  /**\n   * Add a player by name and url to the Players\n   * @param  name A unique name to give the player\n   * @param  url  Either the url of the bufer or a buffer which will be added with the given name.\n   * @param callback  The callback to invoke when the url is loaded.\n   */\n\n\n  add(name, url, callback) {\n    assert(!this._buffers.has(name), \"A buffer with that name already exists on this object\");\n\n    this._buffers.add(name, url, callback);\n\n    return this;\n  }\n  /**\n   * Stop all of the players at the given time\n   * @param time The time to stop all of the players.\n   */\n\n\n  stopAll(time) {\n    this._players.forEach(player => player.stop(time));\n\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._volume.dispose();\n\n    this.volume.dispose();\n\n    this._players.forEach(player => player.dispose());\n\n    this._buffers.dispose();\n\n    return this;\n  }\n\n}","import { Source } from \"../Source\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Clock } from \"../../core/clock/Clock\";\nimport { ToneBufferSource } from \"./ToneBufferSource\";\nimport { intervalToFrequencyRatio } from \"../../core/type/Conversions\";\nimport { assertRange } from \"../../core/util/Debug\";\n/**\n * GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).\n * Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the\n * amount of time each small chunk of audio is played for and the overlap is the\n * amount of crossfading transition time between successive grains.\n * @category Source\n */\n\nexport class GrainPlayer extends Source {\n  constructor() {\n    super(optionsFromArguments(GrainPlayer.getDefaults(), arguments, [\"url\", \"onload\"]));\n    this.name = \"GrainPlayer\";\n    /**\n     * Internal loopStart value\n     */\n\n    this._loopStart = 0;\n    /**\n     * Internal loopStart value\n     */\n\n    this._loopEnd = 0;\n    /**\n     * All of the currently playing BufferSources\n     */\n\n    this._activeSources = [];\n    const options = optionsFromArguments(GrainPlayer.getDefaults(), arguments, [\"url\", \"onload\"]);\n    this.buffer = new ToneAudioBuffer({\n      onload: options.onload,\n      onerror: options.onerror,\n      reverse: options.reverse,\n      url: options.url\n    });\n    this._clock = new Clock({\n      context: this.context,\n      callback: this._tick.bind(this),\n      frequency: 1 / options.grainSize\n    });\n    this._playbackRate = options.playbackRate;\n    this._grainSize = options.grainSize;\n    this._overlap = options.overlap;\n    this.detune = options.detune; // setup\n\n    this.overlap = options.overlap;\n    this.loop = options.loop;\n    this.playbackRate = options.playbackRate;\n    this.grainSize = options.grainSize;\n    this.loopStart = options.loopStart;\n    this.loopEnd = options.loopEnd;\n    this.reverse = options.reverse;\n\n    this._clock.on(\"stop\", this._onstop.bind(this));\n  }\n\n  static getDefaults() {\n    return Object.assign(Source.getDefaults(), {\n      onload: noOp,\n      onerror: noOp,\n      overlap: 0.1,\n      grainSize: 0.2,\n      playbackRate: 1,\n      detune: 0,\n      loop: false,\n      loopStart: 0,\n      loopEnd: 0,\n      reverse: false\n    });\n  }\n  /**\n   * Internal start method\n   */\n\n\n  _start(time, offset, duration) {\n    offset = defaultArg(offset, 0);\n    offset = this.toSeconds(offset);\n    time = this.toSeconds(time);\n\n    const grainSize = 1 / this._clock.frequency.getValueAtTime(time);\n\n    this._clock.start(time, offset / grainSize);\n\n    if (duration) {\n      this.stop(time + this.toSeconds(duration));\n    }\n  }\n  /**\n   * Stop and then restart the player from the beginning (or offset)\n   * @param  time When the player should start.\n   * @param  offset The offset from the beginning of the sample to start at.\n   * @param  duration How long the sample should play. If no duration is given,\n   * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n   */\n\n\n  restart(time, offset, duration) {\n    super.restart(time, offset, duration);\n    return this;\n  }\n\n  _restart(time, offset, duration) {\n    this._stop(time);\n\n    this._start(time, offset, duration);\n  }\n  /**\n   * Internal stop method\n   */\n\n\n  _stop(time) {\n    this._clock.stop(time);\n  }\n  /**\n   * Invoked when the clock is stopped\n   */\n\n\n  _onstop(time) {\n    // stop the players\n    this._activeSources.forEach(source => {\n      source.fadeOut = 0;\n      source.stop(time);\n    });\n\n    this.onstop(this);\n  }\n  /**\n   * Invoked on each clock tick. scheduled a new grain at this time.\n   */\n\n\n  _tick(time) {\n    // check if it should stop looping\n    const ticks = this._clock.getTicksAtTime(time);\n\n    const grainSize = 1 / this._clock.frequency.getValueAtTime(time);\n\n    const offset = ticks * grainSize;\n    this.log(\"offset\", offset);\n\n    if (!this.loop && offset > this.buffer.duration) {\n      this.stop(time);\n      return;\n    } // at the beginning of the file, the fade in should be 0\n\n\n    const fadeIn = offset < this._overlap ? 0 : this._overlap; // create a buffer source\n\n    const source = new ToneBufferSource({\n      context: this.context,\n      url: this.buffer,\n      fadeIn: fadeIn,\n      fadeOut: this._overlap,\n      loop: this.loop,\n      loopStart: this._loopStart,\n      loopEnd: this._loopEnd,\n      // compute the playbackRate based on the detune\n      playbackRate: intervalToFrequencyRatio(this.detune / 100)\n    }).connect(this.output);\n    source.start(time, this._grainSize * ticks);\n    source.stop(time + this._grainSize / this.playbackRate); // add it to the active sources\n\n    this._activeSources.push(source); // remove it when it's done\n\n\n    source.onended = () => {\n      const index = this._activeSources.indexOf(source);\n\n      if (index !== -1) {\n        this._activeSources.splice(index, 1);\n      }\n    };\n  }\n  /**\n   * The playback rate of the sample\n   */\n\n\n  get playbackRate() {\n    return this._playbackRate;\n  }\n\n  set playbackRate(rate) {\n    assertRange(rate, 0.001);\n    this._playbackRate = rate;\n    this.grainSize = this._grainSize;\n  }\n  /**\n   * The loop start time.\n   */\n\n\n  get loopStart() {\n    return this._loopStart;\n  }\n\n  set loopStart(time) {\n    if (this.buffer.loaded) {\n      assertRange(this.toSeconds(time), 0, this.buffer.duration);\n    }\n\n    this._loopStart = this.toSeconds(time);\n  }\n  /**\n   * The loop end time.\n   */\n\n\n  get loopEnd() {\n    return this._loopEnd;\n  }\n\n  set loopEnd(time) {\n    if (this.buffer.loaded) {\n      assertRange(this.toSeconds(time), 0, this.buffer.duration);\n    }\n\n    this._loopEnd = this.toSeconds(time);\n  }\n  /**\n   * The direction the buffer should play in\n   */\n\n\n  get reverse() {\n    return this.buffer.reverse;\n  }\n\n  set reverse(rev) {\n    this.buffer.reverse = rev;\n  }\n  /**\n   * The size of each chunk of audio that the\n   * buffer is chopped into and played back at.\n   */\n\n\n  get grainSize() {\n    return this._grainSize;\n  }\n\n  set grainSize(size) {\n    this._grainSize = this.toSeconds(size);\n\n    this._clock.frequency.setValueAtTime(this._playbackRate / this._grainSize, this.now());\n  }\n  /**\n   * The duration of the cross-fade between successive grains.\n   */\n\n\n  get overlap() {\n    return this._overlap;\n  }\n\n  set overlap(time) {\n    this._overlap = this.toSeconds(time);\n  }\n  /**\n   * If all the buffer is loaded\n   */\n\n\n  get loaded() {\n    return this.buffer.loaded;\n  }\n\n  dispose() {\n    super.dispose();\n    this.buffer.dispose();\n\n    this._clock.dispose();\n\n    this._activeSources.forEach(source => source.dispose());\n\n    return this;\n  }\n\n}","import { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n/**\n * Return the absolute value of an incoming signal.\n *\n * @offline 0.5 1\n * @example\n * const abs = new Tone.Abs().toDestination();\n * const signal = new Tone.Signal(1);\n * signal.rampTo(-1, 0.5);\n * signal.connect(abs);\n * @category Signal\n */\n\nexport class Abs extends SignalOperator {\n  constructor() {\n    super(...arguments);\n    this.name = \"Abs\";\n    /**\n     * The node which converts the audio ranges\n     */\n\n    this._abs = new WaveShaper({\n      context: this.context,\n      mapping: val => {\n        if (Math.abs(val) < 0.001) {\n          return 0;\n        } else {\n          return Math.abs(val);\n        }\n      }\n    });\n    /**\n     * The AudioRange input [-1, 1]\n     */\n\n    this.input = this._abs;\n    /**\n     * The output range [0, 1]\n     */\n\n    this.output = this._abs;\n  }\n  /**\n   * clean up\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._abs.dispose();\n\n    return this;\n  }\n\n}","import { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n/**\n * GainToAudio converts an input in NormalRange [0,1] to AudioRange [-1,1].\n * See {@link AudioToGain}.\n * @category Signal\n */\n\nexport class GainToAudio extends SignalOperator {\n  constructor() {\n    super(...arguments);\n    this.name = \"GainToAudio\";\n    /**\n     * The node which converts the audio ranges\n     */\n\n    this._norm = new WaveShaper({\n      context: this.context,\n      mapping: x => Math.abs(x) * 2 - 1\n    });\n    /**\n     * The NormalRange input [0, 1]\n     */\n\n    this.input = this._norm;\n    /**\n     * The AudioRange output [-1, 1]\n     */\n\n    this.output = this._norm;\n  }\n  /**\n   * clean up\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._norm.dispose();\n\n    return this;\n  }\n\n}","import { Multiply } from \"./Multiply\";\nimport { SignalOperator } from \"./SignalOperator\";\n/**\n * Negate the incoming signal. i.e. an input signal of 10 will output -10\n *\n * @example\n * const neg = new Tone.Negate();\n * const sig = new Tone.Signal(-2).connect(neg);\n * // output of neg is positive 2.\n * @category Signal\n */\n\nexport class Negate extends SignalOperator {\n  constructor() {\n    super(...arguments);\n    this.name = \"Negate\";\n    /**\n     * negation is done by multiplying by -1\n     */\n\n    this._multiply = new Multiply({\n      context: this.context,\n      value: -1\n    });\n    /**\n     * The input and output are equal to the multiply node\n     */\n\n    this.input = this._multiply;\n    this.output = this._multiply;\n  }\n  /**\n   * clean up\n   * @returns {Negate} this\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._multiply.dispose();\n\n    return this;\n  }\n\n}","import { connectSeries } from \"../core/context/ToneAudioNode\";\nimport { Gain } from \"../core/context/Gain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Negate } from \"../signal/Negate\";\nimport { Signal } from \"../signal/Signal\";\n/**\n * Subtract the signal connected to the input is subtracted from the signal connected\n * The subtrahend.\n *\n * @example\n * // subtract a scalar from a signal\n * const sub = new Tone.Subtract(1);\n * const sig = new Tone.Signal(4).connect(sub);\n * // the output of sub is 3.\n * @example\n * // subtract two signals\n * const sub = new Tone.Subtract();\n * const sigA = new Tone.Signal(10);\n * const sigB = new Tone.Signal(2.5);\n * sigA.connect(sub);\n * sigB.connect(sub.subtrahend);\n * // output of sub is 7.5\n * @category Signal\n */\n\nexport class Subtract extends Signal {\n  constructor() {\n    super(Object.assign(optionsFromArguments(Subtract.getDefaults(), arguments, [\"value\"])));\n    this.override = false;\n    this.name = \"Subtract\";\n    /**\n     * the summing node\n     */\n\n    this._sum = new Gain({\n      context: this.context\n    });\n    this.input = this._sum;\n    this.output = this._sum;\n    /**\n     * Negate the input of the second input before connecting it to the summing node.\n     */\n\n    this._neg = new Negate({\n      context: this.context\n    });\n    /**\n     * The value which is subtracted from the main signal\n     */\n\n    this.subtrahend = this._param;\n    connectSeries(this._constantSource, this._neg, this._sum);\n  }\n\n  static getDefaults() {\n    return Object.assign(Signal.getDefaults(), {\n      value: 0\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._neg.dispose();\n\n    this._sum.dispose();\n\n    return this;\n  }\n\n}","import { SignalOperator } from \"./SignalOperator\";\nimport { Multiply } from \"./Multiply\";\nimport { WaveShaper } from \"./WaveShaper\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\n/**\n * GreaterThanZero outputs 1 when the input is strictly greater than zero\n * @offline 0.1 1\n * @example\n * const gt0 = new Tone.GreaterThanZero().toDestination();\n * const sig = new Tone.Signal(0.5).connect(gt0);\n * sig.setValueAtTime(-1, 0.05);\n */\n\nexport class GreaterThanZero extends SignalOperator {\n  constructor() {\n    super(Object.assign(optionsFromArguments(GreaterThanZero.getDefaults(), arguments)));\n    this.name = \"GreaterThanZero\";\n    this._thresh = this.output = new WaveShaper({\n      context: this.context,\n      length: 127,\n      mapping: val => {\n        if (val <= 0) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    });\n    this._scale = this.input = new Multiply({\n      context: this.context,\n      value: 10000\n    }); // connections\n\n    this._scale.connect(this._thresh);\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._scale.dispose();\n\n    this._thresh.dispose();\n\n    return this;\n  }\n\n}","import { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Subtract } from \"./Subtract\";\nimport { Signal } from \"./Signal\";\nimport { GreaterThanZero } from \"./GreaterThanZero\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Output 1 if the signal is greater than the value, otherwise outputs 0.\n * can compare two signals or a signal and a number.\n *\n * @offline 0.1 1\n * @example\n * const gt = new Tone.GreaterThan(2).toDestination();\n * const sig = new Tone.Signal(4).connect(gt);\n */\n\nexport class GreaterThan extends Signal {\n  constructor() {\n    super(Object.assign(optionsFromArguments(GreaterThan.getDefaults(), arguments, [\"value\"])));\n    this.name = \"GreaterThan\";\n    this.override = false;\n    const options = optionsFromArguments(GreaterThan.getDefaults(), arguments, [\"value\"]);\n    this._subtract = this.input = new Subtract({\n      context: this.context,\n      value: options.value\n    });\n    this._gtz = this.output = new GreaterThanZero({\n      context: this.context\n    });\n    this.comparator = this._param = this._subtract.subtrahend;\n    readOnly(this, \"comparator\"); // connect\n\n    this._subtract.connect(this._gtz);\n  }\n\n  static getDefaults() {\n    return Object.assign(Signal.getDefaults(), {\n      value: 0\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._gtz.dispose();\n\n    this._subtract.dispose();\n\n    this.comparator.dispose();\n    return this;\n  }\n\n}","import { WaveShaper } from \"./WaveShaper\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { SignalOperator } from \"./SignalOperator\";\n/**\n * Pow applies an exponent to the incoming signal. The incoming signal must be AudioRange [-1, 1]\n *\n * @example\n * const pow = new Tone.Pow(2);\n * const sig = new Tone.Signal(0.5).connect(pow);\n * // output of pow is 0.25.\n * @category Signal\n */\n\nexport class Pow extends SignalOperator {\n  constructor() {\n    super(Object.assign(optionsFromArguments(Pow.getDefaults(), arguments, [\"value\"])));\n    this.name = \"Pow\";\n    const options = optionsFromArguments(Pow.getDefaults(), arguments, [\"value\"]);\n    this._exponentScaler = this.input = this.output = new WaveShaper({\n      context: this.context,\n      mapping: this._expFunc(options.value),\n      length: 8192\n    });\n    this._exponent = options.value;\n  }\n\n  static getDefaults() {\n    return Object.assign(SignalOperator.getDefaults(), {\n      value: 1\n    });\n  }\n  /**\n   * the function which maps the waveshaper\n   * @param exponent exponent value\n   */\n\n\n  _expFunc(exponent) {\n    return val => {\n      return Math.pow(Math.abs(val), exponent);\n    };\n  }\n  /**\n   * The value of the exponent.\n   */\n\n\n  get value() {\n    return this._exponent;\n  }\n\n  set value(exponent) {\n    this._exponent = exponent;\n\n    this._exponentScaler.setMap(this._expFunc(this._exponent));\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._exponentScaler.dispose();\n\n    return this;\n  }\n\n}","import { Scale } from \"./Scale\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Pow } from \"./Pow\";\n/**\n * Performs an exponential scaling on an input signal.\n * Scales a NormalRange value [0,1] exponentially\n * to the output range of outputMin to outputMax.\n * @example\n * const scaleExp = new Tone.ScaleExp(0, 100, 2);\n * const signal = new Tone.Signal(0.5).connect(scaleExp);\n */\n\nexport class ScaleExp extends Scale {\n  constructor() {\n    super(Object.assign(optionsFromArguments(ScaleExp.getDefaults(), arguments, [\"min\", \"max\", \"exponent\"])));\n    this.name = \"ScaleExp\";\n    const options = optionsFromArguments(ScaleExp.getDefaults(), arguments, [\"min\", \"max\", \"exponent\"]);\n    this.input = this._exp = new Pow({\n      context: this.context,\n      value: options.exponent\n    });\n\n    this._exp.connect(this._mult);\n  }\n\n  static getDefaults() {\n    return Object.assign(Scale.getDefaults(), {\n      exponent: 1\n    });\n  }\n  /**\n   * Instead of interpolating linearly between the [[min]] and\n   * [[max]] values, setting the exponent will interpolate between\n   * the two values with an exponential curve.\n   */\n\n\n  get exponent() {\n    return this._exp.value;\n  }\n\n  set exponent(exp) {\n    this._exp.value = exp;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._exp.dispose();\n\n    return this;\n  }\n\n}","import { Signal } from \"./Signal\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { TransportTimeClass } from \"../core/type/TransportTime\";\nimport { ToneConstantSource } from \"./ToneConstantSource\";\n/**\n * Adds the ability to synchronize the signal to the [[Transport]]\n */\n\nexport class SyncedSignal extends Signal {\n  constructor() {\n    super(optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]));\n    this.name = \"SyncedSignal\";\n    /**\n     * Don't override when something is connected to the input\n     */\n\n    this.override = false;\n    const options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]);\n    this._lastVal = options.value;\n    this._synced = this.context.transport.scheduleRepeat(this._onTick.bind(this), \"1i\");\n    this._syncedCallback = this._anchorValue.bind(this);\n    this.context.transport.on(\"start\", this._syncedCallback);\n    this.context.transport.on(\"pause\", this._syncedCallback);\n    this.context.transport.on(\"stop\", this._syncedCallback); // disconnect the constant source from the output and replace it with another one\n\n    this._constantSource.disconnect();\n\n    this._constantSource.stop(0); // create a new one\n\n\n    this._constantSource = this.output = new ToneConstantSource({\n      context: this.context,\n      offset: options.value,\n      units: options.units\n    }).start(0);\n    this.setValueAtTime(options.value, 0);\n  }\n  /**\n   * Callback which is invoked every tick.\n   */\n\n\n  _onTick(time) {\n    const val = super.getValueAtTime(this.context.transport.seconds); // approximate ramp curves with linear ramps\n\n    if (this._lastVal !== val) {\n      this._lastVal = val;\n\n      this._constantSource.offset.setValueAtTime(val, time);\n    }\n  }\n  /**\n   * Anchor the value at the start and stop of the Transport\n   */\n\n\n  _anchorValue(time) {\n    const val = super.getValueAtTime(this.context.transport.seconds);\n    this._lastVal = val;\n\n    this._constantSource.offset.cancelAndHoldAtTime(time);\n\n    this._constantSource.offset.setValueAtTime(val, time);\n  }\n\n  getValueAtTime(time) {\n    const computedTime = new TransportTimeClass(this.context, time).toSeconds();\n    return super.getValueAtTime(computedTime);\n  }\n\n  setValueAtTime(value, time) {\n    const computedTime = new TransportTimeClass(this.context, time).toSeconds();\n    super.setValueAtTime(value, computedTime);\n    return this;\n  }\n\n  linearRampToValueAtTime(value, time) {\n    const computedTime = new TransportTimeClass(this.context, time).toSeconds();\n    super.linearRampToValueAtTime(value, computedTime);\n    return this;\n  }\n\n  exponentialRampToValueAtTime(value, time) {\n    const computedTime = new TransportTimeClass(this.context, time).toSeconds();\n    super.exponentialRampToValueAtTime(value, computedTime);\n    return this;\n  }\n\n  setTargetAtTime(value, startTime, timeConstant) {\n    const computedTime = new TransportTimeClass(this.context, startTime).toSeconds();\n    super.setTargetAtTime(value, computedTime, timeConstant);\n    return this;\n  }\n\n  cancelScheduledValues(startTime) {\n    const computedTime = new TransportTimeClass(this.context, startTime).toSeconds();\n    super.cancelScheduledValues(computedTime);\n    return this;\n  }\n\n  setValueCurveAtTime(values, startTime, duration, scaling) {\n    const computedTime = new TransportTimeClass(this.context, startTime).toSeconds();\n    duration = this.toSeconds(duration);\n    super.setValueCurveAtTime(values, computedTime, duration, scaling);\n    return this;\n  }\n\n  cancelAndHoldAtTime(time) {\n    const computedTime = new TransportTimeClass(this.context, time).toSeconds();\n    super.cancelAndHoldAtTime(computedTime);\n    return this;\n  }\n\n  setRampPoint(time) {\n    const computedTime = new TransportTimeClass(this.context, time).toSeconds();\n    super.setRampPoint(computedTime);\n    return this;\n  }\n\n  exponentialRampTo(value, rampTime, startTime) {\n    const computedTime = new TransportTimeClass(this.context, startTime).toSeconds();\n    super.exponentialRampTo(value, rampTime, computedTime);\n    return this;\n  }\n\n  linearRampTo(value, rampTime, startTime) {\n    const computedTime = new TransportTimeClass(this.context, startTime).toSeconds();\n    super.linearRampTo(value, rampTime, computedTime);\n    return this;\n  }\n\n  targetRampTo(value, rampTime, startTime) {\n    const computedTime = new TransportTimeClass(this.context, startTime).toSeconds();\n    super.targetRampTo(value, rampTime, computedTime);\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n    this.context.transport.clear(this._synced);\n    this.context.transport.off(\"start\", this._syncedCallback);\n    this.context.transport.off(\"pause\", this._syncedCallback);\n    this.context.transport.off(\"stop\", this._syncedCallback);\n\n    this._constantSource.dispose();\n\n    return this;\n  }\n\n}","import { __awaiter, __decorate } from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { isArray, isObject, isString } from \"../../core/util/TypeCheck\";\nimport { connectSignal, Signal } from \"../../signal/Signal\";\nimport { OfflineContext } from \"../../core/context/OfflineContext\";\nimport { assert } from \"../../core/util/Debug\";\nimport { range, timeRange } from \"../../core/util/Decorator\";\n/**\n * Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)\n * envelope generator. Envelope outputs a signal which\n * can be connected to an AudioParam or Tone.Signal.\n * ```\n *           /\\\n *          /  \\\n *         /    \\\n *        /      \\\n *       /        \\___________\n *      /                     \\\n *     /                       \\\n *    /                         \\\n *   /                           \\\n * ```\n * @offline 2 1\n * @example\n * const env = new Tone.Envelope({\n * \tattack: 0.1,\n * \tdecay: 0.2,\n * \tsustain: 1,\n * \trelease: 0.8,\n * }).toDestination();\n * env.triggerAttackRelease(0.5);\n * @category Component\n */\n\nexport class Envelope extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Envelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n    this.name = \"Envelope\";\n    /**\n     * the signal which is output.\n     */\n\n    this._sig = new Signal({\n      context: this.context,\n      value: 0\n    });\n    /**\n     * The output signal of the envelope\n     */\n\n    this.output = this._sig;\n    /**\n     * Envelope has no input\n     */\n\n    this.input = undefined;\n    const options = optionsFromArguments(Envelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]);\n    this.attack = options.attack;\n    this.decay = options.decay;\n    this.sustain = options.sustain;\n    this.release = options.release;\n    this.attackCurve = options.attackCurve;\n    this.releaseCurve = options.releaseCurve;\n    this.decayCurve = options.decayCurve;\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      attack: 0.01,\n      attackCurve: \"linear\",\n      decay: 0.1,\n      decayCurve: \"exponential\",\n      release: 1,\n      releaseCurve: \"exponential\",\n      sustain: 0.5\n    });\n  }\n  /**\n   * Read the current value of the envelope. Useful for\n   * synchronizing visual output to the envelope.\n   */\n\n\n  get value() {\n    return this.getValueAtTime(this.now());\n  }\n  /**\n   * Get the curve\n   * @param  curve\n   * @param  direction  In/Out\n   * @return The curve name\n   */\n\n\n  _getCurve(curve, direction) {\n    if (isString(curve)) {\n      return curve;\n    } else {\n      // look up the name in the curves array\n      let curveName;\n\n      for (curveName in EnvelopeCurves) {\n        if (EnvelopeCurves[curveName][direction] === curve) {\n          return curveName;\n        }\n      } // return the custom curve\n\n\n      return curve;\n    }\n  }\n  /**\n   * Assign a the curve to the given name using the direction\n   * @param  name\n   * @param  direction In/Out\n   * @param  curve\n   */\n\n\n  _setCurve(name, direction, curve) {\n    // check if it's a valid type\n    if (isString(curve) && Reflect.has(EnvelopeCurves, curve)) {\n      const curveDef = EnvelopeCurves[curve];\n\n      if (isObject(curveDef)) {\n        if (name !== \"_decayCurve\") {\n          this[name] = curveDef[direction];\n        }\n      } else {\n        this[name] = curveDef;\n      }\n    } else if (isArray(curve) && name !== \"_decayCurve\") {\n      this[name] = curve;\n    } else {\n      throw new Error(\"Envelope: invalid curve: \" + curve);\n    }\n  }\n  /**\n   * The shape of the attack.\n   * Can be any of these strings:\n   * * \"linear\"\n   * * \"exponential\"\n   * * \"sine\"\n   * * \"cosine\"\n   * * \"bounce\"\n   * * \"ripple\"\n   * * \"step\"\n   *\n   * Can also be an array which describes the curve. Values\n   * in the array are evenly subdivided and linearly\n   * interpolated over the duration of the attack.\n   * @offline 1 1\n   * @example\n   * const env = new Tone.Envelope().toDestination();\n   * env.attackCurve = \"linear\";\n   * env.triggerAttack();\n   * @example\n   * const env = new Tone.Envelope().toDestination();\n   * // can also be an array\n   * env.attackCurve = [0, 0.2, 0.3, 0.4, 1];\n   * env.triggerAttack();\n   */\n\n\n  get attackCurve() {\n    return this._getCurve(this._attackCurve, \"In\");\n  }\n\n  set attackCurve(curve) {\n    this._setCurve(\"_attackCurve\", \"In\", curve);\n  }\n  /**\n   * The shape of the release. See the attack curve types.\n   * @offline 1 1\n   * @example\n   * const env = new Tone.Envelope({\n   * \trelease: 0.5\n   * });\n   * env.releaseCurve = \"linear\";\n   * env.triggerAttack();\n   * env.triggerRelease(0.5);\n   */\n\n\n  get releaseCurve() {\n    return this._getCurve(this._releaseCurve, \"Out\");\n  }\n\n  set releaseCurve(curve) {\n    this._setCurve(\"_releaseCurve\", \"Out\", curve);\n  }\n  /**\n   * The shape of the decay either \"linear\" or \"exponential\"\n   * @offline 1 1\n   * @example\n   * const env = new Tone.Envelope({\n   * \tsustain: 0.1,\n   * \tdecay: 0.5\n   * });\n   * env.decayCurve = \"linear\";\n   * env.triggerAttack();\n   */\n\n\n  get decayCurve() {\n    return this._decayCurve;\n  }\n\n  set decayCurve(curve) {\n    assert([\"linear\", \"exponential\"].some(c => c === curve), `Invalid envelope curve: ${curve}`);\n    this._decayCurve = curve;\n  }\n  /**\n   * Trigger the attack/decay portion of the ADSR envelope.\n   * @param  time When the attack should start.\n   * @param velocity The velocity of the envelope scales the vales.\n   *                             number between 0-1\n   * @example\n   * const env = new Tone.AmplitudeEnvelope().toDestination();\n   * const osc = new Tone.Oscillator().connect(env).start();\n   * // trigger the attack 0.5 seconds from now with a velocity of 0.2\n   * env.triggerAttack(\"+0.5\", 0.2);\n   */\n\n\n  triggerAttack(time, velocity = 1) {\n    this.log(\"triggerAttack\", time, velocity);\n    time = this.toSeconds(time);\n    const originalAttack = this.toSeconds(this.attack);\n    let attack = originalAttack;\n    const decay = this.toSeconds(this.decay); // check if it's not a complete attack\n\n    const currentValue = this.getValueAtTime(time);\n\n    if (currentValue > 0) {\n      // subtract the current value from the attack time\n      const attackRate = 1 / attack;\n      const remainingDistance = 1 - currentValue; // the attack is now the remaining time\n\n      attack = remainingDistance / attackRate;\n    } // attack\n\n\n    if (attack < this.sampleTime) {\n      this._sig.cancelScheduledValues(time); // case where the attack time is 0 should set instantly\n\n\n      this._sig.setValueAtTime(velocity, time);\n    } else if (this._attackCurve === \"linear\") {\n      this._sig.linearRampTo(velocity, attack, time);\n    } else if (this._attackCurve === \"exponential\") {\n      this._sig.targetRampTo(velocity, attack, time);\n    } else {\n      this._sig.cancelAndHoldAtTime(time);\n\n      let curve = this._attackCurve; // find the starting position in the curve\n\n      for (let i = 1; i < curve.length; i++) {\n        // the starting index is between the two values\n        if (curve[i - 1] <= currentValue && currentValue <= curve[i]) {\n          curve = this._attackCurve.slice(i); // the first index is the current value\n\n          curve[0] = currentValue;\n          break;\n        }\n      }\n\n      this._sig.setValueCurveAtTime(curve, time, attack, velocity);\n    } // decay\n\n\n    if (decay && this.sustain < 1) {\n      const decayValue = velocity * this.sustain;\n      const decayStart = time + attack;\n      this.log(\"decay\", decayStart);\n\n      if (this._decayCurve === \"linear\") {\n        this._sig.linearRampToValueAtTime(decayValue, decay + decayStart);\n      } else {\n        this._sig.exponentialApproachValueAtTime(decayValue, decayStart, decay);\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Triggers the release of the envelope.\n   * @param  time When the release portion of the envelope should start.\n   * @example\n   * const env = new Tone.AmplitudeEnvelope().toDestination();\n   * const osc = new Tone.Oscillator({\n   * \ttype: \"sawtooth\"\n   * }).connect(env).start();\n   * env.triggerAttack();\n   * // trigger the release half a second after the attack\n   * env.triggerRelease(\"+0.5\");\n   */\n\n\n  triggerRelease(time) {\n    this.log(\"triggerRelease\", time);\n    time = this.toSeconds(time);\n    const currentValue = this.getValueAtTime(time);\n\n    if (currentValue > 0) {\n      const release = this.toSeconds(this.release);\n\n      if (release < this.sampleTime) {\n        this._sig.setValueAtTime(0, time);\n      } else if (this._releaseCurve === \"linear\") {\n        this._sig.linearRampTo(0, release, time);\n      } else if (this._releaseCurve === \"exponential\") {\n        this._sig.targetRampTo(0, release, time);\n      } else {\n        assert(isArray(this._releaseCurve), \"releaseCurve must be either 'linear', 'exponential' or an array\");\n\n        this._sig.cancelAndHoldAtTime(time);\n\n        this._sig.setValueCurveAtTime(this._releaseCurve, time, release, currentValue);\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Get the scheduled value at the given time. This will\n   * return the unconverted (raw) value.\n   */\n\n\n  getValueAtTime(time) {\n    return this._sig.getValueAtTime(time);\n  }\n  /**\n   * triggerAttackRelease is shorthand for triggerAttack, then waiting\n   * some duration, then triggerRelease.\n   * @param duration The duration of the sustain.\n   * @param time When the attack should be triggered.\n   * @param velocity The velocity of the envelope.\n   * @example\n   * const env = new Tone.AmplitudeEnvelope().toDestination();\n   * const osc = new Tone.Oscillator().connect(env).start();\n   * // trigger the release 0.5 seconds after the attack\n   * env.triggerAttackRelease(0.5);\n   */\n\n\n  triggerAttackRelease(duration, time, velocity = 1) {\n    time = this.toSeconds(time);\n    this.triggerAttack(time, velocity);\n    this.triggerRelease(time + this.toSeconds(duration));\n    return this;\n  }\n  /**\n   * Cancels all scheduled envelope changes after the given time.\n   */\n\n\n  cancel(after) {\n    this._sig.cancelScheduledValues(this.toSeconds(after));\n\n    return this;\n  }\n  /**\n   * Connect the envelope to a destination node.\n   */\n\n\n  connect(destination, outputNumber = 0, inputNumber = 0) {\n    connectSignal(this, destination, outputNumber, inputNumber);\n    return this;\n  }\n  /**\n   * Render the envelope curve to an array of the given length.\n   * Good for visualizing the envelope curve. Rescales the duration of the\n   * envelope to fit the length.\n   */\n\n\n  asArray(length = 1024) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const duration = length / this.context.sampleRate;\n      const context = new OfflineContext(1, duration, this.context.sampleRate); // normalize the ADSR for the given duration with 20% sustain time\n\n      const attackPortion = this.toSeconds(this.attack) + this.toSeconds(this.decay);\n      const envelopeDuration = attackPortion + this.toSeconds(this.release);\n      const sustainTime = envelopeDuration * 0.1;\n      const totalDuration = envelopeDuration + sustainTime; // @ts-ignore\n\n      const clone = new this.constructor(Object.assign(this.get(), {\n        attack: duration * this.toSeconds(this.attack) / totalDuration,\n        decay: duration * this.toSeconds(this.decay) / totalDuration,\n        release: duration * this.toSeconds(this.release) / totalDuration,\n        context\n      }));\n\n      clone._sig.toDestination();\n\n      clone.triggerAttackRelease(duration * (attackPortion + sustainTime) / totalDuration, 0);\n      const buffer = yield context.render();\n      return buffer.getChannelData(0);\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._sig.dispose();\n\n    return this;\n  }\n\n}\n\n__decorate([timeRange(0)], Envelope.prototype, \"attack\", void 0);\n\n__decorate([timeRange(0)], Envelope.prototype, \"decay\", void 0);\n\n__decorate([range(0, 1)], Envelope.prototype, \"sustain\", void 0);\n\n__decorate([timeRange(0)], Envelope.prototype, \"release\", void 0);\n/**\n * Generate some complex envelope curves.\n */\n\n\nconst EnvelopeCurves = (() => {\n  const curveLen = 128;\n  let i;\n  let k; // cosine curve\n\n  const cosineCurve = [];\n\n  for (i = 0; i < curveLen; i++) {\n    cosineCurve[i] = Math.sin(i / (curveLen - 1) * (Math.PI / 2));\n  } // ripple curve\n\n\n  const rippleCurve = [];\n  const rippleCurveFreq = 6.4;\n\n  for (i = 0; i < curveLen - 1; i++) {\n    k = i / (curveLen - 1);\n    const sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;\n    rippleCurve[i] = sineWave / 10 + k * 0.83;\n  }\n\n  rippleCurve[curveLen - 1] = 1; // stairs curve\n\n  const stairsCurve = [];\n  const steps = 5;\n\n  for (i = 0; i < curveLen; i++) {\n    stairsCurve[i] = Math.ceil(i / (curveLen - 1) * steps) / steps;\n  } // in-out easing curve\n\n\n  const sineCurve = [];\n\n  for (i = 0; i < curveLen; i++) {\n    k = i / (curveLen - 1);\n    sineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));\n  } // a bounce curve\n\n\n  const bounceCurve = [];\n\n  for (i = 0; i < curveLen; i++) {\n    k = i / (curveLen - 1);\n    const freq = Math.pow(k, 3) * 4 + 0.2;\n    const val = Math.cos(freq * Math.PI * 2 * k);\n    bounceCurve[i] = Math.abs(val * (1 - k));\n  }\n  /**\n   * Invert a value curve to make it work for the release\n   */\n\n\n  function invertCurve(curve) {\n    const out = new Array(curve.length);\n\n    for (let j = 0; j < curve.length; j++) {\n      out[j] = 1 - curve[j];\n    }\n\n    return out;\n  }\n  /**\n   * reverse the curve\n   */\n\n\n  function reverseCurve(curve) {\n    return curve.slice(0).reverse();\n  }\n  /**\n   * attack and release curve arrays\n   */\n\n\n  return {\n    bounce: {\n      In: invertCurve(bounceCurve),\n      Out: bounceCurve\n    },\n    cosine: {\n      In: cosineCurve,\n      Out: reverseCurve(cosineCurve)\n    },\n    exponential: \"exponential\",\n    linear: \"linear\",\n    ripple: {\n      In: rippleCurve,\n      Out: invertCurve(rippleCurve)\n    },\n    sine: {\n      In: sineCurve,\n      Out: invertCurve(sineCurve)\n    },\n    step: {\n      In: stairsCurve,\n      Out: invertCurve(stairsCurve)\n    }\n  };\n})();","import { Volume } from \"../component/channel/Volume\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Base-class for all instruments\n */\n\nexport class Instrument extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Instrument.getDefaults(), arguments));\n    /**\n     * Keep track of all events scheduled to the transport\n     * when the instrument is 'synced'\n     */\n\n    this._scheduledEvents = [];\n    /**\n     * If the instrument is currently synced\n     */\n\n    this._synced = false;\n    this._original_triggerAttack = this.triggerAttack;\n    this._original_triggerRelease = this.triggerRelease;\n    const options = optionsFromArguments(Instrument.getDefaults(), arguments);\n    this._volume = this.output = new Volume({\n      context: this.context,\n      volume: options.volume\n    });\n    this.volume = this._volume.volume;\n    readOnly(this, \"volume\");\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      volume: 0\n    });\n  }\n  /**\n   * Sync the instrument to the Transport. All subsequent calls of\n   * [[triggerAttack]] and [[triggerRelease]] will be scheduled along the transport.\n   * @example\n   * const fmSynth = new Tone.FMSynth().toDestination();\n   * fmSynth.volume.value = -6;\n   * fmSynth.sync();\n   * // schedule 3 notes when the transport first starts\n   * fmSynth.triggerAttackRelease(\"C4\", \"8n\", 0);\n   * fmSynth.triggerAttackRelease(\"E4\", \"8n\", \"8n\");\n   * fmSynth.triggerAttackRelease(\"G4\", \"8n\", \"4n\");\n   * // start the transport to hear the notes\n   * Tone.Transport.start();\n   */\n\n\n  sync() {\n    if (!this._synced) {\n      this._synced = true;\n\n      this._syncMethod(\"triggerAttack\", 1);\n\n      this._syncMethod(\"triggerRelease\", 0);\n    }\n\n    return this;\n  }\n  /**\n   * Wrap the given method so that it can be synchronized\n   * @param method Which method to wrap and sync\n   * @param  timePosition What position the time argument appears in\n   */\n\n\n  _syncMethod(method, timePosition) {\n    const originalMethod = this[\"_original_\" + method] = this[method];\n\n    this[method] = (...args) => {\n      const time = args[timePosition];\n      const id = this.context.transport.schedule(t => {\n        args[timePosition] = t;\n        originalMethod.apply(this, args);\n      }, time);\n\n      this._scheduledEvents.push(id);\n    };\n  }\n  /**\n   * Unsync the instrument from the Transport\n   */\n\n\n  unsync() {\n    this._scheduledEvents.forEach(id => this.context.transport.clear(id));\n\n    this._scheduledEvents = [];\n\n    if (this._synced) {\n      this._synced = false;\n      this.triggerAttack = this._original_triggerAttack;\n      this.triggerRelease = this._original_triggerRelease;\n    }\n\n    return this;\n  }\n  /**\n   * Trigger the attack and then the release after the duration.\n   * @param  note     The note to trigger.\n   * @param  duration How long the note should be held for before\n   *                         triggering the release. This value must be greater than 0.\n   * @param time  When the note should be triggered.\n   * @param  velocity The velocity the note should be triggered at.\n   * @example\n   * const synth = new Tone.Synth().toDestination();\n   * // trigger \"C4\" for the duration of an 8th note\n   * synth.triggerAttackRelease(\"C4\", \"8n\");\n   */\n\n\n  triggerAttackRelease(note, duration, time, velocity) {\n    const computedTime = this.toSeconds(time);\n    const computedDuration = this.toSeconds(duration);\n    this.triggerAttack(note, computedTime, velocity);\n    this.triggerRelease(computedTime + computedDuration);\n    return this;\n  }\n  /**\n   * clean up\n   * @returns {Instrument} this\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._volume.dispose();\n\n    this.unsync();\n    this._scheduledEvents = [];\n    return this;\n  }\n\n}","import { __decorate } from \"tslib\";\nimport { FrequencyClass } from \"../core/type/Frequency\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { Instrument } from \"../instrument/Instrument\";\nimport { timeRange } from \"../core/util/Decorator\";\n/**\n * Abstract base class for other monophonic instruments to extend.\n */\n\nexport class Monophonic extends Instrument {\n  constructor() {\n    super(optionsFromArguments(Monophonic.getDefaults(), arguments));\n    const options = optionsFromArguments(Monophonic.getDefaults(), arguments);\n    this.portamento = options.portamento;\n    this.onsilence = options.onsilence;\n  }\n\n  static getDefaults() {\n    return Object.assign(Instrument.getDefaults(), {\n      detune: 0,\n      onsilence: noOp,\n      portamento: 0\n    });\n  }\n  /**\n   * Trigger the attack of the note optionally with a given velocity.\n   * @param  note The note to trigger.\n   * @param  time When the note should start.\n   * @param  velocity The velocity scaler determines how \"loud\" the note will be triggered.\n   * @example\n   * const synth = new Tone.Synth().toDestination();\n   * // trigger the note a half second from now at half velocity\n   * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n   */\n\n\n  triggerAttack(note, time, velocity = 1) {\n    this.log(\"triggerAttack\", note, time, velocity);\n    const seconds = this.toSeconds(time);\n\n    this._triggerEnvelopeAttack(seconds, velocity);\n\n    this.setNote(note, seconds);\n    return this;\n  }\n  /**\n   * Trigger the release portion of the envelope\n   * @param  time If no time is given, the release happens immediatly\n   * @example\n   * const synth = new Tone.Synth().toDestination();\n   * synth.triggerAttack(\"C4\");\n   * // trigger the release a second from now\n   * synth.triggerRelease(\"+1\");\n   */\n\n\n  triggerRelease(time) {\n    this.log(\"triggerRelease\", time);\n    const seconds = this.toSeconds(time);\n\n    this._triggerEnvelopeRelease(seconds);\n\n    return this;\n  }\n  /**\n   * Set the note at the given time. If no time is given, the note\n   * will set immediately.\n   * @param note The note to change to.\n   * @param  time The time when the note should be set.\n   * @example\n   * const synth = new Tone.Synth().toDestination();\n   * synth.triggerAttack(\"C4\");\n   * // change to F#6 in one quarter note from now.\n   * synth.setNote(\"F#6\", \"+4n\");\n   */\n\n\n  setNote(note, time) {\n    const computedTime = this.toSeconds(time);\n    const computedFrequency = note instanceof FrequencyClass ? note.toFrequency() : note;\n\n    if (this.portamento > 0 && this.getLevelAtTime(computedTime) > 0.05) {\n      const portTime = this.toSeconds(this.portamento);\n      this.frequency.exponentialRampTo(computedFrequency, portTime, computedTime);\n    } else {\n      this.frequency.setValueAtTime(computedFrequency, computedTime);\n    }\n\n    return this;\n  }\n\n}\n\n__decorate([timeRange(0)], Monophonic.prototype, \"portamento\", void 0);","import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Envelope } from \"./Envelope\";\n/**\n * AmplitudeEnvelope is a Tone.Envelope connected to a gain node.\n * Unlike Tone.Envelope, which outputs the envelope's value, AmplitudeEnvelope accepts\n * an audio signal as the input and will apply the envelope to the amplitude\n * of the signal.\n * Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).\n *\n * @example\n * const ampEnv = new Tone.AmplitudeEnvelope({\n * \tattack: 0.1,\n * \tdecay: 0.2,\n * \tsustain: 1.0,\n * \trelease: 0.8\n * }).toDestination();\n * // create an oscillator and connect it\n * const osc = new Tone.Oscillator().connect(ampEnv).start();\n * // trigger the envelopes attack and release \"8t\" apart\n * ampEnv.triggerAttackRelease(\"8t\");\n * @category Component\n */\n\nexport class AmplitudeEnvelope extends Envelope {\n  constructor() {\n    super(optionsFromArguments(AmplitudeEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n    this.name = \"AmplitudeEnvelope\";\n    this._gainNode = new Gain({\n      context: this.context,\n      gain: 0\n    });\n    this.output = this._gainNode;\n    this.input = this._gainNode;\n\n    this._sig.connect(this._gainNode.gain);\n\n    this.output = this._gainNode;\n    this.input = this._gainNode;\n  }\n  /**\n   * Clean up\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._gainNode.dispose();\n\n    return this;\n  }\n\n}","import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { Source } from \"../source/Source\";\nimport { Monophonic } from \"./Monophonic\";\n/**\n * Synth is composed simply of a {@link OmniOscillator} routed through an {@link AmplitudeEnvelope}.\n * ```\n * +----------------+   +-------------------+\n * | OmniOscillator +>--> AmplitudeEnvelope +>--> Output\n * +----------------+   +-------------------+\n * ```\n * @example\n * const synth = new Tone.Synth().toDestination();\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Instrument\n */\n\nexport class Synth extends Monophonic {\n  constructor() {\n    super(optionsFromArguments(Synth.getDefaults(), arguments));\n    this.name = \"Synth\";\n    const options = optionsFromArguments(Synth.getDefaults(), arguments);\n    this.oscillator = new OmniOscillator(Object.assign({\n      context: this.context,\n      detune: options.detune,\n      onstop: () => this.onsilence(this)\n    }, options.oscillator));\n    this.frequency = this.oscillator.frequency;\n    this.detune = this.oscillator.detune;\n    this.envelope = new AmplitudeEnvelope(Object.assign({\n      context: this.context\n    }, options.envelope)); // connect the oscillators to the output\n\n    this.oscillator.chain(this.envelope, this.output);\n    readOnly(this, [\"oscillator\", \"frequency\", \"detune\", \"envelope\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(Monophonic.getDefaults(), {\n      envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        attack: 0.005,\n        decay: 0.1,\n        release: 1,\n        sustain: 0.3\n      }),\n      oscillator: Object.assign(omitFromObject(OmniOscillator.getDefaults(), [...Object.keys(Source.getDefaults()), \"frequency\", \"detune\"]), {\n        type: \"triangle\"\n      })\n    });\n  }\n  /**\n   * start the attack portion of the envelope\n   * @param time the time the attack should start\n   * @param velocity the velocity of the note (0-1)\n   */\n\n\n  _triggerEnvelopeAttack(time, velocity) {\n    // the envelopes\n    this.envelope.triggerAttack(time, velocity);\n    this.oscillator.start(time); // if there is no release portion, stop the oscillator\n\n    if (this.envelope.sustain === 0) {\n      const computedAttack = this.toSeconds(this.envelope.attack);\n      const computedDecay = this.toSeconds(this.envelope.decay);\n      this.oscillator.stop(time + computedAttack + computedDecay);\n    }\n  }\n  /**\n   * start the release portion of the envelope\n   * @param time the time the release should start\n   */\n\n\n  _triggerEnvelopeRelease(time) {\n    this.envelope.triggerRelease(time);\n    this.oscillator.stop(time + this.toSeconds(this.envelope.release));\n  }\n\n  getLevelAtTime(time) {\n    time = this.toSeconds(time);\n    return this.envelope.getValueAtTime(time);\n  }\n  /**\n   * clean up\n   */\n\n\n  dispose() {\n    super.dispose();\n    this.oscillator.dispose();\n    this.envelope.dispose();\n    return this;\n  }\n\n}","import { Signal } from \"../signal/Signal\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { Monophonic } from \"./Monophonic\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { Source } from \"../source/Source\";\nimport { Synth } from \"./Synth\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\n/**\n * Base class for both AM and FM synths\n */\n\nexport class ModulationSynth extends Monophonic {\n  constructor() {\n    super(optionsFromArguments(ModulationSynth.getDefaults(), arguments));\n    this.name = \"ModulationSynth\";\n    const options = optionsFromArguments(ModulationSynth.getDefaults(), arguments);\n    this._carrier = new Synth({\n      context: this.context,\n      oscillator: options.oscillator,\n      envelope: options.envelope,\n      onsilence: () => this.onsilence(this),\n      volume: -10\n    });\n    this._modulator = new Synth({\n      context: this.context,\n      oscillator: options.modulation,\n      envelope: options.modulationEnvelope,\n      volume: -10\n    });\n    this.oscillator = this._carrier.oscillator;\n    this.envelope = this._carrier.envelope;\n    this.modulation = this._modulator.oscillator;\n    this.modulationEnvelope = this._modulator.envelope;\n    this.frequency = new Signal({\n      context: this.context,\n      units: \"frequency\"\n    });\n    this.detune = new Signal({\n      context: this.context,\n      value: options.detune,\n      units: \"cents\"\n    });\n    this.harmonicity = new Multiply({\n      context: this.context,\n      value: options.harmonicity,\n      minValue: 0\n    });\n    this._modulationNode = new Gain({\n      context: this.context,\n      gain: 0\n    });\n    readOnly(this, [\"frequency\", \"harmonicity\", \"oscillator\", \"envelope\", \"modulation\", \"modulationEnvelope\", \"detune\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(Monophonic.getDefaults(), {\n      harmonicity: 3,\n      oscillator: Object.assign(omitFromObject(OmniOscillator.getDefaults(), [...Object.keys(Source.getDefaults()), \"frequency\", \"detune\"]), {\n        type: \"sine\"\n      }),\n      envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        attack: 0.01,\n        decay: 0.01,\n        sustain: 1,\n        release: 0.5\n      }),\n      modulation: Object.assign(omitFromObject(OmniOscillator.getDefaults(), [...Object.keys(Source.getDefaults()), \"frequency\", \"detune\"]), {\n        type: \"square\"\n      }),\n      modulationEnvelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        attack: 0.5,\n        decay: 0.0,\n        sustain: 1,\n        release: 0.5\n      })\n    });\n  }\n  /**\n   * Trigger the attack portion of the note\n   */\n\n\n  _triggerEnvelopeAttack(time, velocity) {\n    // @ts-ignore\n    this._carrier._triggerEnvelopeAttack(time, velocity); // @ts-ignore\n\n\n    this._modulator._triggerEnvelopeAttack(time, velocity);\n  }\n  /**\n   * Trigger the release portion of the note\n   */\n\n\n  _triggerEnvelopeRelease(time) {\n    // @ts-ignore\n    this._carrier._triggerEnvelopeRelease(time); // @ts-ignore\n\n\n    this._modulator._triggerEnvelopeRelease(time);\n\n    return this;\n  }\n\n  getLevelAtTime(time) {\n    time = this.toSeconds(time);\n    return this.envelope.getValueAtTime(time);\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._carrier.dispose();\n\n    this._modulator.dispose();\n\n    this.frequency.dispose();\n    this.detune.dispose();\n    this.harmonicity.dispose();\n\n    this._modulationNode.dispose();\n\n    return this;\n  }\n\n}","import { AudioToGain } from \"../signal/AudioToGain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { ModulationSynth } from \"./ModulationSynth\";\n/**\n * AMSynth uses the output of one Tone.Synth to modulate the\n * amplitude of another Tone.Synth. The harmonicity (the ratio between\n * the two signals) affects the timbre of the output signal greatly.\n * Read more about Amplitude Modulation Synthesis on\n * [SoundOnSound](https://web.archive.org/web/20160404103653/http://www.soundonsound.com:80/sos/mar00/articles/synthsecrets.htm).\n *\n * @example\n * const synth = new Tone.AMSynth().toDestination();\n * synth.triggerAttackRelease(\"C4\", \"4n\");\n *\n * @category Instrument\n */\n\nexport class AMSynth extends ModulationSynth {\n  constructor() {\n    super(optionsFromArguments(AMSynth.getDefaults(), arguments));\n    this.name = \"AMSynth\";\n    this._modulationScale = new AudioToGain({\n      context: this.context\n    }); // control the two voices frequency\n\n    this.frequency.connect(this._carrier.frequency);\n    this.frequency.chain(this.harmonicity, this._modulator.frequency);\n    this.detune.fan(this._carrier.detune, this._modulator.detune);\n\n    this._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\n    this._carrier.chain(this._modulationNode, this.output);\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._modulationScale.dispose();\n\n    return this;\n  }\n\n}","import { Gain } from \"../../core/context/Gain\";\nimport { connectSeries, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { isNumber } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { assert } from \"../../core/util/Debug\";\n/**\n * Tone.Filter is a filter which allows for all of the same native methods\n * as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface).\n * Tone.Filter has the added ability to set the filter rolloff at -12\n * (default), -24 and -48.\n * @example\n * const filter = new Tone.Filter(1500, \"highpass\").toDestination();\n * filter.frequency.rampTo(20000, 10);\n * const noise = new Tone.Noise().connect(filter).start();\n * @category Component\n */\n\nexport class Filter extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]));\n    this.name = \"Filter\";\n    this.input = new Gain({\n      context: this.context\n    });\n    this.output = new Gain({\n      context: this.context\n    });\n    this._filters = [];\n    const options = optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]);\n    this._filters = [];\n    this.Q = new Signal({\n      context: this.context,\n      units: \"positive\",\n      value: options.Q\n    });\n    this.frequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    this.detune = new Signal({\n      context: this.context,\n      units: \"cents\",\n      value: options.detune\n    });\n    this.gain = new Signal({\n      context: this.context,\n      units: \"decibels\",\n      value: options.gain\n    });\n    this._type = options.type;\n    this.rolloff = options.rolloff;\n    readOnly(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      Q: 1,\n      detune: 0,\n      frequency: 350,\n      gain: 0,\n      rolloff: -12,\n      type: \"lowpass\"\n    });\n  }\n  /**\n   * The type of the filter. Types: \"lowpass\", \"highpass\",\n   * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\".\n   */\n\n\n  get type() {\n    return this._type;\n  }\n\n  set type(type) {\n    const types = [\"lowpass\", \"highpass\", \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n    assert(types.indexOf(type) !== -1, `Invalid filter type: ${type}`);\n    this._type = type;\n\n    this._filters.forEach(filter => filter.type = type);\n  }\n  /**\n   * The rolloff of the filter which is the drop in db\n   * per octave. Implemented internally by cascading filters.\n   * Only accepts the values -12, -24, -48 and -96.\n   */\n\n\n  get rolloff() {\n    return this._rolloff;\n  }\n\n  set rolloff(rolloff) {\n    const rolloffNum = isNumber(rolloff) ? rolloff : parseInt(rolloff, 10);\n    const possibilities = [-12, -24, -48, -96];\n    let cascadingCount = possibilities.indexOf(rolloffNum); // check the rolloff is valid\n\n    assert(cascadingCount !== -1, `rolloff can only be ${possibilities.join(\", \")}`);\n    cascadingCount += 1;\n    this._rolloff = rolloffNum;\n    this.input.disconnect();\n\n    this._filters.forEach(filter => filter.disconnect());\n\n    this._filters = new Array(cascadingCount);\n\n    for (let count = 0; count < cascadingCount; count++) {\n      const filter = this.context.createBiquadFilter();\n      filter.type = this._type;\n      this.frequency.connect(filter.frequency);\n      this.detune.connect(filter.detune);\n      this.Q.connect(filter.Q);\n      this.gain.connect(filter.gain);\n      this._filters[count] = filter;\n    }\n\n    this._internalChannels = this._filters;\n    connectSeries(this.input, ...this._internalChannels, this.output);\n  }\n  /**\n   * Get the frequency response curve. This curve represents how the filter\n   * responses to frequencies between 20hz-20khz.\n   * @param  len The number of values to return\n   * @return The frequency response curve between 20-20kHz\n   */\n\n\n  getFrequencyResponse(len = 128) {\n    // start with all 1s\n    const totalResponse = new Float32Array(len).map(() => 1);\n    const freqValues = new Float32Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const norm = Math.pow(i / len, 2);\n      const freq = norm * (20000 - 20) + 20;\n      freqValues[i] = freq;\n    }\n\n    const magValues = new Float32Array(len);\n    const phaseValues = new Float32Array(len);\n\n    this._filters.forEach(() => {\n      const filterClone = this.context.createBiquadFilter();\n      filterClone.type = this._type;\n      filterClone.Q.value = this.Q.value;\n      filterClone.frequency.value = this.frequency.value;\n      filterClone.gain.value = this.gain.value;\n      filterClone.getFrequencyResponse(freqValues, magValues, phaseValues);\n      magValues.forEach((val, i) => {\n        totalResponse[i] *= val;\n      });\n    });\n\n    return totalResponse;\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._filters.forEach(filter => {\n      filter.disconnect();\n    });\n\n    writable(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n    this.frequency.dispose();\n    this.Q.dispose();\n    this.detune.dispose();\n    this.gain.dispose();\n    return this;\n  }\n\n}","import { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Envelope } from \"./Envelope\";\nimport { Scale } from \"../../signal/Scale\";\nimport { Pow } from \"../../signal/Pow\";\nimport { assertRange } from \"../../core/util/Debug\";\n/**\n * FrequencyEnvelope is an [[Envelope]] which ramps between [[baseFrequency]]\n * and [[octaves]]. It can also have an optional [[exponent]] to adjust the curve\n * which it ramps.\n * @example\n * const oscillator = new Tone.Oscillator().toDestination().start();\n * const freqEnv = new Tone.FrequencyEnvelope({\n * \tattack: 0.2,\n * \tbaseFrequency: \"C2\",\n * \toctaves: 4\n * });\n * freqEnv.connect(oscillator.frequency);\n * freqEnv.triggerAttack();\n */\n\nexport class FrequencyEnvelope extends Envelope {\n  constructor() {\n    super(optionsFromArguments(FrequencyEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n    this.name = \"FrequencyEnvelope\";\n    const options = optionsFromArguments(FrequencyEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]);\n    this._octaves = options.octaves;\n    this._baseFrequency = this.toFrequency(options.baseFrequency);\n    this._exponent = this.input = new Pow({\n      context: this.context,\n      value: options.exponent\n    });\n    this._scale = this.output = new Scale({\n      context: this.context,\n      min: this._baseFrequency,\n      max: this._baseFrequency * Math.pow(2, this._octaves)\n    });\n\n    this._sig.chain(this._exponent, this._scale);\n  }\n\n  static getDefaults() {\n    return Object.assign(Envelope.getDefaults(), {\n      baseFrequency: 200,\n      exponent: 1,\n      octaves: 4\n    });\n  }\n  /**\n   * The envelope's minimum output value. This is the value which it\n   * starts at.\n   */\n\n\n  get baseFrequency() {\n    return this._baseFrequency;\n  }\n\n  set baseFrequency(min) {\n    const freq = this.toFrequency(min);\n    assertRange(freq, 0);\n    this._baseFrequency = freq;\n    this._scale.min = this._baseFrequency; // update the max value when the min changes\n\n    this.octaves = this._octaves;\n  }\n  /**\n   * The number of octaves above the baseFrequency that the\n   * envelope will scale to.\n   */\n\n\n  get octaves() {\n    return this._octaves;\n  }\n\n  set octaves(octaves) {\n    assertRange(octaves, 0);\n    this._octaves = octaves;\n    this._scale.max = this._baseFrequency * Math.pow(2, octaves);\n  }\n  /**\n   * The envelope's exponent value.\n   */\n\n\n  get exponent() {\n    return this._exponent.value;\n  }\n\n  set exponent(exponent) {\n    this._exponent.value = exponent;\n  }\n  /**\n   * Clean up\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._exponent.dispose();\n\n    this._scale.dispose();\n\n    return this;\n  }\n\n}","import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Monophonic } from \"../instrument/Monophonic\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { Source } from \"../source/Source\";\nimport { FrequencyEnvelope } from \"../component/envelope/FrequencyEnvelope\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\n/**\n * MonoSynth is composed of one `oscillator`, one `filter`, and two `envelopes`.\n * The amplitude of the Oscillator and the cutoff frequency of the\n * Filter are controlled by Envelopes.\n * <img src=\"https://docs.google.com/drawings/d/1gaY1DF9_Hzkodqf8JI1Cg2VZfwSElpFQfI94IQwad38/pub?w=924&h=240\">\n * @example\n * const synth = new Tone.MonoSynth({\n * \toscillator: {\n * \t\ttype: \"square\"\n * \t},\n * \tenvelope: {\n * \t\tattack: 0.1\n * \t}\n * }).toDestination();\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Instrument\n */\n\nexport class MonoSynth extends Monophonic {\n  constructor() {\n    super(optionsFromArguments(MonoSynth.getDefaults(), arguments));\n    this.name = \"MonoSynth\";\n    const options = optionsFromArguments(MonoSynth.getDefaults(), arguments);\n    this.oscillator = new OmniOscillator(Object.assign(options.oscillator, {\n      context: this.context,\n      detune: options.detune,\n      onstop: () => this.onsilence(this)\n    }));\n    this.frequency = this.oscillator.frequency;\n    this.detune = this.oscillator.detune;\n    this.filter = new Filter(Object.assign(options.filter, {\n      context: this.context\n    }));\n    this.filterEnvelope = new FrequencyEnvelope(Object.assign(options.filterEnvelope, {\n      context: this.context\n    }));\n    this.envelope = new AmplitudeEnvelope(Object.assign(options.envelope, {\n      context: this.context\n    })); // connect the oscillators to the output\n\n    this.oscillator.chain(this.filter, this.envelope, this.output); // connect the filter envelope\n\n    this.filterEnvelope.connect(this.filter.frequency);\n    readOnly(this, [\"oscillator\", \"frequency\", \"detune\", \"filter\", \"filterEnvelope\", \"envelope\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(Monophonic.getDefaults(), {\n      envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        attack: 0.005,\n        decay: 0.1,\n        release: 1,\n        sustain: 0.9\n      }),\n      filter: Object.assign(omitFromObject(Filter.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        Q: 1,\n        rolloff: -12,\n        type: \"lowpass\"\n      }),\n      filterEnvelope: Object.assign(omitFromObject(FrequencyEnvelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        attack: 0.6,\n        baseFrequency: 200,\n        decay: 0.2,\n        exponent: 2,\n        octaves: 3,\n        release: 2,\n        sustain: 0.5\n      }),\n      oscillator: Object.assign(omitFromObject(OmniOscillator.getDefaults(), Object.keys(Source.getDefaults())), {\n        type: \"sawtooth\"\n      })\n    });\n  }\n  /**\n   * start the attack portion of the envelope\n   * @param time the time the attack should start\n   * @param velocity the velocity of the note (0-1)\n   */\n\n\n  _triggerEnvelopeAttack(time, velocity = 1) {\n    this.envelope.triggerAttack(time, velocity);\n    this.filterEnvelope.triggerAttack(time);\n    this.oscillator.start(time);\n\n    if (this.envelope.sustain === 0) {\n      const computedAttack = this.toSeconds(this.envelope.attack);\n      const computedDecay = this.toSeconds(this.envelope.decay);\n      this.oscillator.stop(time + computedAttack + computedDecay);\n    }\n  }\n  /**\n   * start the release portion of the envelope\n   * @param time the time the release should start\n   */\n\n\n  _triggerEnvelopeRelease(time) {\n    this.envelope.triggerRelease(time);\n    this.filterEnvelope.triggerRelease(time);\n    this.oscillator.stop(time + this.toSeconds(this.envelope.release));\n  }\n\n  getLevelAtTime(time) {\n    time = this.toSeconds(time);\n    return this.envelope.getValueAtTime(time);\n  }\n\n  dispose() {\n    super.dispose();\n    this.oscillator.dispose();\n    this.envelope.dispose();\n    this.filterEnvelope.dispose();\n    this.filter.dispose();\n    return this;\n  }\n\n}","import { Monophonic } from \"./Monophonic\";\nimport { MonoSynth } from \"./MonoSynth\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\n/**\n * DuoSynth is a monophonic synth composed of two [[MonoSynths]] run in parallel with control over the\n * frequency ratio between the two voices and vibrato effect.\n * @example\n * const duoSynth = new Tone.DuoSynth().toDestination();\n * duoSynth.triggerAttackRelease(\"C4\", \"2n\");\n * @category Instrument\n */\n\nexport class DuoSynth extends Monophonic {\n  constructor() {\n    super(optionsFromArguments(DuoSynth.getDefaults(), arguments));\n    this.name = \"DuoSynth\";\n    const options = optionsFromArguments(DuoSynth.getDefaults(), arguments);\n    this.voice0 = new MonoSynth(Object.assign(options.voice0, {\n      context: this.context,\n      onsilence: () => this.onsilence(this)\n    }));\n    this.voice1 = new MonoSynth(Object.assign(options.voice1, {\n      context: this.context\n    }));\n    this.harmonicity = new Multiply({\n      context: this.context,\n      units: \"positive\",\n      value: options.harmonicity\n    });\n    this._vibrato = new LFO({\n      frequency: options.vibratoRate,\n      context: this.context,\n      min: -50,\n      max: 50\n    }); // start the vibrato immediately\n\n    this._vibrato.start();\n\n    this.vibratoRate = this._vibrato.frequency;\n    this._vibratoGain = new Gain({\n      context: this.context,\n      units: \"normalRange\",\n      gain: options.vibratoAmount\n    });\n    this.vibratoAmount = this._vibratoGain.gain;\n    this.frequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: 440\n    });\n    this.detune = new Signal({\n      context: this.context,\n      units: \"cents\",\n      value: options.detune\n    }); // control the two voices frequency\n\n    this.frequency.connect(this.voice0.frequency);\n    this.frequency.chain(this.harmonicity, this.voice1.frequency);\n\n    this._vibrato.connect(this._vibratoGain);\n\n    this._vibratoGain.fan(this.voice0.detune, this.voice1.detune);\n\n    this.detune.fan(this.voice0.detune, this.voice1.detune);\n    this.voice0.connect(this.output);\n    this.voice1.connect(this.output);\n    readOnly(this, [\"voice0\", \"voice1\", \"frequency\", \"vibratoAmount\", \"vibratoRate\"]);\n  }\n\n  getLevelAtTime(time) {\n    time = this.toSeconds(time);\n    return this.voice0.envelope.getValueAtTime(time) + this.voice1.envelope.getValueAtTime(time);\n  }\n\n  static getDefaults() {\n    return deepMerge(Monophonic.getDefaults(), {\n      vibratoAmount: 0.5,\n      vibratoRate: 5,\n      harmonicity: 1.5,\n      voice0: deepMerge(omitFromObject(MonoSynth.getDefaults(), Object.keys(Monophonic.getDefaults())), {\n        filterEnvelope: {\n          attack: 0.01,\n          decay: 0.0,\n          sustain: 1,\n          release: 0.5\n        },\n        envelope: {\n          attack: 0.01,\n          decay: 0.0,\n          sustain: 1,\n          release: 0.5\n        }\n      }),\n      voice1: deepMerge(omitFromObject(MonoSynth.getDefaults(), Object.keys(Monophonic.getDefaults())), {\n        filterEnvelope: {\n          attack: 0.01,\n          decay: 0.0,\n          sustain: 1,\n          release: 0.5\n        },\n        envelope: {\n          attack: 0.01,\n          decay: 0.0,\n          sustain: 1,\n          release: 0.5\n        }\n      })\n    });\n  }\n  /**\n   * Trigger the attack portion of the note\n   */\n\n\n  _triggerEnvelopeAttack(time, velocity) {\n    // @ts-ignore\n    this.voice0._triggerEnvelopeAttack(time, velocity); // @ts-ignore\n\n\n    this.voice1._triggerEnvelopeAttack(time, velocity);\n  }\n  /**\n   * Trigger the release portion of the note\n   */\n\n\n  _triggerEnvelopeRelease(time) {\n    // @ts-ignore\n    this.voice0._triggerEnvelopeRelease(time); // @ts-ignore\n\n\n    this.voice1._triggerEnvelopeRelease(time);\n\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n    this.voice0.dispose();\n    this.voice1.dispose();\n    this.frequency.dispose();\n    this.detune.dispose();\n\n    this._vibrato.dispose();\n\n    this.vibratoRate.dispose();\n\n    this._vibratoGain.dispose();\n\n    this.harmonicity.dispose();\n    return this;\n  }\n\n}","import { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { ModulationSynth } from \"./ModulationSynth\";\n/**\n * FMSynth is composed of two Tone.Synths where one Tone.Synth modulates\n * the frequency of a second Tone.Synth. A lot of spectral content\n * can be explored using the modulationIndex parameter. Read more about\n * frequency modulation synthesis on Sound On Sound: [Part 1](https://web.archive.org/web/20160403123704/http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm), [Part 2](https://web.archive.org/web/20160403115835/http://www.soundonsound.com/sos/may00/articles/synth.htm).\n *\n * @example\n * const fmSynth = new Tone.FMSynth().toDestination();\n * fmSynth.triggerAttackRelease(\"C5\", \"4n\");\n *\n * @category Instrument\n */\n\nexport class FMSynth extends ModulationSynth {\n  constructor() {\n    super(optionsFromArguments(FMSynth.getDefaults(), arguments));\n    this.name = \"FMSynth\";\n    const options = optionsFromArguments(FMSynth.getDefaults(), arguments);\n    this.modulationIndex = new Multiply({\n      context: this.context,\n      value: options.modulationIndex\n    }); // control the two voices frequency\n\n    this.frequency.connect(this._carrier.frequency);\n    this.frequency.chain(this.harmonicity, this._modulator.frequency);\n    this.frequency.chain(this.modulationIndex, this._modulationNode);\n    this.detune.fan(this._carrier.detune, this._modulator.detune);\n\n    this._modulator.connect(this._modulationNode.gain);\n\n    this._modulationNode.connect(this._carrier.frequency);\n\n    this._carrier.connect(this.output);\n  }\n\n  static getDefaults() {\n    return Object.assign(ModulationSynth.getDefaults(), {\n      modulationIndex: 10\n    });\n  }\n\n  dispose() {\n    super.dispose();\n    this.modulationIndex.dispose();\n    return this;\n  }\n\n}","import { Envelope } from \"../component/envelope/Envelope\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Scale } from \"../signal/Scale\";\nimport { Signal } from \"../signal/Signal\";\nimport { FMOscillator } from \"../source/oscillator/FMOscillator\";\nimport { Monophonic } from \"./Monophonic\";\n/**\n * Inharmonic ratio of frequencies based on the Roland TR-808\n * Taken from https://ccrma.stanford.edu/papers/tr-808-cymbal-physically-informed-circuit-bendable-digital-model\n */\n\nconst inharmRatios = [1.0, 1.483, 1.932, 2.546, 2.630, 3.897];\n/**\n * A highly inharmonic and spectrally complex source with a highpass filter\n * and amplitude envelope which is good for making metallophone sounds.\n * Based on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).\n * Inspiration from [Sound on Sound](https://shorturl.at/rSZ12).\n * @category Instrument\n */\n\nexport class MetalSynth extends Monophonic {\n  constructor() {\n    super(optionsFromArguments(MetalSynth.getDefaults(), arguments));\n    this.name = \"MetalSynth\";\n    /**\n     * The array of FMOscillators\n     */\n\n    this._oscillators = [];\n    /**\n     * The frequency multipliers\n     */\n\n    this._freqMultipliers = [];\n    const options = optionsFromArguments(MetalSynth.getDefaults(), arguments);\n    this.detune = new Signal({\n      context: this.context,\n      units: \"cents\",\n      value: options.detune\n    });\n    this.frequency = new Signal({\n      context: this.context,\n      units: \"frequency\"\n    });\n    this._amplitude = new Gain({\n      context: this.context,\n      gain: 0\n    }).connect(this.output);\n    this._highpass = new Filter({\n      // Q: -3.0102999566398125,\n      Q: 0,\n      context: this.context,\n      type: \"highpass\"\n    }).connect(this._amplitude);\n\n    for (let i = 0; i < inharmRatios.length; i++) {\n      const osc = new FMOscillator({\n        context: this.context,\n        harmonicity: options.harmonicity,\n        modulationIndex: options.modulationIndex,\n        modulationType: \"square\",\n        onstop: i === 0 ? () => this.onsilence(this) : noOp,\n        type: \"square\"\n      });\n      osc.connect(this._highpass);\n      this._oscillators[i] = osc;\n      const mult = new Multiply({\n        context: this.context,\n        value: inharmRatios[i]\n      });\n      this._freqMultipliers[i] = mult;\n      this.frequency.chain(mult, osc.frequency);\n      this.detune.connect(osc.detune);\n    }\n\n    this._filterFreqScaler = new Scale({\n      context: this.context,\n      max: 7000,\n      min: this.toFrequency(options.resonance)\n    });\n    this.envelope = new Envelope({\n      attack: options.envelope.attack,\n      attackCurve: \"linear\",\n      context: this.context,\n      decay: options.envelope.decay,\n      release: options.envelope.release,\n      sustain: 0\n    });\n    this.envelope.chain(this._filterFreqScaler, this._highpass.frequency);\n    this.envelope.connect(this._amplitude.gain); // set the octaves\n\n    this._octaves = options.octaves;\n    this.octaves = options.octaves;\n  }\n\n  static getDefaults() {\n    return deepMerge(Monophonic.getDefaults(), {\n      envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        attack: 0.001,\n        decay: 1.4,\n        release: 0.2\n      }),\n      harmonicity: 5.1,\n      modulationIndex: 32,\n      octaves: 1.5,\n      resonance: 4000\n    });\n  }\n  /**\n   * Trigger the attack.\n   * @param time When the attack should be triggered.\n   * @param velocity The velocity that the envelope should be triggered at.\n   */\n\n\n  _triggerEnvelopeAttack(time, velocity = 1) {\n    this.envelope.triggerAttack(time, velocity);\n\n    this._oscillators.forEach(osc => osc.start(time));\n\n    if (this.envelope.sustain === 0) {\n      this._oscillators.forEach(osc => {\n        osc.stop(time + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay));\n      });\n    }\n\n    return this;\n  }\n  /**\n   * Trigger the release of the envelope.\n   * @param time When the release should be triggered.\n   */\n\n\n  _triggerEnvelopeRelease(time) {\n    this.envelope.triggerRelease(time);\n\n    this._oscillators.forEach(osc => osc.stop(time + this.toSeconds(this.envelope.release)));\n\n    return this;\n  }\n\n  getLevelAtTime(time) {\n    time = this.toSeconds(time);\n    return this.envelope.getValueAtTime(time);\n  }\n  /**\n   * The modulationIndex of the oscillators which make up the source.\n   * see [[FMOscillator.modulationIndex]]\n   * @min 1\n   * @max 100\n   */\n\n\n  get modulationIndex() {\n    return this._oscillators[0].modulationIndex.value;\n  }\n\n  set modulationIndex(val) {\n    this._oscillators.forEach(osc => osc.modulationIndex.value = val);\n  }\n  /**\n   * The harmonicity of the oscillators which make up the source.\n   * see Tone.FMOscillator.harmonicity\n   * @min 0.1\n   * @max 10\n   */\n\n\n  get harmonicity() {\n    return this._oscillators[0].harmonicity.value;\n  }\n\n  set harmonicity(val) {\n    this._oscillators.forEach(osc => osc.harmonicity.value = val);\n  }\n  /**\n   * The lower level of the highpass filter which is attached to the envelope.\n   * This value should be between [0, 7000]\n   * @min 0\n   * @max 7000\n   */\n\n\n  get resonance() {\n    return this._filterFreqScaler.min;\n  }\n\n  set resonance(val) {\n    this._filterFreqScaler.min = this.toFrequency(val);\n    this.octaves = this._octaves;\n  }\n  /**\n   * The number of octaves above the \"resonance\" frequency\n   * that the filter ramps during the attack/decay envelope\n   * @min 0\n   * @max 8\n   */\n\n\n  get octaves() {\n    return this._octaves;\n  }\n\n  set octaves(val) {\n    this._octaves = val;\n    this._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, val);\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._oscillators.forEach(osc => osc.dispose());\n\n    this._freqMultipliers.forEach(freqMult => freqMult.dispose());\n\n    this.frequency.dispose();\n    this.detune.dispose();\n\n    this._filterFreqScaler.dispose();\n\n    this._amplitude.dispose();\n\n    this.envelope.dispose();\n\n    this._highpass.dispose();\n\n    return this;\n  }\n\n}","import { __decorate } from \"tslib\";\nimport { FrequencyClass } from \"../core/type/Frequency\";\nimport { deepMerge, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Monophonic } from \"./Monophonic\";\nimport { Synth } from \"./Synth\";\nimport { range, timeRange } from \"../core/util/Decorator\";\n/**\n * MembraneSynth makes kick and tom sounds using a single oscillator\n * with an amplitude envelope and frequency ramp. A Tone.OmniOscillator\n * is routed through a Tone.AmplitudeEnvelope to the output. The drum\n * quality of the sound comes from the frequency envelope applied\n * during MembraneSynth.triggerAttack(note). The frequency envelope\n * starts at <code>note * .octaves</code> and ramps to <code>note</code>\n * over the duration of <code>.pitchDecay</code>.\n * @example\n * const synth = new Tone.MembraneSynth().toDestination();\n * synth.triggerAttackRelease(\"C2\", \"8n\");\n * @category Instrument\n */\n\nexport class MembraneSynth extends Synth {\n  constructor() {\n    super(optionsFromArguments(MembraneSynth.getDefaults(), arguments));\n    this.name = \"MembraneSynth\";\n    /**\n     * Portamento is ignored in this synth. use pitch decay instead.\n     */\n\n    this.portamento = 0;\n    const options = optionsFromArguments(MembraneSynth.getDefaults(), arguments);\n    this.pitchDecay = options.pitchDecay;\n    this.octaves = options.octaves;\n    readOnly(this, [\"oscillator\", \"envelope\"]);\n  }\n\n  static getDefaults() {\n    return deepMerge(Monophonic.getDefaults(), Synth.getDefaults(), {\n      envelope: {\n        attack: 0.001,\n        attackCurve: \"exponential\",\n        decay: 0.4,\n        release: 1.4,\n        sustain: 0.01\n      },\n      octaves: 10,\n      oscillator: {\n        type: \"sine\"\n      },\n      pitchDecay: 0.05\n    });\n  }\n\n  setNote(note, time) {\n    const seconds = this.toSeconds(time);\n    const hertz = this.toFrequency(note instanceof FrequencyClass ? note.toFrequency() : note);\n    const maxNote = hertz * this.octaves;\n    this.oscillator.frequency.setValueAtTime(maxNote, seconds);\n    this.oscillator.frequency.exponentialRampToValueAtTime(hertz, seconds + this.toSeconds(this.pitchDecay));\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n    return this;\n  }\n\n}\n\n__decorate([range(0)], MembraneSynth.prototype, \"octaves\", void 0);\n\n__decorate([timeRange(0)], MembraneSynth.prototype, \"pitchDecay\", void 0);","import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { Noise } from \"../source/Noise\";\nimport { Instrument } from \"./Instrument\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { Source } from \"../source/Source\";\n/**\n * Tone.NoiseSynth is composed of [[Noise]] through an [[AmplitudeEnvelope]].\n * ```\n * +-------+   +-------------------+\n * | Noise +>--> AmplitudeEnvelope +>--> Output\n * +-------+   +-------------------+\n * ```\n * @example\n * const noiseSynth = new Tone.NoiseSynth().toDestination();\n * noiseSynth.triggerAttackRelease(\"8n\", 0.05);\n * @category Instrument\n */\n\nexport class NoiseSynth extends Instrument {\n  constructor() {\n    super(optionsFromArguments(NoiseSynth.getDefaults(), arguments));\n    this.name = \"NoiseSynth\";\n    const options = optionsFromArguments(NoiseSynth.getDefaults(), arguments);\n    this.noise = new Noise(Object.assign({\n      context: this.context\n    }, options.noise));\n    this.envelope = new AmplitudeEnvelope(Object.assign({\n      context: this.context\n    }, options.envelope)); // connect the noise to the output\n\n    this.noise.chain(this.envelope, this.output);\n  }\n\n  static getDefaults() {\n    return Object.assign(Instrument.getDefaults(), {\n      envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        decay: 0.1,\n        sustain: 0.0\n      }),\n      noise: Object.assign(omitFromObject(Noise.getDefaults(), Object.keys(Source.getDefaults())), {\n        type: \"white\"\n      })\n    });\n  }\n  /**\n   * Start the attack portion of the envelopes. Unlike other\n   * instruments, Tone.NoiseSynth doesn't have a note.\n   * @example\n   * const noiseSynth = new Tone.NoiseSynth().toDestination();\n   * noiseSynth.triggerAttack();\n   */\n\n\n  triggerAttack(time, velocity = 1) {\n    time = this.toSeconds(time); // the envelopes\n\n    this.envelope.triggerAttack(time, velocity); // start the noise\n\n    this.noise.start(time);\n\n    if (this.envelope.sustain === 0) {\n      this.noise.stop(time + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay));\n    }\n\n    return this;\n  }\n  /**\n   * Start the release portion of the envelopes.\n   */\n\n\n  triggerRelease(time) {\n    time = this.toSeconds(time);\n    this.envelope.triggerRelease(time);\n    this.noise.stop(time + this.toSeconds(this.envelope.release));\n    return this;\n  }\n\n  sync() {\n    this._syncMethod(\"triggerAttack\", 0);\n\n    this._syncMethod(\"triggerRelease\", 0);\n\n    return this;\n  }\n\n  triggerAttackRelease(duration, time, velocity = 1) {\n    time = this.toSeconds(time);\n    duration = this.toSeconds(duration);\n    this.triggerAttack(time, velocity);\n    this.triggerRelease(time + duration);\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n    this.noise.dispose();\n    this.envelope.dispose();\n    return this;\n  }\n\n}","const workletContext = new Set();\n/**\n * Add a class to the AudioWorkletGlobalScope\n */\n\nexport function addToWorklet(classOrFunction) {\n  workletContext.add(classOrFunctionToString(classOrFunction));\n}\n/**\n * Converts a class or a function to a string so it can be used in the worklet context\n */\n\nfunction classOrFunctionToString(classOrFunction) {\n  const regexp = new RegExp(/class.*extends.*\\{/m);\n  const matches = classOrFunction.toString().match(regexp);\n\n  if (matches) {\n    // if it extends another class, get that class name\n    return classOrFunction.toString().replace(matches[0], `class ${classOrFunction.name} extends ${Object.getPrototypeOf(classOrFunction).name} {`);\n  } else {\n    // otherwise just return the class as a string\n    return classOrFunction.toString();\n  }\n}\n/**\n * Register a processor in the AudioWorkletGlobalScope with the given name\n */\n\n\nexport function registerProcessor(name, classDesc) {\n  const processor =\n  /* javascript */\n  `registerProcessor(\"${name}\", ${classOrFunctionToString(classDesc)})`;\n  workletContext.add(processor);\n}\n/**\n * Get all of the modules which have been registered to the AudioWorkletGlobalScope\n */\n\nexport function getWorkletGlobalScope() {\n  return Array.from(workletContext).join(\"\\n\");\n}","import { ToneAudioNode } from \"../context/ToneAudioNode\";\nimport { noOp } from \"../util/Interface\";\nimport { getWorkletGlobalScope } from \"./WorkletGlobalScope\";\nexport class ToneAudioWorklet extends ToneAudioNode {\n  constructor(options) {\n    super(options);\n    this.name = \"ToneAudioWorklet\";\n    /**\n     * The constructor options for the node\n     */\n\n    this.workletOptions = {};\n    /**\n     * Callback which is invoked when there is an error in the processing\n     */\n\n    this.onprocessorerror = noOp;\n    const blobUrl = URL.createObjectURL(new Blob([getWorkletGlobalScope()], {\n      type: \"text/javascript\"\n    }));\n\n    const name = this._audioWorkletName();\n\n    this._dummyGain = this.context.createGain();\n    this._dummyParam = this._dummyGain.gain; // Register the processor\n\n    this.context.addAudioWorkletModule(blobUrl, name).then(() => {\n      // create the worklet when it's read\n      if (!this.disposed) {\n        this._worklet = this.context.createAudioWorkletNode(name, this.workletOptions);\n        this._worklet.onprocessorerror = this.onprocessorerror.bind(this);\n        this.onReady(this._worklet);\n      }\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._dummyGain.disconnect();\n\n    if (this._worklet) {\n      this._worklet.port.postMessage(\"dispose\");\n\n      this._worklet.disconnect();\n    }\n\n    return this;\n  }\n\n}","import { AudioWorkletProcessor } from \"./AudioWorkletProcessor.worklet\";\nimport { addToWorklet } from \"./WorkletGlobalScope\";\n/**\n * The base AudioWorkletProcessor for use in Tone.js. Works with the [[ToneAudioWorklet]].\n */\n\nexport class ToneAudioWorkletProcessor extends AudioWorkletProcessor {\n  constructor(options) {\n    super(options);\n    /**\n     * If the processor was disposed or not. Keep alive until it's disposed.\n     */\n\n    this.disposed = false;\n    /**\n     * The number of samples in the processing block\n     */\n\n    this.blockSize = 128;\n    /**\n     * the sample rate\n     */\n    // @ts-ignore\n\n    this.sampleRate = sampleRate;\n\n    this.port.onmessage = event => {\n      // when it receives a dispose \n      if (event.data === \"dispose\") {\n        this.disposed = true;\n      }\n    };\n  }\n\n}\naddToWorklet(ToneAudioWorkletProcessor);","/**\n * This is just an interface for the AudioWorkletProcessor\n */\nexport class AudioWorkletProcessor {\n  constructor(_options) {\n    this.parameterDescriptors = [];\n    this.port = new MessagePort();\n  }\n\n  process(_inputs, _outputs, _parameters) {\n    return false;\n  }\n\n}","import { ToneAudioWorkletProcessor } from \"./ToneAudioWorkletProcessor.worklet\";\nimport { addToWorklet } from \"./WorkletGlobalScope\";\nexport class SingleIOProcessor extends ToneAudioWorkletProcessor {\n  constructor(options) {\n    super(Object.assign(options, {\n      numberOfInputs: 1,\n      numberOfOutputs: 1\n    }));\n    /**\n     * Holds the name of the parameter and a single value of that\n     * parameter at the current sample\n     */\n\n    this.params = {};\n  }\n  /**\n   * Update the private `params` object with the\n   * values of the parameters at the given index\n   */\n\n\n  updateParams(parameters, index) {\n    for (const paramName in parameters) {\n      const param = parameters[paramName];\n\n      if (param.length > 1) {\n        this.params[paramName] = parameters[paramName][index];\n      } else {\n        this.params[paramName] = parameters[paramName][0];\n      }\n    }\n  }\n  /**\n   * Process a single frame of the audio\n   */\n\n\n  process(inputs, outputs, parameters) {\n    const input = inputs[0];\n    const output = outputs[0]; // get the parameter values\n\n    const channelCount = Math.max((input === null || input === void 0 ? void 0 : input.length) || 0, output.length);\n\n    for (let sample = 0; sample < this.blockSize; sample++) {\n      this.updateParams(parameters, sample);\n\n      for (let channel = 0; channel < channelCount; channel++) {\n        const inputSample = (input === null || input === void 0 ? void 0 : input.length) ? input[channel][sample] : 0;\n        output[channel][sample] = this.generate(inputSample, channel, this.params);\n      }\n    }\n\n    return !this.disposed;\n  }\n\n}\n;\naddToWorklet(SingleIOProcessor);","import { addToWorklet } from \"./WorkletGlobalScope\";\n/**\n * A multichannel buffer for use within an AudioWorkletProcessor as a delay line\n */\n\nexport class DelayLine {\n  constructor(size, channels) {\n    this.buffer = [];\n    this.writeHead = [];\n    this.size = size; // create the empty channels\n\n    for (let i = 0; i < channels; i++) {\n      this.buffer[i] = new Float32Array(this.size);\n      this.writeHead[i] = 0;\n    }\n  }\n  /**\n   * Push a value onto the end\n   */\n\n\n  push(channel, value) {\n    this.writeHead[channel] += 1;\n\n    if (this.writeHead[channel] > this.size) {\n      this.writeHead[channel] = 0;\n    }\n\n    this.buffer[channel][this.writeHead[channel]] = value;\n  }\n  /**\n   * Get the recorded value of the channel given the delay\n   */\n\n\n  get(channel, delay) {\n    let readHead = this.writeHead[channel] - Math.floor(delay);\n\n    if (readHead < 0) {\n      readHead += this.size;\n    }\n\n    return this.buffer[channel][readHead];\n  }\n\n}\naddToWorklet(DelayLine);","import { SingleIOProcessor } from \"../../core/worklet/SingleIOProcessor.worklet\";\nimport \"../../core/worklet/DelayLine.worklet\";\nimport { registerProcessor } from \"../../core/worklet/WorkletGlobalScope\";\nexport const workletName = \"feedback-comb-filter\";\nexport class FeedbackCombFilterWorklet extends SingleIOProcessor {\n  constructor(options) {\n    super(options); // @ts-ignore\n\n    this.delayLine = new DelayLine(this.sampleRate, options.channelCount || 2);\n  }\n\n  static get parameterDescriptors() {\n    return [{\n      name: \"delayTime\",\n      defaultValue: 0.1,\n      minValue: 0,\n      maxValue: 1\n    }, {\n      name: \"feedback\",\n      defaultValue: 0.5,\n      minValue: 0,\n      maxValue: 0.9999\n    }];\n  }\n\n  generate(input, channel, parameters) {\n    const delayedSample = this.delayLine.get(channel, parameters.delayTime * this.sampleRate);\n    this.delayLine.push(channel, input + delayedSample * parameters.feedback); // console.log(channel);\n\n    return delayedSample;\n  }\n\n}\nregisterProcessor(workletName, FeedbackCombFilterWorklet);","import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { connectSeries, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { ToneAudioWorklet } from \"../../core/worklet/ToneAudioWorklet\";\nimport { workletName } from \"./FeedbackCombFilter.worklet\";\n/**\n * Comb filters are basic building blocks for physical modeling. Read more\n * about comb filters on [CCRMA's website](https://ccrma.stanford.edu/~jos/pasp/Feedback_Comb_Filters.html).\n *\n * This comb filter is implemented with the AudioWorkletNode which allows it to have feedback delays less than the\n * Web Audio processing block of 128 samples. There is a polyfill for browsers that don't yet support the\n * AudioWorkletNode, but it will add some latency and have slower performance than the AudioWorkletNode.\n * @category Component\n */\n\nexport class FeedbackCombFilter extends ToneAudioWorklet {\n  constructor() {\n    super(optionsFromArguments(FeedbackCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\"]));\n    this.name = \"FeedbackCombFilter\";\n    const options = optionsFromArguments(FeedbackCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\"]);\n    this.input = new Gain({\n      context: this.context\n    });\n    this.output = new Gain({\n      context: this.context\n    });\n    this.delayTime = new Param({\n      context: this.context,\n      value: options.delayTime,\n      units: \"time\",\n      minValue: 0,\n      maxValue: 1,\n      param: this._dummyParam,\n      swappable: true\n    });\n    this.resonance = new Param({\n      context: this.context,\n      value: options.resonance,\n      units: \"normalRange\",\n      param: this._dummyParam,\n      swappable: true\n    });\n    readOnly(this, [\"resonance\", \"delayTime\"]);\n  }\n\n  _audioWorkletName() {\n    return workletName;\n  }\n  /**\n   * The default parameters\n   */\n\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      delayTime: 0.1,\n      resonance: 0.5\n    });\n  }\n\n  onReady(node) {\n    connectSeries(this.input, node, this.output);\n    const delayTime = node.parameters.get(\"delayTime\");\n    ;\n    this.delayTime.setParam(delayTime);\n    const feedback = node.parameters.get(\"feedback\");\n    ;\n    this.resonance.setParam(feedback);\n  }\n\n  dispose() {\n    super.dispose();\n    this.input.dispose();\n    this.output.dispose();\n    this.delayTime.dispose();\n    this.resonance.dispose();\n    return this;\n  }\n\n}","import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Gain } from \"../../core/context/Gain\";\n/**\n * A one pole filter with 6db-per-octave rolloff. Either \"highpass\" or \"lowpass\".\n * Note that changing the type or frequency may result in a discontinuity which\n * can sound like a click or pop.\n * References:\n * * http://www.earlevel.com/main/2012/12/15/a-one-pole-filter/\n * * http://www.dspguide.com/ch19/2.htm\n * * https://github.com/vitaliy-bobrov/js-rocks/blob/master/src/app/audio/effects/one-pole-filters.ts\n * @category Component\n */\n\nexport class OnePoleFilter extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(OnePoleFilter.getDefaults(), arguments, [\"frequency\", \"type\"]));\n    this.name = \"OnePoleFilter\";\n    const options = optionsFromArguments(OnePoleFilter.getDefaults(), arguments, [\"frequency\", \"type\"]);\n    this._frequency = options.frequency;\n    this._type = options.type;\n    this.input = new Gain({\n      context: this.context\n    });\n    this.output = new Gain({\n      context: this.context\n    });\n\n    this._createFilter();\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      frequency: 880,\n      type: \"lowpass\"\n    });\n  }\n  /**\n   * Create a filter and dispose the old one\n   */\n\n\n  _createFilter() {\n    const oldFilter = this._filter;\n    const freq = this.toFrequency(this._frequency);\n    const t = 1 / (2 * Math.PI * freq);\n\n    if (this._type === \"lowpass\") {\n      const a0 = 1 / (t * this.context.sampleRate);\n      const b1 = a0 - 1;\n      this._filter = this.context.createIIRFilter([a0, 0], [1, b1]);\n    } else {\n      const b1 = 1 / (t * this.context.sampleRate) - 1;\n      this._filter = this.context.createIIRFilter([1, -1], [1, b1]);\n    }\n\n    this.input.chain(this._filter, this.output);\n\n    if (oldFilter) {\n      // dispose it on the next block\n      this.context.setTimeout(() => {\n        if (!this.disposed) {\n          this.input.disconnect(oldFilter);\n          oldFilter.disconnect();\n        }\n      }, this.blockTime);\n    }\n  }\n  /**\n   * The frequency value.\n   */\n\n\n  get frequency() {\n    return this._frequency;\n  }\n\n  set frequency(fq) {\n    this._frequency = fq;\n\n    this._createFilter();\n  }\n  /**\n   * The OnePole Filter type, either \"highpass\" or \"lowpass\"\n   */\n\n\n  get type() {\n    return this._type;\n  }\n\n  set type(t) {\n    this._type = t;\n\n    this._createFilter();\n  }\n  /**\n   * Get the frequency response curve. This curve represents how the filter\n   * responses to frequencies between 20hz-20khz.\n   * @param  len The number of values to return\n   * @return The frequency response curve between 20-20kHz\n   */\n\n\n  getFrequencyResponse(len = 128) {\n    const freqValues = new Float32Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const norm = Math.pow(i / len, 2);\n      const freq = norm * (20000 - 20) + 20;\n      freqValues[i] = freq;\n    }\n\n    const magValues = new Float32Array(len);\n    const phaseValues = new Float32Array(len);\n\n    this._filter.getFrequencyResponse(freqValues, magValues, phaseValues);\n\n    return magValues;\n  }\n\n  dispose() {\n    super.dispose();\n    this.input.dispose();\n    this.output.dispose();\n\n    this._filter.disconnect();\n\n    return this;\n  }\n\n}","import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { FeedbackCombFilter } from \"./FeedbackCombFilter\";\nimport { OnePoleFilter } from \"./OnePoleFilter\";\n/**\n * A lowpass feedback comb filter. It is similar to\n * [[FeedbackCombFilter]], but includes a lowpass filter.\n * @category Component\n */\n\nexport class LowpassCombFilter extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(LowpassCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\", \"dampening\"]));\n    this.name = \"LowpassCombFilter\";\n    const options = optionsFromArguments(LowpassCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\", \"dampening\"]);\n    this._combFilter = this.output = new FeedbackCombFilter({\n      context: this.context,\n      delayTime: options.delayTime,\n      resonance: options.resonance\n    });\n    this.delayTime = this._combFilter.delayTime;\n    this.resonance = this._combFilter.resonance;\n    this._lowpass = this.input = new OnePoleFilter({\n      context: this.context,\n      frequency: options.dampening,\n      type: \"lowpass\"\n    }); // connections\n\n    this._lowpass.connect(this._combFilter);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      dampening: 3000,\n      delayTime: 0.1,\n      resonance: 0.5\n    });\n  }\n  /**\n   * The dampening control of the feedback\n   */\n\n\n  get dampening() {\n    return this._lowpass.frequency;\n  }\n\n  set dampening(fq) {\n    this._lowpass.frequency = fq;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._combFilter.dispose();\n\n    this._lowpass.dispose();\n\n    return this;\n  }\n\n}","import { LowpassCombFilter } from \"../component/filter/LowpassCombFilter\";\nimport { deepMerge } from \"../core/util/Defaults\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Noise } from \"../source/Noise\";\nimport { Instrument } from \"./Instrument\";\n/**\n * Karplus-String string synthesis.\n * @example\n * const plucky = new Tone.PluckSynth().toDestination();\n * plucky.triggerAttack(\"C4\", \"+0.5\");\n * plucky.triggerAttack(\"C3\", \"+1\");\n * plucky.triggerAttack(\"C2\", \"+1.5\");\n * plucky.triggerAttack(\"C1\", \"+2\");\n * @category Instrument\n */\n\nexport class PluckSynth extends Instrument {\n  constructor() {\n    super(optionsFromArguments(PluckSynth.getDefaults(), arguments));\n    this.name = \"PluckSynth\";\n    const options = optionsFromArguments(PluckSynth.getDefaults(), arguments);\n    this._noise = new Noise({\n      context: this.context,\n      type: \"pink\"\n    });\n    this.attackNoise = options.attackNoise;\n    this._lfcf = new LowpassCombFilter({\n      context: this.context,\n      dampening: options.dampening,\n      resonance: options.resonance\n    });\n    this.resonance = options.resonance;\n    this.release = options.release;\n\n    this._noise.connect(this._lfcf);\n\n    this._lfcf.connect(this.output);\n  }\n\n  static getDefaults() {\n    return deepMerge(Instrument.getDefaults(), {\n      attackNoise: 1,\n      dampening: 4000,\n      resonance: 0.7,\n      release: 1\n    });\n  }\n  /**\n   * The dampening control. i.e. the lowpass filter frequency of the comb filter\n   * @min 0\n   * @max 7000\n   */\n\n\n  get dampening() {\n    return this._lfcf.dampening;\n  }\n\n  set dampening(fq) {\n    this._lfcf.dampening = fq;\n  }\n\n  triggerAttack(note, time) {\n    const freq = this.toFrequency(note);\n    time = this.toSeconds(time);\n    const delayAmount = 1 / freq;\n\n    this._lfcf.delayTime.setValueAtTime(delayAmount, time);\n\n    this._noise.start(time);\n\n    this._noise.stop(time + delayAmount * this.attackNoise);\n\n    this._lfcf.resonance.cancelScheduledValues(time);\n\n    this._lfcf.resonance.setValueAtTime(this.resonance, time);\n\n    return this;\n  }\n  /**\n   * Ramp down the [[resonance]] to 0 over the duration of the release time.\n   */\n\n\n  triggerRelease(time) {\n    this._lfcf.resonance.linearRampTo(0, this.release, time);\n\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._noise.dispose();\n\n    this._lfcf.dispose();\n\n    return this;\n  }\n\n}","import { MidiClass } from \"../core/type/Midi\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isNumber } from \"../core/util/TypeCheck\";\nimport { Instrument } from \"./Instrument\";\nimport { Synth } from \"./Synth\";\nimport { assert, warn } from \"../core/util/Debug\";\n/**\n * PolySynth handles voice creation and allocation for any\n * instruments passed in as the second paramter. PolySynth is\n * not a synthesizer by itself, it merely manages voices of\n * one of the other types of synths, allowing any of the\n * monophonic synthesizers to be polyphonic.\n *\n * @example\n * const synth = new Tone.PolySynth().toDestination();\n * // set the attributes across all the voices using 'set'\n * synth.set({ detune: -1200 });\n * // play a chord\n * synth.triggerAttackRelease([\"C4\", \"E4\", \"A4\"], 1);\n * @category Instrument\n */\n\nexport class PolySynth extends Instrument {\n  constructor() {\n    super(optionsFromArguments(PolySynth.getDefaults(), arguments, [\"voice\", \"options\"]));\n    this.name = \"PolySynth\";\n    /**\n     * The voices which are not currently in use\n     */\n\n    this._availableVoices = [];\n    /**\n     * The currently active voices\n     */\n\n    this._activeVoices = [];\n    /**\n     * All of the allocated voices for this synth.\n     */\n\n    this._voices = [];\n    /**\n     * The GC timeout. Held so that it could be cancelled when the node is disposed.\n     */\n\n    this._gcTimeout = -1;\n    /**\n     * A moving average of the number of active voices\n     */\n\n    this._averageActiveVoices = 0;\n    const options = optionsFromArguments(PolySynth.getDefaults(), arguments, [\"voice\", \"options\"]); // check against the old API (pre 14.3.0)\n\n    assert(!isNumber(options.voice), \"DEPRECATED: The polyphony count is no longer the first argument.\");\n    const defaults = options.voice.getDefaults();\n    this.options = Object.assign(defaults, options.options);\n    this.voice = options.voice;\n    this.maxPolyphony = options.maxPolyphony; // create the first voice\n\n    this._dummyVoice = this._getNextAvailableVoice(); // remove it from the voices list\n\n    const index = this._voices.indexOf(this._dummyVoice);\n\n    this._voices.splice(index, 1); // kick off the GC interval\n\n\n    this._gcTimeout = this.context.setInterval(this._collectGarbage.bind(this), 1);\n  }\n\n  static getDefaults() {\n    return Object.assign(Instrument.getDefaults(), {\n      maxPolyphony: 32,\n      options: {},\n      voice: Synth\n    });\n  }\n  /**\n   * The number of active voices.\n   */\n\n\n  get activeVoices() {\n    return this._activeVoices.length;\n  }\n  /**\n   * Invoked when the source is done making sound, so that it can be\n   * readded to the pool of available voices\n   */\n\n\n  _makeVoiceAvailable(voice) {\n    this._availableVoices.push(voice); // remove the midi note from 'active voices'\n\n\n    const activeVoiceIndex = this._activeVoices.findIndex(e => e.voice === voice);\n\n    this._activeVoices.splice(activeVoiceIndex, 1);\n  }\n  /**\n   * Get an available voice from the pool of available voices.\n   * If one is not available and the maxPolyphony limit is reached,\n   * steal a voice, otherwise return null.\n   */\n\n\n  _getNextAvailableVoice() {\n    // if there are available voices, return the first one\n    if (this._availableVoices.length) {\n      return this._availableVoices.shift();\n    } else if (this._voices.length < this.maxPolyphony) {\n      // otherwise if there is still more maxPolyphony, make a new voice\n      const voice = new this.voice(Object.assign(this.options, {\n        context: this.context,\n        onsilence: this._makeVoiceAvailable.bind(this)\n      }));\n      voice.connect(this.output);\n\n      this._voices.push(voice);\n\n      return voice;\n    } else {\n      warn(\"Max polyphony exceeded. Note dropped.\");\n    }\n  }\n  /**\n   * Occasionally check if there are any allocated voices which can be cleaned up.\n   */\n\n\n  _collectGarbage() {\n    this._averageActiveVoices = Math.max(this._averageActiveVoices * 0.95, this.activeVoices);\n\n    if (this._availableVoices.length && this._voices.length > Math.ceil(this._averageActiveVoices + 1)) {\n      // take off an available note\n      const firstAvail = this._availableVoices.shift();\n\n      const index = this._voices.indexOf(firstAvail);\n\n      this._voices.splice(index, 1);\n\n      if (!this.context.isOffline) {\n        firstAvail.dispose();\n      }\n    }\n  }\n  /**\n   * Internal method which triggers the attack\n   */\n\n\n  _triggerAttack(notes, time, velocity) {\n    notes.forEach(note => {\n      const midiNote = new MidiClass(this.context, note).toMidi();\n\n      const voice = this._getNextAvailableVoice();\n\n      if (voice) {\n        voice.triggerAttack(note, time, velocity);\n\n        this._activeVoices.push({\n          midi: midiNote,\n          voice,\n          released: false\n        });\n\n        this.log(\"triggerAttack\", note, time);\n      }\n    });\n  }\n  /**\n   * Internal method which triggers the release\n   */\n\n\n  _triggerRelease(notes, time) {\n    notes.forEach(note => {\n      const midiNote = new MidiClass(this.context, note).toMidi();\n\n      const event = this._activeVoices.find(({\n        midi,\n        released\n      }) => midi === midiNote && !released);\n\n      if (event) {\n        // trigger release on that note\n        event.voice.triggerRelease(time); // mark it as released\n\n        event.released = true;\n        this.log(\"triggerRelease\", note, time);\n      }\n    });\n  }\n  /**\n   * Schedule the attack/release events. If the time is in the future, then it should set a timeout\n   * to wait for just-in-time scheduling\n   */\n\n\n  _scheduleEvent(type, notes, time, velocity) {\n    assert(!this.disposed, \"Synth was already disposed\"); // if the notes are greater than this amount of time in the future, they should be scheduled with setTimeout\n\n    if (time <= this.now()) {\n      // do it immediately\n      if (type === \"attack\") {\n        this._triggerAttack(notes, time, velocity);\n      } else {\n        this._triggerRelease(notes, time);\n      }\n    } else {\n      // schedule it to start in the future\n      this.context.setTimeout(() => {\n        this._scheduleEvent(type, notes, time, velocity);\n      }, time - this.now());\n    }\n  }\n  /**\n   * Trigger the attack portion of the note\n   * @param  notes The notes to play. Accepts a single Frequency or an array of frequencies.\n   * @param  time  The start time of the note.\n   * @param velocity The velocity of the note.\n   * @example\n   * const synth = new Tone.PolySynth(Tone.FMSynth).toDestination();\n   * // trigger a chord immediately with a velocity of 0.2\n   * synth.triggerAttack([\"Ab3\", \"C4\", \"F5\"], Tone.now(), 0.2);\n   */\n\n\n  triggerAttack(notes, time, velocity) {\n    if (!Array.isArray(notes)) {\n      notes = [notes];\n    }\n\n    const computedTime = this.toSeconds(time);\n\n    this._scheduleEvent(\"attack\", notes, computedTime, velocity);\n\n    return this;\n  }\n  /**\n   * Trigger the release of the note. Unlike monophonic instruments,\n   * a note (or array of notes) needs to be passed in as the first argument.\n   * @param  notes The notes to play. Accepts a single Frequency or an array of frequencies.\n   * @param  time  When the release will be triggered.\n   * @example\n   * @example\n   * const poly = new Tone.PolySynth(Tone.AMSynth).toDestination();\n   * poly.triggerAttack([\"Ab3\", \"C4\", \"F5\"]);\n   * // trigger the release of the given notes.\n   * poly.triggerRelease([\"Ab3\", \"C4\"], \"+1\");\n   * poly.triggerRelease(\"F5\", \"+3\");\n   */\n\n\n  triggerRelease(notes, time) {\n    if (!Array.isArray(notes)) {\n      notes = [notes];\n    }\n\n    const computedTime = this.toSeconds(time);\n\n    this._scheduleEvent(\"release\", notes, computedTime);\n\n    return this;\n  }\n  /**\n   * Trigger the attack and release after the specified duration\n   * @param  notes The notes to play. Accepts a single  Frequency or an array of frequencies.\n   * @param  duration the duration of the note\n   * @param  time  if no time is given, defaults to now\n   * @param  velocity the velocity of the attack (0-1)\n   * @example\n   * const poly = new Tone.PolySynth(Tone.AMSynth).toDestination();\n   * // can pass in an array of durations as well\n   * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"Bb4\", \"D5\"], [4, 3, 2, 1]);\n   */\n\n\n  triggerAttackRelease(notes, duration, time, velocity) {\n    const computedTime = this.toSeconds(time);\n    this.triggerAttack(notes, computedTime, velocity);\n\n    if (isArray(duration)) {\n      assert(isArray(notes), \"If the duration is an array, the notes must also be an array\");\n      notes = notes;\n\n      for (let i = 0; i < notes.length; i++) {\n        const d = duration[Math.min(i, duration.length - 1)];\n        const durationSeconds = this.toSeconds(d);\n        assert(durationSeconds > 0, \"The duration must be greater than 0\");\n        this.triggerRelease(notes[i], computedTime + durationSeconds);\n      }\n    } else {\n      const durationSeconds = this.toSeconds(duration);\n      assert(durationSeconds > 0, \"The duration must be greater than 0\");\n      this.triggerRelease(notes, computedTime + durationSeconds);\n    }\n\n    return this;\n  }\n\n  sync() {\n    this._syncMethod(\"triggerAttack\", 1);\n\n    this._syncMethod(\"triggerRelease\", 1);\n\n    return this;\n  }\n  /**\n   * Set a member/attribute of the voices\n   * @example\n   * const poly = new Tone.PolySynth().toDestination();\n   * // set all of the voices using an options object for the synth type\n   * poly.set({\n   * \tenvelope: {\n   * \t\tattack: 0.25\n   * \t}\n   * });\n   * poly.triggerAttackRelease(\"Bb3\", 0.2);\n   */\n\n\n  set(options) {\n    // remove options which are controlled by the PolySynth\n    const sanitizedOptions = omitFromObject(options, [\"onsilence\", \"context\"]); // store all of the options\n\n    this.options = deepMerge(this.options, sanitizedOptions);\n\n    this._voices.forEach(voice => voice.set(sanitizedOptions));\n\n    this._dummyVoice.set(sanitizedOptions);\n\n    return this;\n  }\n\n  get() {\n    return this._dummyVoice.get();\n  }\n  /**\n   * Trigger the release portion of all the currently active voices immediately.\n   * Useful for silencing the synth.\n   */\n\n\n  releaseAll() {\n    const now = this.now();\n\n    this._activeVoices.forEach(({\n      voice\n    }) => {\n      voice.triggerRelease(now);\n    });\n\n    this._activeVoices = [];\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._dummyVoice.dispose();\n\n    this._voices.forEach(v => v.dispose());\n\n    this._activeVoices = [];\n    this._availableVoices = [];\n    this.context.clearInterval(this._gcTimeout);\n    return this;\n  }\n\n}","import { __decorate } from \"tslib\";\nimport { ToneAudioBuffers } from \"../core/context/ToneAudioBuffers\";\nimport { intervalToFrequencyRatio } from \"../core/type/Conversions\";\nimport { FrequencyClass } from \"../core/type/Frequency\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { isArray, isNote, isNumber } from \"../core/util/TypeCheck\";\nimport { Instrument } from \"../instrument/Instrument\";\nimport { ToneBufferSource } from \"../source/buffer/ToneBufferSource\";\nimport { timeRange } from \"../core/util/Decorator\";\nimport { assert } from \"../core/util/Debug\";\n/**\n * Pass in an object which maps the note's pitch or midi value to the url,\n * then you can trigger the attack and release of that note like other instruments.\n * By automatically repitching the samples, it is possible to play pitches which\n * were not explicitly included which can save loading time.\n *\n * For sample or buffer playback where repitching is not necessary,\n * use [[Player]].\n * @example\n * const sampler = new Tone.Sampler({\n * \turls: {\n * \t\tC1: \"C1.mp3\",\n * \t\tC2: \"C2.mp3\",\n * \t},\n * \tbaseUrl: \"https://tonejs.github.io/examples/audio/casio/\",\n * \tonload: () => {\n * \t\tsampler.triggerAttackRelease([\"C1\", \"E1\", \"G1\", \"B1\"], 0.5);\n * \t},\n * });\n * @category Instrument\n */\n\nexport class Sampler extends Instrument {\n  constructor() {\n    super(optionsFromArguments(Sampler.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\"));\n    this.name = \"Sampler\";\n    /**\n     * The object of all currently playing BufferSources\n     */\n\n    this._activeSources = new Map();\n    const options = optionsFromArguments(Sampler.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\");\n    const urlMap = {};\n    Object.keys(options.urls).forEach(note => {\n      const noteNumber = parseInt(note, 10);\n      assert(isNote(note) || isNumber(noteNumber) && isFinite(noteNumber), `url key is neither a note or midi pitch: ${note}`);\n\n      if (isNote(note)) {\n        // convert the note name to MIDI\n        const mid = new FrequencyClass(this.context, note).toMidi();\n        urlMap[mid] = options.urls[note];\n      } else if (isNumber(noteNumber) && isFinite(noteNumber)) {\n        // otherwise if it's numbers assume it's midi\n        urlMap[noteNumber] = options.urls[noteNumber];\n      }\n    });\n    this._buffers = new ToneAudioBuffers({\n      urls: urlMap,\n      onload: options.onload,\n      baseUrl: options.baseUrl,\n      onerror: options.onerror\n    });\n    this.attack = options.attack;\n    this.release = options.release;\n    this.curve = options.curve; // invoke the callback if it's already loaded\n\n    if (this._buffers.loaded) {\n      // invoke onload deferred\n      Promise.resolve().then(options.onload);\n    }\n  }\n\n  static getDefaults() {\n    return Object.assign(Instrument.getDefaults(), {\n      attack: 0,\n      baseUrl: \"\",\n      curve: \"exponential\",\n      onload: noOp,\n      onerror: noOp,\n      release: 0.1,\n      urls: {}\n    });\n  }\n  /**\n   * Returns the difference in steps between the given midi note at the closets sample.\n   */\n\n\n  _findClosest(midi) {\n    // searches within 8 octaves of the given midi note\n    const MAX_INTERVAL = 96;\n    let interval = 0;\n\n    while (interval < MAX_INTERVAL) {\n      // check above and below\n      if (this._buffers.has(midi + interval)) {\n        return -interval;\n      } else if (this._buffers.has(midi - interval)) {\n        return interval;\n      }\n\n      interval++;\n    }\n\n    throw new Error(`No available buffers for note: ${midi}`);\n  }\n  /**\n   * @param  notes\tThe note to play, or an array of notes.\n   * @param  time     When to play the note\n   * @param  velocity The velocity to play the sample back.\n   */\n\n\n  triggerAttack(notes, time, velocity = 1) {\n    this.log(\"triggerAttack\", notes, time, velocity);\n\n    if (!Array.isArray(notes)) {\n      notes = [notes];\n    }\n\n    notes.forEach(note => {\n      const midi = new FrequencyClass(this.context, note).toMidi(); // find the closest note pitch\n\n      const difference = this._findClosest(midi);\n\n      const closestNote = midi - difference;\n\n      const buffer = this._buffers.get(closestNote);\n\n      const playbackRate = intervalToFrequencyRatio(difference); // play that note\n\n      const source = new ToneBufferSource({\n        url: buffer,\n        context: this.context,\n        curve: this.curve,\n        fadeIn: this.attack,\n        fadeOut: this.release,\n        playbackRate\n      }).connect(this.output);\n      source.start(time, 0, buffer.duration / playbackRate, velocity); // add it to the active sources\n\n      if (!isArray(this._activeSources.get(midi))) {\n        this._activeSources.set(midi, []);\n      }\n\n      this._activeSources.get(midi).push(source); // remove it when it's done\n\n\n      source.onended = () => {\n        if (this._activeSources && this._activeSources.has(midi)) {\n          const sources = this._activeSources.get(midi);\n\n          const index = sources.indexOf(source);\n\n          if (index !== -1) {\n            sources.splice(index, 1);\n          }\n        }\n      };\n    });\n    return this;\n  }\n  /**\n   * @param  notes\tThe note to release, or an array of notes.\n   * @param  time     \tWhen to release the note.\n   */\n\n\n  triggerRelease(notes, time) {\n    this.log(\"triggerRelease\", notes, time);\n\n    if (!Array.isArray(notes)) {\n      notes = [notes];\n    }\n\n    notes.forEach(note => {\n      const midi = new FrequencyClass(this.context, note).toMidi(); // find the note\n\n      if (this._activeSources.has(midi) && this._activeSources.get(midi).length) {\n        const sources = this._activeSources.get(midi);\n\n        time = this.toSeconds(time);\n        sources.forEach(source => {\n          source.stop(time);\n        });\n\n        this._activeSources.set(midi, []);\n      }\n    });\n    return this;\n  }\n  /**\n   * Release all currently active notes.\n   * @param  time     \tWhen to release the notes.\n   */\n\n\n  releaseAll(time) {\n    const computedTime = this.toSeconds(time);\n\n    this._activeSources.forEach(sources => {\n      while (sources.length) {\n        const source = sources.shift();\n        source.stop(computedTime);\n      }\n    });\n\n    return this;\n  }\n\n  sync() {\n    this._syncMethod(\"triggerAttack\", 1);\n\n    this._syncMethod(\"triggerRelease\", 1);\n\n    return this;\n  }\n  /**\n   * Invoke the attack phase, then after the duration, invoke the release.\n   * @param  notes\tThe note to play and release, or an array of notes.\n   * @param  duration The time the note should be held\n   * @param  time     When to start the attack\n   * @param  velocity The velocity of the attack\n   */\n\n\n  triggerAttackRelease(notes, duration, time, velocity = 1) {\n    const computedTime = this.toSeconds(time);\n    this.triggerAttack(notes, computedTime, velocity);\n\n    if (isArray(duration)) {\n      assert(isArray(notes), \"notes must be an array when duration is array\");\n      notes.forEach((note, index) => {\n        const d = duration[Math.min(index, duration.length - 1)];\n        this.triggerRelease(note, computedTime + this.toSeconds(d));\n      });\n    } else {\n      this.triggerRelease(notes, computedTime + this.toSeconds(duration));\n    }\n\n    return this;\n  }\n  /**\n   * Add a note to the sampler.\n   * @param  note      The buffer's pitch.\n   * @param  url  Either the url of the buffer, or a buffer which will be added with the given name.\n   * @param  callback  The callback to invoke when the url is loaded.\n   */\n\n\n  add(note, url, callback) {\n    assert(isNote(note) || isFinite(note), `note must be a pitch or midi: ${note}`);\n\n    if (isNote(note)) {\n      // convert the note name to MIDI\n      const mid = new FrequencyClass(this.context, note).toMidi();\n\n      this._buffers.add(mid, url, callback);\n    } else {\n      // otherwise if it's numbers assume it's midi\n      this._buffers.add(note, url, callback);\n    }\n\n    return this;\n  }\n  /**\n   * If the buffers are loaded or not\n   */\n\n\n  get loaded() {\n    return this._buffers.loaded;\n  }\n  /**\n   * Clean up\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._buffers.dispose();\n\n    this._activeSources.forEach(sources => {\n      sources.forEach(source => source.dispose());\n    });\n\n    this._activeSources.clear();\n\n    return this;\n  }\n\n}\n\n__decorate([timeRange(0)], Sampler.prototype, \"attack\", void 0);\n\n__decorate([timeRange(0)], Sampler.prototype, \"release\", void 0);","import \"../core/clock/Transport\";\nimport { ToneWithContext } from \"../core/context/ToneWithContext\";\nimport { TicksClass } from \"../core/type/Ticks\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { StateTimeline } from \"../core/util/StateTimeline\";\nimport { isBoolean, isNumber } from \"../core/util/TypeCheck\";\n/**\n * ToneEvent abstracts away this.context.transport.schedule and provides a schedulable\n * callback for a single or repeatable events along the timeline.\n *\n * @example\n * const synth = new Tone.PolySynth().toDestination();\n * const chordEvent = new Tone.ToneEvent(((time, chord) => {\n * \t// the chord as well as the exact time of the event\n * \t// are passed in as arguments to the callback function\n * \tsynth.triggerAttackRelease(chord, 0.5, time);\n * }), [\"D4\", \"E4\", \"F4\"]);\n * // start the chord at the beginning of the transport timeline\n * chordEvent.start();\n * // loop it every measure for 8 measures\n * chordEvent.loop = 8;\n * chordEvent.loopEnd = \"1m\";\n * @category Event\n */\n\nexport class ToneEvent extends ToneWithContext {\n  constructor() {\n    super(optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]));\n    this.name = \"ToneEvent\";\n    /**\n     * Tracks the scheduled events\n     */\n\n    this._state = new StateTimeline(\"stopped\");\n    /**\n     * A delay time from when the event is scheduled to start\n     */\n\n    this._startOffset = 0;\n    const options = optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]);\n    this._loop = options.loop;\n    this.callback = options.callback;\n    this.value = options.value;\n    this._loopStart = this.toTicks(options.loopStart);\n    this._loopEnd = this.toTicks(options.loopEnd);\n    this._playbackRate = options.playbackRate;\n    this._probability = options.probability;\n    this._humanize = options.humanize;\n    this.mute = options.mute;\n    this._playbackRate = options.playbackRate;\n    this._state.increasing = true; // schedule the events for the first time\n\n    this._rescheduleEvents();\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneWithContext.getDefaults(), {\n      callback: noOp,\n      humanize: false,\n      loop: false,\n      loopEnd: \"1m\",\n      loopStart: 0,\n      mute: false,\n      playbackRate: 1,\n      probability: 1,\n      value: null\n    });\n  }\n  /**\n   * Reschedule all of the events along the timeline\n   * with the updated values.\n   * @param after Only reschedules events after the given time.\n   */\n\n\n  _rescheduleEvents(after = -1) {\n    // if no argument is given, schedules all of the events\n    this._state.forEachFrom(after, event => {\n      let duration;\n\n      if (event.state === \"started\") {\n        if (event.id !== -1) {\n          this.context.transport.clear(event.id);\n        }\n\n        const startTick = event.time + Math.round(this.startOffset / this._playbackRate);\n\n        if (this._loop === true || isNumber(this._loop) && this._loop > 1) {\n          duration = Infinity;\n\n          if (isNumber(this._loop)) {\n            duration = this._loop * this._getLoopDuration();\n          }\n\n          const nextEvent = this._state.getAfter(startTick);\n\n          if (nextEvent !== null) {\n            duration = Math.min(duration, nextEvent.time - startTick);\n          }\n\n          if (duration !== Infinity) {\n            // schedule a stop since it's finite duration\n            this._state.setStateAtTime(\"stopped\", startTick + duration + 1, {\n              id: -1\n            });\n\n            duration = new TicksClass(this.context, duration);\n          }\n\n          const interval = new TicksClass(this.context, this._getLoopDuration());\n          event.id = this.context.transport.scheduleRepeat(this._tick.bind(this), interval, new TicksClass(this.context, startTick), duration);\n        } else {\n          event.id = this.context.transport.schedule(this._tick.bind(this), new TicksClass(this.context, startTick));\n        }\n      }\n    });\n  }\n  /**\n   * Returns the playback state of the note, either \"started\" or \"stopped\".\n   */\n\n\n  get state() {\n    return this._state.getValueAtTime(this.context.transport.ticks);\n  }\n  /**\n   * The start from the scheduled start time.\n   */\n\n\n  get startOffset() {\n    return this._startOffset;\n  }\n\n  set startOffset(offset) {\n    this._startOffset = offset;\n  }\n  /**\n   * The probability of the notes being triggered.\n   */\n\n\n  get probability() {\n    return this._probability;\n  }\n\n  set probability(prob) {\n    this._probability = prob;\n  }\n  /**\n   * If set to true, will apply small random variation\n   * to the callback time. If the value is given as a time, it will randomize\n   * by that amount.\n   * @example\n   * const event = new Tone.ToneEvent();\n   * event.humanize = true;\n   */\n\n\n  get humanize() {\n    return this._humanize;\n  }\n\n  set humanize(variation) {\n    this._humanize = variation;\n  }\n  /**\n   * Start the note at the given time.\n   * @param  time  When the event should start.\n   */\n\n\n  start(time) {\n    const ticks = this.toTicks(time);\n\n    if (this._state.getValueAtTime(ticks) === \"stopped\") {\n      this._state.add({\n        id: -1,\n        state: \"started\",\n        time: ticks\n      });\n\n      this._rescheduleEvents(ticks);\n    }\n\n    return this;\n  }\n  /**\n   * Stop the Event at the given time.\n   * @param  time  When the event should stop.\n   */\n\n\n  stop(time) {\n    this.cancel(time);\n    const ticks = this.toTicks(time);\n\n    if (this._state.getValueAtTime(ticks) === \"started\") {\n      this._state.setStateAtTime(\"stopped\", ticks, {\n        id: -1\n      });\n\n      const previousEvent = this._state.getBefore(ticks);\n\n      let reschedulTime = ticks;\n\n      if (previousEvent !== null) {\n        reschedulTime = previousEvent.time;\n      }\n\n      this._rescheduleEvents(reschedulTime);\n    }\n\n    return this;\n  }\n  /**\n   * Cancel all scheduled events greater than or equal to the given time\n   * @param  time  The time after which events will be cancel.\n   */\n\n\n  cancel(time) {\n    time = defaultArg(time, -Infinity);\n    const ticks = this.toTicks(time);\n\n    this._state.forEachFrom(ticks, event => {\n      this.context.transport.clear(event.id);\n    });\n\n    this._state.cancel(ticks);\n\n    return this;\n  }\n  /**\n   * The callback function invoker. Also\n   * checks if the Event is done playing\n   * @param  time  The time of the event in seconds\n   */\n\n\n  _tick(time) {\n    const ticks = this.context.transport.getTicksAtTime(time);\n\n    if (!this.mute && this._state.getValueAtTime(ticks) === \"started\") {\n      if (this.probability < 1 && Math.random() > this.probability) {\n        return;\n      }\n\n      if (this.humanize) {\n        let variation = 0.02;\n\n        if (!isBoolean(this.humanize)) {\n          variation = this.toSeconds(this.humanize);\n        }\n\n        time += (Math.random() * 2 - 1) * variation;\n      }\n\n      this.callback(time, this.value);\n    }\n  }\n  /**\n   * Get the duration of the loop.\n   */\n\n\n  _getLoopDuration() {\n    return Math.round((this._loopEnd - this._loopStart) / this._playbackRate);\n  }\n  /**\n   * If the note should loop or not\n   * between ToneEvent.loopStart and\n   * ToneEvent.loopEnd. If set to true,\n   * the event will loop indefinitely,\n   * if set to a number greater than 1\n   * it will play a specific number of\n   * times, if set to false, 0 or 1, the\n   * part will only play once.\n   */\n\n\n  get loop() {\n    return this._loop;\n  }\n\n  set loop(loop) {\n    this._loop = loop;\n\n    this._rescheduleEvents();\n  }\n  /**\n   * The playback rate of the note. Defaults to 1.\n   * @example\n   * const note = new Tone.ToneEvent();\n   * note.loop = true;\n   * // repeat the note twice as fast\n   * note.playbackRate = 2;\n   */\n\n\n  get playbackRate() {\n    return this._playbackRate;\n  }\n\n  set playbackRate(rate) {\n    this._playbackRate = rate;\n\n    this._rescheduleEvents();\n  }\n  /**\n   * The loopEnd point is the time the event will loop\n   * if ToneEvent.loop is true.\n   */\n\n\n  get loopEnd() {\n    return new TicksClass(this.context, this._loopEnd).toSeconds();\n  }\n\n  set loopEnd(loopEnd) {\n    this._loopEnd = this.toTicks(loopEnd);\n\n    if (this._loop) {\n      this._rescheduleEvents();\n    }\n  }\n  /**\n   * The time when the loop should start.\n   */\n\n\n  get loopStart() {\n    return new TicksClass(this.context, this._loopStart).toSeconds();\n  }\n\n  set loopStart(loopStart) {\n    this._loopStart = this.toTicks(loopStart);\n\n    if (this._loop) {\n      this._rescheduleEvents();\n    }\n  }\n  /**\n   * The current progress of the loop interval.\n   * Returns 0 if the event is not started yet or\n   * it is not set to loop.\n   */\n\n\n  get progress() {\n    if (this._loop) {\n      const ticks = this.context.transport.ticks;\n\n      const lastEvent = this._state.get(ticks);\n\n      if (lastEvent !== null && lastEvent.state === \"started\") {\n        const loopDuration = this._getLoopDuration();\n\n        const progress = (ticks - lastEvent.time) % loopDuration;\n        return progress / loopDuration;\n      } else {\n        return 0;\n      }\n    } else {\n      return 0;\n    }\n  }\n\n  dispose() {\n    super.dispose();\n    this.cancel();\n\n    this._state.dispose();\n\n    return this;\n  }\n\n}","import { ToneEvent } from \"./ToneEvent\";\nimport { ToneWithContext } from \"../core/context/ToneWithContext\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\n/**\n * Loop creates a looped callback at the\n * specified interval. The callback can be\n * started, stopped and scheduled along\n * the Transport's timeline.\n * @example\n * const loop = new Tone.Loop((time) => {\n * \t// triggered every eighth note.\n * \tconsole.log(time);\n * }, \"8n\").start(0);\n * Tone.Transport.start();\n * @category Event\n */\n\nexport class Loop extends ToneWithContext {\n  constructor() {\n    super(optionsFromArguments(Loop.getDefaults(), arguments, [\"callback\", \"interval\"]));\n    this.name = \"Loop\";\n    const options = optionsFromArguments(Loop.getDefaults(), arguments, [\"callback\", \"interval\"]);\n    this._event = new ToneEvent({\n      context: this.context,\n      callback: this._tick.bind(this),\n      loop: true,\n      loopEnd: options.interval,\n      playbackRate: options.playbackRate,\n      probability: options.probability\n    });\n    this.callback = options.callback; // set the iterations\n\n    this.iterations = options.iterations;\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneWithContext.getDefaults(), {\n      interval: \"4n\",\n      callback: noOp,\n      playbackRate: 1,\n      iterations: Infinity,\n      probability: 1,\n      mute: false,\n      humanize: false\n    });\n  }\n  /**\n   * Start the loop at the specified time along the Transport's timeline.\n   * @param  time  When to start the Loop.\n   */\n\n\n  start(time) {\n    this._event.start(time);\n\n    return this;\n  }\n  /**\n   * Stop the loop at the given time.\n   * @param  time  When to stop the Loop.\n   */\n\n\n  stop(time) {\n    this._event.stop(time);\n\n    return this;\n  }\n  /**\n   * Cancel all scheduled events greater than or equal to the given time\n   * @param  time  The time after which events will be cancel.\n   */\n\n\n  cancel(time) {\n    this._event.cancel(time);\n\n    return this;\n  }\n  /**\n   * Internal function called when the notes should be called\n   * @param time  The time the event occurs\n   */\n\n\n  _tick(time) {\n    this.callback(time);\n  }\n  /**\n   * The state of the Loop, either started or stopped.\n   */\n\n\n  get state() {\n    return this._event.state;\n  }\n  /**\n   * The progress of the loop as a value between 0-1. 0, when the loop is stopped or done iterating.\n   */\n\n\n  get progress() {\n    return this._event.progress;\n  }\n  /**\n   * The time between successive callbacks.\n   * @example\n   * const loop = new Tone.Loop();\n   * loop.interval = \"8n\"; // loop every 8n\n   */\n\n\n  get interval() {\n    return this._event.loopEnd;\n  }\n\n  set interval(interval) {\n    this._event.loopEnd = interval;\n  }\n  /**\n   * The playback rate of the loop. The normal playback rate is 1 (no change).\n   * A `playbackRate` of 2 would be twice as fast.\n   */\n\n\n  get playbackRate() {\n    return this._event.playbackRate;\n  }\n\n  set playbackRate(rate) {\n    this._event.playbackRate = rate;\n  }\n  /**\n   * Random variation +/-0.01s to the scheduled time.\n   * Or give it a time value which it will randomize by.\n   */\n\n\n  get humanize() {\n    return this._event.humanize;\n  }\n\n  set humanize(variation) {\n    this._event.humanize = variation;\n  }\n  /**\n   * The probably of the callback being invoked.\n   */\n\n\n  get probability() {\n    return this._event.probability;\n  }\n\n  set probability(prob) {\n    this._event.probability = prob;\n  }\n  /**\n   * Muting the Loop means that no callbacks are invoked.\n   */\n\n\n  get mute() {\n    return this._event.mute;\n  }\n\n  set mute(mute) {\n    this._event.mute = mute;\n  }\n  /**\n   * The number of iterations of the loop. The default value is `Infinity` (loop forever).\n   */\n\n\n  get iterations() {\n    if (this._event.loop === true) {\n      return Infinity;\n    } else {\n      return this._event.loop;\n    }\n  }\n\n  set iterations(iters) {\n    if (iters === Infinity) {\n      this._event.loop = true;\n    } else {\n      this._event.loop = iters;\n    }\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._event.dispose();\n\n    return this;\n  }\n\n}","import { TicksClass } from \"../core/type/Ticks\";\nimport { TransportTimeClass } from \"../core/type/TransportTime\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { StateTimeline } from \"../core/util/StateTimeline\";\nimport { isArray, isDefined, isObject, isUndef } from \"../core/util/TypeCheck\";\nimport { ToneEvent } from \"./ToneEvent\";\n/**\n * Part is a collection ToneEvents which can be started/stopped and looped as a single unit.\n *\n * @example\n * const synth = new Tone.Synth().toDestination();\n * const part = new Tone.Part(((time, note) => {\n * \t// the notes given as the second element in the array\n * \t// will be passed in as the second argument\n * \tsynth.triggerAttackRelease(note, \"8n\", time);\n * }), [[0, \"C2\"], [\"0:2\", \"C3\"], [\"0:3:2\", \"G2\"]]);\n * @example\n * const synth = new Tone.Synth().toDestination();\n * // use an array of objects as long as the object has a \"time\" attribute\n * const part = new Tone.Part(((time, value) => {\n * \t// the value is an object which contains both the note and the velocity\n * \tsynth.triggerAttackRelease(value.note, \"8n\", time, value.velocity);\n * }), [{ time: 0, note: \"C3\", velocity: 0.9 },\n * \t{ time: \"0:2\", note: \"C4\", velocity: 0.5 }\n * ]).start(0);\n * @category Event\n */\n\nexport class Part extends ToneEvent {\n  constructor() {\n    super(optionsFromArguments(Part.getDefaults(), arguments, [\"callback\", \"events\"]));\n    this.name = \"Part\";\n    /**\n     * Tracks the scheduled events\n     */\n\n    this._state = new StateTimeline(\"stopped\");\n    /**\n     * The events that belong to this part\n     */\n\n    this._events = new Set();\n    const options = optionsFromArguments(Part.getDefaults(), arguments, [\"callback\", \"events\"]); // make sure things are assigned in the right order\n\n    this._state.increasing = true; // add the events\n\n    options.events.forEach(event => {\n      if (isArray(event)) {\n        this.add(event[0], event[1]);\n      } else {\n        this.add(event);\n      }\n    });\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneEvent.getDefaults(), {\n      events: []\n    });\n  }\n  /**\n   * Start the part at the given time.\n   * @param  time    When to start the part.\n   * @param  offset  The offset from the start of the part to begin playing at.\n   */\n\n\n  start(time, offset) {\n    const ticks = this.toTicks(time);\n\n    if (this._state.getValueAtTime(ticks) !== \"started\") {\n      offset = defaultArg(offset, this._loop ? this._loopStart : 0);\n\n      if (this._loop) {\n        offset = defaultArg(offset, this._loopStart);\n      } else {\n        offset = defaultArg(offset, 0);\n      }\n\n      const computedOffset = this.toTicks(offset);\n\n      this._state.add({\n        id: -1,\n        offset: computedOffset,\n        state: \"started\",\n        time: ticks\n      });\n\n      this._forEach(event => {\n        this._startNote(event, ticks, computedOffset);\n      });\n    }\n\n    return this;\n  }\n  /**\n   * Start the event in the given event at the correct time given\n   * the ticks and offset and looping.\n   * @param  event\n   * @param  ticks\n   * @param  offset\n   */\n\n\n  _startNote(event, ticks, offset) {\n    ticks -= offset;\n\n    if (this._loop) {\n      if (event.startOffset >= this._loopStart && event.startOffset < this._loopEnd) {\n        if (event.startOffset < offset) {\n          // start it on the next loop\n          ticks += this._getLoopDuration();\n        }\n\n        event.start(new TicksClass(this.context, ticks));\n      } else if (event.startOffset < this._loopStart && event.startOffset >= offset) {\n        event.loop = false;\n        event.start(new TicksClass(this.context, ticks));\n      }\n    } else if (event.startOffset >= offset) {\n      event.start(new TicksClass(this.context, ticks));\n    }\n  }\n\n  get startOffset() {\n    return this._startOffset;\n  }\n\n  set startOffset(offset) {\n    this._startOffset = offset;\n\n    this._forEach(event => {\n      event.startOffset += this._startOffset;\n    });\n  }\n  /**\n   * Stop the part at the given time.\n   * @param  time  When to stop the part.\n   */\n\n\n  stop(time) {\n    const ticks = this.toTicks(time);\n\n    this._state.cancel(ticks);\n\n    this._state.setStateAtTime(\"stopped\", ticks);\n\n    this._forEach(event => {\n      event.stop(time);\n    });\n\n    return this;\n  }\n  /**\n   * Get/Set an Event's value at the given time.\n   * If a value is passed in and no event exists at\n   * the given time, one will be created with that value.\n   * If two events are at the same time, the first one will\n   * be returned.\n   * @example\n   * const part = new Tone.Part();\n   * part.at(\"1m\"); // returns the part at the first measure\n   * part.at(\"2m\", \"C2\"); // set the value at \"2m\" to C2.\n   * // if an event didn't exist at that time, it will be created.\n   * @param time The time of the event to get or set.\n   * @param value If a value is passed in, the value of the event at the given time will be set to it.\n   */\n\n\n  at(time, value) {\n    const timeInTicks = new TransportTimeClass(this.context, time).toTicks();\n    const tickTime = new TicksClass(this.context, 1).toSeconds();\n\n    const iterator = this._events.values();\n\n    let result = iterator.next();\n\n    while (!result.done) {\n      const event = result.value;\n\n      if (Math.abs(timeInTicks - event.startOffset) < tickTime) {\n        if (isDefined(value)) {\n          event.value = value;\n        }\n\n        return event;\n      }\n\n      result = iterator.next();\n    } // if there was no event at that time, create one\n\n\n    if (isDefined(value)) {\n      this.add(time, value); // return the new event\n\n      return this.at(time);\n    } else {\n      return null;\n    }\n  }\n\n  add(time, value) {\n    // extract the parameters\n    if (time instanceof Object && Reflect.has(time, \"time\")) {\n      value = time;\n      time = value.time;\n    }\n\n    const ticks = this.toTicks(time);\n    let event;\n\n    if (value instanceof ToneEvent) {\n      event = value;\n      event.callback = this._tick.bind(this);\n    } else {\n      event = new ToneEvent({\n        callback: this._tick.bind(this),\n        context: this.context,\n        value\n      });\n    } // the start offset\n\n\n    event.startOffset = ticks; // initialize the values\n\n    event.set({\n      humanize: this.humanize,\n      loop: this.loop,\n      loopEnd: this.loopEnd,\n      loopStart: this.loopStart,\n      playbackRate: this.playbackRate,\n      probability: this.probability\n    });\n\n    this._events.add(event); // start the note if it should be played right now\n\n\n    this._restartEvent(event);\n\n    return this;\n  }\n  /**\n   * Restart the given event\n   */\n\n\n  _restartEvent(event) {\n    this._state.forEach(stateEvent => {\n      if (stateEvent.state === \"started\") {\n        this._startNote(event, stateEvent.time, stateEvent.offset);\n      } else {\n        // stop the note\n        event.stop(new TicksClass(this.context, stateEvent.time));\n      }\n    });\n  }\n\n  remove(time, value) {\n    // extract the parameters\n    if (isObject(time) && time.hasOwnProperty(\"time\")) {\n      value = time;\n      time = value.time;\n    }\n\n    time = this.toTicks(time);\n\n    this._events.forEach(event => {\n      if (event.startOffset === time) {\n        if (isUndef(value) || isDefined(value) && event.value === value) {\n          this._events.delete(event);\n\n          event.dispose();\n        }\n      }\n    });\n\n    return this;\n  }\n  /**\n   * Remove all of the notes from the group.\n   */\n\n\n  clear() {\n    this._forEach(event => event.dispose());\n\n    this._events.clear();\n\n    return this;\n  }\n  /**\n   * Cancel scheduled state change events: i.e. \"start\" and \"stop\".\n   * @param after The time after which to cancel the scheduled events.\n   */\n\n\n  cancel(after) {\n    this._forEach(event => event.cancel(after));\n\n    this._state.cancel(this.toTicks(after));\n\n    return this;\n  }\n  /**\n   * Iterate over all of the events\n   */\n\n\n  _forEach(callback) {\n    if (this._events) {\n      this._events.forEach(event => {\n        if (event instanceof Part) {\n          event._forEach(callback);\n        } else {\n          callback(event);\n        }\n      });\n    }\n\n    return this;\n  }\n  /**\n   * Set the attribute of all of the events\n   * @param  attr  the attribute to set\n   * @param  value      The value to set it to\n   */\n\n\n  _setAll(attr, value) {\n    this._forEach(event => {\n      event[attr] = value;\n    });\n  }\n  /**\n   * Internal tick method\n   * @param  time  The time of the event in seconds\n   */\n\n\n  _tick(time, value) {\n    if (!this.mute) {\n      this.callback(time, value);\n    }\n  }\n  /**\n   * Determine if the event should be currently looping\n   * given the loop boundries of this Part.\n   * @param  event  The event to test\n   */\n\n\n  _testLoopBoundries(event) {\n    if (this._loop && (event.startOffset < this._loopStart || event.startOffset >= this._loopEnd)) {\n      event.cancel(0);\n    } else if (event.state === \"stopped\") {\n      // reschedule it if it's stopped\n      this._restartEvent(event);\n    }\n  }\n\n  get probability() {\n    return this._probability;\n  }\n\n  set probability(prob) {\n    this._probability = prob;\n\n    this._setAll(\"probability\", prob);\n  }\n\n  get humanize() {\n    return this._humanize;\n  }\n\n  set humanize(variation) {\n    this._humanize = variation;\n\n    this._setAll(\"humanize\", variation);\n  }\n  /**\n   * If the part should loop or not\n   * between Part.loopStart and\n   * Part.loopEnd. If set to true,\n   * the part will loop indefinitely,\n   * if set to a number greater than 1\n   * it will play a specific number of\n   * times, if set to false, 0 or 1, the\n   * part will only play once.\n   * @example\n   * const part = new Tone.Part();\n   * // loop the part 8 times\n   * part.loop = 8;\n   */\n\n\n  get loop() {\n    return this._loop;\n  }\n\n  set loop(loop) {\n    this._loop = loop;\n\n    this._forEach(event => {\n      event.loopStart = this.loopStart;\n      event.loopEnd = this.loopEnd;\n      event.loop = loop;\n\n      this._testLoopBoundries(event);\n    });\n  }\n  /**\n   * The loopEnd point determines when it will\n   * loop if Part.loop is true.\n   */\n\n\n  get loopEnd() {\n    return new TicksClass(this.context, this._loopEnd).toSeconds();\n  }\n\n  set loopEnd(loopEnd) {\n    this._loopEnd = this.toTicks(loopEnd);\n\n    if (this._loop) {\n      this._forEach(event => {\n        event.loopEnd = loopEnd;\n\n        this._testLoopBoundries(event);\n      });\n    }\n  }\n  /**\n   * The loopStart point determines when it will\n   * loop if Part.loop is true.\n   */\n\n\n  get loopStart() {\n    return new TicksClass(this.context, this._loopStart).toSeconds();\n  }\n\n  set loopStart(loopStart) {\n    this._loopStart = this.toTicks(loopStart);\n\n    if (this._loop) {\n      this._forEach(event => {\n        event.loopStart = this.loopStart;\n\n        this._testLoopBoundries(event);\n      });\n    }\n  }\n  /**\n   * The playback rate of the part\n   */\n\n\n  get playbackRate() {\n    return this._playbackRate;\n  }\n\n  set playbackRate(rate) {\n    this._playbackRate = rate;\n\n    this._setAll(\"playbackRate\", rate);\n  }\n  /**\n   * The number of scheduled notes in the part.\n   */\n\n\n  get length() {\n    return this._events.size;\n  }\n\n  dispose() {\n    super.dispose();\n    this.clear();\n    return this;\n  }\n\n}","import { assert } from \"../core/util/Debug\";\nimport { clamp } from \"../core/util/Math\";\n/**\n * Start at the first value and go up to the last\n */\n\nfunction* upPatternGen(values) {\n  let index = 0;\n\n  while (index < values.length) {\n    index = clampToArraySize(index, values);\n    yield values[index];\n    index++;\n  }\n}\n/**\n * Start at the last value and go down to 0\n */\n\n\nfunction* downPatternGen(values) {\n  let index = values.length - 1;\n\n  while (index >= 0) {\n    index = clampToArraySize(index, values);\n    yield values[index];\n    index--;\n  }\n}\n/**\n * Infinitely yield the generator\n */\n\n\nfunction* infiniteGen(values, gen) {\n  while (true) {\n    yield* gen(values);\n  }\n}\n/**\n * Make sure that the index is in the given range\n */\n\n\nfunction clampToArraySize(index, values) {\n  return clamp(index, 0, values.length - 1);\n}\n/**\n * Alternate between two generators\n */\n\n\nfunction* alternatingGenerator(values, directionUp) {\n  let index = directionUp ? 0 : values.length - 1;\n\n  while (true) {\n    index = clampToArraySize(index, values);\n    yield values[index];\n\n    if (directionUp) {\n      index++;\n\n      if (index >= values.length - 1) {\n        directionUp = false;\n      }\n    } else {\n      index--;\n\n      if (index <= 0) {\n        directionUp = true;\n      }\n    }\n  }\n}\n/**\n * Starting from the bottom move up 2, down 1\n */\n\n\nfunction* jumpUp(values) {\n  let index = 0;\n  let stepIndex = 0;\n\n  while (index < values.length) {\n    index = clampToArraySize(index, values);\n    yield values[index];\n    stepIndex++;\n    index += stepIndex % 2 ? 2 : -1;\n  }\n}\n/**\n * Starting from the top move down 2, up 1\n */\n\n\nfunction* jumpDown(values) {\n  let index = values.length - 1;\n  let stepIndex = 0;\n\n  while (index >= 0) {\n    index = clampToArraySize(index, values);\n    yield values[index];\n    stepIndex++;\n    index += stepIndex % 2 ? -2 : 1;\n  }\n}\n/**\n * Choose a random index each time\n */\n\n\nfunction* randomGen(values) {\n  while (true) {\n    const randomIndex = Math.floor(Math.random() * values.length);\n    yield values[randomIndex];\n  }\n}\n/**\n * Randomly go through all of the values once before choosing a new random order\n */\n\n\nfunction* randomOnce(values) {\n  // create an array of indices\n  const copy = [];\n\n  for (let i = 0; i < values.length; i++) {\n    copy.push(i);\n  }\n\n  while (copy.length > 0) {\n    // random choose an index, and then remove it so it's not chosen again\n    const randVal = copy.splice(Math.floor(copy.length * Math.random()), 1);\n    const index = clampToArraySize(randVal[0], values);\n    yield values[index];\n  }\n}\n/**\n * Randomly choose to walk up or down 1 index in the values array\n */\n\n\nfunction* randomWalk(values) {\n  // randomly choose a starting index in the values array\n  let index = Math.floor(Math.random() * values.length);\n\n  while (true) {\n    if (index === 0) {\n      index++; // at bottom of array, so force upward step\n    } else if (index === values.length - 1) {\n      index--; // at top of array, so force downward step\n    } else if (Math.random() < 0.5) {\n      // else choose random downward or upward step\n      index--;\n    } else {\n      index++;\n    }\n\n    yield values[index];\n  }\n}\n/**\n * PatternGenerator returns a generator which will iterate over the given array\n * of values and yield the items according to the passed in pattern\n * @param values An array of values to iterate over\n * @param pattern The name of the pattern use when iterating over\n * @param index Where to start in the offset of the values array\n */\n\n\nexport function* PatternGenerator(values, pattern = \"up\", index = 0) {\n  // safeguards\n  assert(values.length > 0, \"The array must have more than one value in it\");\n\n  switch (pattern) {\n    case \"up\":\n      yield* infiniteGen(values, upPatternGen);\n\n    case \"down\":\n      yield* infiniteGen(values, downPatternGen);\n\n    case \"upDown\":\n      yield* alternatingGenerator(values, true);\n\n    case \"downUp\":\n      yield* alternatingGenerator(values, false);\n\n    case \"alternateUp\":\n      yield* infiniteGen(values, jumpUp);\n\n    case \"alternateDown\":\n      yield* infiniteGen(values, jumpDown);\n\n    case \"random\":\n      yield* randomGen(values);\n\n    case \"randomOnce\":\n      yield* infiniteGen(values, randomOnce);\n\n    case \"randomWalk\":\n      yield* randomWalk(values);\n  }\n}","import { Loop } from \"./Loop\";\nimport { PatternGenerator } from \"./PatternGenerator\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\n/**\n * Pattern arpeggiates between the given notes\n * in a number of patterns.\n * @example\n * const pattern = new Tone.Pattern((time, note) => {\n * \t// the order of the notes passed in depends on the pattern\n * }, [\"C2\", \"D4\", \"E5\", \"A6\"], \"upDown\");\n * @category Event\n */\n\nexport class Pattern extends Loop {\n  constructor() {\n    super(optionsFromArguments(Pattern.getDefaults(), arguments, [\"callback\", \"values\", \"pattern\"]));\n    this.name = \"Pattern\";\n    const options = optionsFromArguments(Pattern.getDefaults(), arguments, [\"callback\", \"values\", \"pattern\"]);\n    this.callback = options.callback;\n    this._values = options.values;\n    this._pattern = PatternGenerator(options.values, options.pattern);\n    this._type = options.pattern;\n  }\n\n  static getDefaults() {\n    return Object.assign(Loop.getDefaults(), {\n      pattern: \"up\",\n      values: [],\n      callback: noOp\n    });\n  }\n  /**\n   * Internal function called when the notes should be called\n   */\n\n\n  _tick(time) {\n    const value = this._pattern.next();\n\n    this._value = value.value;\n    this.callback(time, this._value);\n  }\n  /**\n   * The array of events.\n   */\n\n\n  get values() {\n    return this._values;\n  }\n\n  set values(val) {\n    this._values = val; // reset the pattern\n\n    this.pattern = this._type;\n  }\n  /**\n   * The current value of the pattern.\n   */\n\n\n  get value() {\n    return this._value;\n  }\n  /**\n   * The pattern type. See Tone.CtrlPattern for the full list of patterns.\n   */\n\n\n  get pattern() {\n    return this._type;\n  }\n\n  set pattern(pattern) {\n    this._type = pattern;\n    this._pattern = PatternGenerator(this._values, this._type);\n  }\n\n}","import { TicksClass } from \"../core/type/Ticks\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isString } from \"../core/util/TypeCheck\";\nimport { Part } from \"./Part\";\nimport { ToneEvent } from \"./ToneEvent\";\n/**\n * A sequence is an alternate notation of a part. Instead\n * of passing in an array of [time, event] pairs, pass\n * in an array of events which will be spaced at the\n * given subdivision. Sub-arrays will subdivide that beat\n * by the number of items are in the array.\n * Sequence notation inspiration from [Tidal](http://yaxu.org/tidal/)\n * @example\n * const synth = new Tone.Synth().toDestination();\n * const seq = new Tone.Sequence((time, note) => {\n * \tsynth.triggerAttackRelease(note, 0.1, time);\n * \t// subdivisions are given as subarrays\n * }, [\"C4\", [\"E4\", \"D4\", \"E4\"], \"G4\", [\"A4\", \"G4\"]]).start(0);\n * Tone.Transport.start();\n * @category Event\n */\n\nexport class Sequence extends ToneEvent {\n  constructor() {\n    super(optionsFromArguments(Sequence.getDefaults(), arguments, [\"callback\", \"events\", \"subdivision\"]));\n    this.name = \"Sequence\";\n    /**\n     * The object responsible for scheduling all of the events\n     */\n\n    this._part = new Part({\n      callback: this._seqCallback.bind(this),\n      context: this.context\n    });\n    /**\n     * private reference to all of the sequence proxies\n     */\n\n    this._events = [];\n    /**\n     * The proxied array\n     */\n\n    this._eventsArray = [];\n    const options = optionsFromArguments(Sequence.getDefaults(), arguments, [\"callback\", \"events\", \"subdivision\"]);\n    this._subdivision = this.toTicks(options.subdivision);\n    this.events = options.events; // set all of the values\n\n    this.loop = options.loop;\n    this.loopStart = options.loopStart;\n    this.loopEnd = options.loopEnd;\n    this.playbackRate = options.playbackRate;\n    this.probability = options.probability;\n    this.humanize = options.humanize;\n    this.mute = options.mute;\n    this.playbackRate = options.playbackRate;\n  }\n\n  static getDefaults() {\n    return Object.assign(omitFromObject(ToneEvent.getDefaults(), [\"value\"]), {\n      events: [],\n      loop: true,\n      loopEnd: 0,\n      loopStart: 0,\n      subdivision: \"8n\"\n    });\n  }\n  /**\n   * The internal callback for when an event is invoked\n   */\n\n\n  _seqCallback(time, value) {\n    if (value !== null) {\n      this.callback(time, value);\n    }\n  }\n  /**\n   * The sequence\n   */\n\n\n  get events() {\n    return this._events;\n  }\n\n  set events(s) {\n    this.clear();\n    this._eventsArray = s;\n    this._events = this._createSequence(this._eventsArray);\n\n    this._eventsUpdated();\n  }\n  /**\n   * Start the part at the given time.\n   * @param  time    When to start the part.\n   * @param  offset  The offset index to start at\n   */\n\n\n  start(time, offset) {\n    this._part.start(time, offset ? this._indexTime(offset) : offset);\n\n    return this;\n  }\n  /**\n   * Stop the part at the given time.\n   * @param  time  When to stop the part.\n   */\n\n\n  stop(time) {\n    this._part.stop(time);\n\n    return this;\n  }\n  /**\n   * The subdivision of the sequence. This can only be\n   * set in the constructor. The subdivision is the\n   * interval between successive steps.\n   */\n\n\n  get subdivision() {\n    return new TicksClass(this.context, this._subdivision).toSeconds();\n  }\n  /**\n   * Create a sequence proxy which can be monitored to create subsequences\n   */\n\n\n  _createSequence(array) {\n    return new Proxy(array, {\n      get: (target, property) => {\n        // property is index in this case\n        return target[property];\n      },\n      set: (target, property, value) => {\n        if (isString(property) && isFinite(parseInt(property, 10))) {\n          if (isArray(value)) {\n            target[property] = this._createSequence(value);\n          } else {\n            target[property] = value;\n          }\n        } else {\n          target[property] = value;\n        }\n\n        this._eventsUpdated(); // return true to accept the changes\n\n\n        return true;\n      }\n    });\n  }\n  /**\n   * When the sequence has changed, all of the events need to be recreated\n   */\n\n\n  _eventsUpdated() {\n    this._part.clear();\n\n    this._rescheduleSequence(this._eventsArray, this._subdivision, this.startOffset); // update the loopEnd\n\n\n    this.loopEnd = this.loopEnd;\n  }\n  /**\n   * reschedule all of the events that need to be rescheduled\n   */\n\n\n  _rescheduleSequence(sequence, subdivision, startOffset) {\n    sequence.forEach((value, index) => {\n      const eventOffset = index * subdivision + startOffset;\n\n      if (isArray(value)) {\n        this._rescheduleSequence(value, subdivision / value.length, eventOffset);\n      } else {\n        const startTime = new TicksClass(this.context, eventOffset, \"i\").toSeconds();\n\n        this._part.add(startTime, value);\n      }\n    });\n  }\n  /**\n   * Get the time of the index given the Sequence's subdivision\n   * @param  index\n   * @return The time of that index\n   */\n\n\n  _indexTime(index) {\n    return new TicksClass(this.context, index * this._subdivision + this.startOffset).toSeconds();\n  }\n  /**\n   * Clear all of the events\n   */\n\n\n  clear() {\n    this._part.clear();\n\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._part.dispose();\n\n    return this;\n  } //-------------------------------------\n  // PROXY CALLS\n  //-------------------------------------\n\n\n  get loop() {\n    return this._part.loop;\n  }\n\n  set loop(l) {\n    this._part.loop = l;\n  }\n  /**\n   * The index at which the sequence should start looping\n   */\n\n\n  get loopStart() {\n    return this._loopStart;\n  }\n\n  set loopStart(index) {\n    this._loopStart = index;\n    this._part.loopStart = this._indexTime(index);\n  }\n  /**\n   * The index at which the sequence should end looping\n   */\n\n\n  get loopEnd() {\n    return this._loopEnd;\n  }\n\n  set loopEnd(index) {\n    this._loopEnd = index;\n\n    if (index === 0) {\n      this._part.loopEnd = this._indexTime(this._eventsArray.length);\n    } else {\n      this._part.loopEnd = this._indexTime(index);\n    }\n  }\n\n  get startOffset() {\n    return this._part.startOffset;\n  }\n\n  set startOffset(start) {\n    this._part.startOffset = start;\n  }\n\n  get playbackRate() {\n    return this._part.playbackRate;\n  }\n\n  set playbackRate(rate) {\n    this._part.playbackRate = rate;\n  }\n\n  get probability() {\n    return this._part.probability;\n  }\n\n  set probability(prob) {\n    this._part.probability = prob;\n  }\n\n  get progress() {\n    return this._part.progress;\n  }\n\n  get humanize() {\n    return this._part.humanize;\n  }\n\n  set humanize(variation) {\n    this._part.humanize = variation;\n  }\n  /**\n   * The number of scheduled events\n   */\n\n\n  get length() {\n    return this._part.length;\n  }\n\n}","import { Gain } from \"../../core/context/Gain\";\nimport { connect, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { GainToAudio } from \"../../signal/GainToAudio\";\nimport { Signal } from \"../../signal/Signal\";\n/**\n * Tone.Crossfade provides equal power fading between two inputs.\n * More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).\n * ```\n *                                             +---------+\n *                                            +> input a +>--+\n * +-----------+   +---------------------+     |         |   |\n * | 1s signal +>--> stereoPannerNode  L +>----> gain    |   |\n * +-----------+   |                     |     +---------+   |\n *               +-> pan               R +>-+                |   +--------+\n *               | +---------------------+  |                +---> output +>\n *  +------+     |                          |  +---------+   |   +--------+\n *  | fade +>----+                          | +> input b +>--+\n *  +------+                                |  |         |\n *                                          +--> gain    |\n *                                             +---------+\n * ```\n * @example\n * const crossFade = new Tone.CrossFade().toDestination();\n * // connect two inputs Tone.to a/b\n * const inputA = new Tone.Oscillator(440, \"square\").connect(crossFade.a).start();\n * const inputB = new Tone.Oscillator(440, \"sine\").connect(crossFade.b).start();\n * // use the fade to control the mix between the two\n * crossFade.fade.value = 0.5;\n * @category Component\n */\n\nexport class CrossFade extends ToneAudioNode {\n  constructor() {\n    super(Object.assign(optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"])));\n    this.name = \"CrossFade\";\n    /**\n     * The crossfading is done by a StereoPannerNode\n     */\n\n    this._panner = this.context.createStereoPanner();\n    /**\n     * Split the output of the panner node into two values used to control the gains.\n     */\n\n    this._split = this.context.createChannelSplitter(2);\n    /**\n     * Convert the fade value into an audio range value so it can be connected\n     * to the panner.pan AudioParam\n     */\n\n    this._g2a = new GainToAudio({\n      context: this.context\n    });\n    /**\n     * The input which is at full level when fade = 0\n     */\n\n    this.a = new Gain({\n      context: this.context,\n      gain: 0\n    });\n    /**\n     * The input which is at full level when fade = 1\n     */\n\n    this.b = new Gain({\n      context: this.context,\n      gain: 0\n    });\n    /**\n     * The output is a mix between `a` and `b` at the ratio of `fade`\n     */\n\n    this.output = new Gain({\n      context: this.context\n    });\n    this._internalChannels = [this.a, this.b];\n    const options = optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"]);\n    this.fade = new Signal({\n      context: this.context,\n      units: \"normalRange\",\n      value: options.fade\n    });\n    readOnly(this, \"fade\");\n    this.context.getConstant(1).connect(this._panner);\n\n    this._panner.connect(this._split); // this is necessary for standardized-audio-context\n    // doesn't make any difference for the native AudioContext\n    // https://github.com/chrisguttandin/standardized-audio-context/issues/647\n\n\n    this._panner.channelCount = 1;\n    this._panner.channelCountMode = \"explicit\";\n    connect(this._split, this.a.gain, 0);\n    connect(this._split, this.b.gain, 1);\n    this.fade.chain(this._g2a, this._panner.pan);\n    this.a.connect(this.output);\n    this.b.connect(this.output);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      fade: 0.5\n    });\n  }\n\n  dispose() {\n    super.dispose();\n    this.a.dispose();\n    this.b.dispose();\n    this.output.dispose();\n    this.fade.dispose();\n\n    this._g2a.dispose();\n\n    this._panner.disconnect();\n\n    this._split.disconnect();\n\n    return this;\n  }\n\n}","import { CrossFade } from \"../component/channel/CrossFade\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Effect is the base class for effects. Connect the effect between\n * the effectSend and effectReturn GainNodes, then control the amount of\n * effect which goes to the output using the wet control.\n */\n\nexport class Effect extends ToneAudioNode {\n  constructor(options) {\n    super(options);\n    this.name = \"Effect\";\n    /**\n     * the drywet knob to control the amount of effect\n     */\n\n    this._dryWet = new CrossFade({\n      context: this.context\n    });\n    /**\n     * The wet control is how much of the effected\n     * will pass through to the output. 1 = 100% effected\n     * signal, 0 = 100% dry signal.\n     */\n\n    this.wet = this._dryWet.fade;\n    /**\n     * connect the effectSend to the input of hte effect\n     */\n\n    this.effectSend = new Gain({\n      context: this.context\n    });\n    /**\n     * connect the output of the effect to the effectReturn\n     */\n\n    this.effectReturn = new Gain({\n      context: this.context\n    });\n    /**\n     * The effect input node\n     */\n\n    this.input = new Gain({\n      context: this.context\n    });\n    /**\n     * The effect output\n     */\n\n    this.output = this._dryWet; // connections\n\n    this.input.fan(this._dryWet.a, this.effectSend);\n    this.effectReturn.connect(this._dryWet.b);\n    this.wet.setValueAtTime(options.wet, 0);\n    this._internalChannels = [this.effectReturn, this.effectSend];\n    readOnly(this, \"wet\");\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      wet: 1\n    });\n  }\n  /**\n   * chains the effect in between the effectSend and effectReturn\n   */\n\n\n  connectEffect(effect) {\n    // add it to the internal channels\n    this._internalChannels.push(effect);\n\n    this.effectSend.chain(effect, this.effectReturn);\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._dryWet.dispose();\n\n    this.effectSend.dispose();\n    this.effectReturn.dispose();\n    this.wet.dispose();\n    return this;\n  }\n\n}","import { Effect } from \"../effect/Effect\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Base class for LFO-based effects.\n */\n\nexport class LFOEffect extends Effect {\n  constructor(options) {\n    super(options);\n    this.name = \"LFOEffect\";\n    this._lfo = new LFO({\n      context: this.context,\n      frequency: options.frequency,\n      amplitude: options.depth\n    });\n    this.depth = this._lfo.amplitude;\n    this.frequency = this._lfo.frequency;\n    this.type = options.type;\n    readOnly(this, [\"frequency\", \"depth\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(Effect.getDefaults(), {\n      frequency: 1,\n      type: \"sine\",\n      depth: 1\n    });\n  }\n  /**\n   * Start the effect.\n   */\n\n\n  start(time) {\n    this._lfo.start(time);\n\n    return this;\n  }\n  /**\n   * Stop the lfo\n   */\n\n\n  stop(time) {\n    this._lfo.stop(time);\n\n    return this;\n  }\n  /**\n   * Sync the filter to the transport. See [[LFO.sync]]\n   */\n\n\n  sync() {\n    this._lfo.sync();\n\n    return this;\n  }\n  /**\n   * Unsync the filter from the transport.\n   */\n\n\n  unsync() {\n    this._lfo.unsync();\n\n    return this;\n  }\n  /**\n   * The type of the LFO's oscillator: See [[Oscillator.type]]\n   * @example\n   * const autoFilter = new Tone.AutoFilter().start().toDestination();\n   * const noise = new Tone.Noise().start().connect(autoFilter);\n   * autoFilter.type = \"square\";\n   */\n\n\n  get type() {\n    return this._lfo.type;\n  }\n\n  set type(type) {\n    this._lfo.type = type;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._lfo.dispose();\n\n    this.frequency.dispose();\n    this.depth.dispose();\n    return this;\n  }\n\n}","import { Filter } from \"../component/filter/Filter\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFOEffect } from \"./LFOEffect\";\n/**\n * AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.\n * Setting the LFO rate and depth allows for control over the filter modulation rate\n * and depth.\n *\n * @example\n * // create an autofilter and start it's LFO\n * const autoFilter = new Tone.AutoFilter(\"4n\").toDestination().start();\n * // route an oscillator through the filter and start it\n * const oscillator = new Tone.Oscillator().connect(autoFilter).start();\n * @category Effect\n */\n\nexport class AutoFilter extends LFOEffect {\n  constructor() {\n    super(optionsFromArguments(AutoFilter.getDefaults(), arguments, [\"frequency\", \"baseFrequency\", \"octaves\"]));\n    this.name = \"AutoFilter\";\n    const options = optionsFromArguments(AutoFilter.getDefaults(), arguments, [\"frequency\", \"baseFrequency\", \"octaves\"]);\n    this.filter = new Filter(Object.assign(options.filter, {\n      context: this.context\n    })); // connections\n\n    this.connectEffect(this.filter);\n\n    this._lfo.connect(this.filter.frequency);\n\n    this.octaves = options.octaves;\n    this.baseFrequency = options.baseFrequency;\n  }\n\n  static getDefaults() {\n    return Object.assign(LFOEffect.getDefaults(), {\n      baseFrequency: 200,\n      octaves: 2.6,\n      filter: {\n        type: \"lowpass\",\n        rolloff: -12,\n        Q: 1\n      }\n    });\n  }\n  /**\n   * The minimum value of the filter's cutoff frequency.\n   */\n\n\n  get baseFrequency() {\n    return this._lfo.min;\n  }\n\n  set baseFrequency(freq) {\n    this._lfo.min = this.toFrequency(freq); // and set the max\n\n    this.octaves = this._octaves;\n  }\n  /**\n   * The maximum value of the filter's cutoff frequency.\n   */\n\n\n  get octaves() {\n    return this._octaves;\n  }\n\n  set octaves(oct) {\n    this._octaves = oct;\n    this._lfo.max = this._lfo.min * Math.pow(2, oct);\n  }\n\n  dispose() {\n    super.dispose();\n    this.filter.dispose();\n    return this;\n  }\n\n}","import { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * Panner is an equal power Left/Right Panner. It is a wrapper around the StereoPannerNode.\n * @offline 0.5 2\n * @example\n * // move the input signal from right to left\n * const panner = new Tone.Panner(1).toDestination();\n * panner.pan.rampTo(-1, 0.5);\n * const osc = new Tone.Oscillator(100).connect(panner).start();\n * @category Component\n */\n\nexport class Panner extends ToneAudioNode {\n  constructor() {\n    super(Object.assign(optionsFromArguments(Panner.getDefaults(), arguments, [\"pan\"])));\n    this.name = \"Panner\";\n    /**\n     * the panner node\n     */\n\n    this._panner = this.context.createStereoPanner();\n    this.input = this._panner;\n    this.output = this._panner;\n    const options = optionsFromArguments(Panner.getDefaults(), arguments, [\"pan\"]);\n    this.pan = new Param({\n      context: this.context,\n      param: this._panner.pan,\n      value: options.pan,\n      minValue: -1,\n      maxValue: 1\n    }); // this is necessary for standardized-audio-context\n    // doesn't make any difference for the native AudioContext\n    // https://github.com/chrisguttandin/standardized-audio-context/issues/647\n\n    this._panner.channelCount = options.channelCount;\n    this._panner.channelCountMode = \"explicit\"; // initial value\n\n    readOnly(this, \"pan\");\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      pan: 0,\n      channelCount: 1\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._panner.disconnect();\n\n    this.pan.dispose();\n    return this;\n  }\n\n}","import { Panner } from \"../component/channel/Panner\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFOEffect } from \"./LFOEffect\";\n/**\n * AutoPanner is a [[Panner]] with an [[LFO]] connected to the pan amount.\n * [Related Reading](https://www.ableton.com/en/blog/autopan-chopper-effect-and-more-liveschool/).\n *\n * @example\n * // create an autopanner and start it\n * const autoPanner = new Tone.AutoPanner(\"4n\").toDestination().start();\n * // route an oscillator through the panner and start it\n * const oscillator = new Tone.Oscillator().connect(autoPanner).start();\n * @category Effect\n */\n\nexport class AutoPanner extends LFOEffect {\n  constructor() {\n    super(optionsFromArguments(AutoPanner.getDefaults(), arguments, [\"frequency\"]));\n    this.name = \"AutoPanner\";\n    const options = optionsFromArguments(AutoPanner.getDefaults(), arguments, [\"frequency\"]);\n    this._panner = new Panner({\n      context: this.context,\n      channelCount: options.channelCount\n    }); // connections\n\n    this.connectEffect(this._panner);\n\n    this._lfo.connect(this._panner.pan);\n\n    this._lfo.min = -1;\n    this._lfo.max = 1;\n  }\n\n  static getDefaults() {\n    return Object.assign(LFOEffect.getDefaults(), {\n      channelCount: 1\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._panner.dispose();\n\n    return this;\n  }\n\n}","import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OnePoleFilter } from \"../filter/OnePoleFilter\";\nimport { Abs } from \"../../signal/Abs\";\n/**\n * Follower is a simple envelope follower.\n * It's implemented by applying a lowpass filter to the absolute value of the incoming signal.\n * ```\n *          +-----+    +---------------+\n * Input +--> Abs +----> OnePoleFilter +--> Output\n *          +-----+    +---------------+\n * ```\n * @category Component\n */\n\nexport class Follower extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Follower.getDefaults(), arguments, [\"smoothing\"]));\n    this.name = \"Follower\";\n    const options = optionsFromArguments(Follower.getDefaults(), arguments, [\"smoothing\"]);\n    this._abs = this.input = new Abs({\n      context: this.context\n    });\n    this._lowpass = this.output = new OnePoleFilter({\n      context: this.context,\n      frequency: 1 / this.toSeconds(options.smoothing),\n      type: \"lowpass\"\n    });\n\n    this._abs.connect(this._lowpass);\n\n    this._smoothing = options.smoothing;\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      smoothing: 0.05\n    });\n  }\n  /**\n   * The amount of time it takes a value change to arrive at the updated value.\n   */\n\n\n  get smoothing() {\n    return this._smoothing;\n  }\n\n  set smoothing(smoothing) {\n    this._smoothing = smoothing;\n    this._lowpass.frequency = 1 / this.toSeconds(this.smoothing);\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._abs.dispose();\n\n    this._lowpass.dispose();\n\n    return this;\n  }\n\n}","import { Effect } from \"./Effect\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { Follower } from \"../component/analysis/Follower\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Gain } from \"../core/context/Gain\";\nimport { dbToGain, gainToDb } from \"../core/type/Conversions\";\nimport { ScaleExp } from \"../signal/ScaleExp\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * AutoWah connects a [[Follower]] to a [[Filter]].\n * The frequency of the filter, follows the input amplitude curve.\n * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).\n *\n * @example\n * const autoWah = new Tone.AutoWah(50, 6, -30).toDestination();\n * // initialize the synth and connect to autowah\n * const synth = new Tone.Synth().connect(autoWah);\n * // Q value influences the effect of the wah - default is 2\n * autoWah.Q.value = 6;\n * // more audible on higher notes\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Effect\n */\n\nexport class AutoWah extends Effect {\n  constructor() {\n    super(optionsFromArguments(AutoWah.getDefaults(), arguments, [\"baseFrequency\", \"octaves\", \"sensitivity\"]));\n    this.name = \"AutoWah\";\n    const options = optionsFromArguments(AutoWah.getDefaults(), arguments, [\"baseFrequency\", \"octaves\", \"sensitivity\"]);\n    this._follower = new Follower({\n      context: this.context,\n      smoothing: options.follower\n    });\n    this._sweepRange = new ScaleExp({\n      context: this.context,\n      min: 0,\n      max: 1,\n      exponent: 0.5\n    });\n    this._baseFrequency = this.toFrequency(options.baseFrequency);\n    this._octaves = options.octaves;\n    this._inputBoost = new Gain({\n      context: this.context\n    });\n    this._bandpass = new Filter({\n      context: this.context,\n      rolloff: -48,\n      frequency: 0,\n      Q: options.Q\n    });\n    this._peaking = new Filter({\n      context: this.context,\n      type: \"peaking\"\n    });\n    this._peaking.gain.value = options.gain;\n    this.gain = this._peaking.gain;\n    this.Q = this._bandpass.Q; // the control signal path\n\n    this.effectSend.chain(this._inputBoost, this._follower, this._sweepRange);\n\n    this._sweepRange.connect(this._bandpass.frequency);\n\n    this._sweepRange.connect(this._peaking.frequency); // the filtered path\n\n\n    this.effectSend.chain(this._bandpass, this._peaking, this.effectReturn); // set the initial value\n\n    this._setSweepRange();\n\n    this.sensitivity = options.sensitivity;\n    readOnly(this, [\"gain\", \"Q\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(Effect.getDefaults(), {\n      baseFrequency: 100,\n      octaves: 6,\n      sensitivity: 0,\n      Q: 2,\n      gain: 2,\n      follower: 0.2\n    });\n  }\n  /**\n   * The number of octaves that the filter will sweep above the baseFrequency.\n   */\n\n\n  get octaves() {\n    return this._octaves;\n  }\n\n  set octaves(octaves) {\n    this._octaves = octaves;\n\n    this._setSweepRange();\n  }\n  /**\n   * The follower's smoothing time\n   */\n\n\n  get follower() {\n    return this._follower.smoothing;\n  }\n\n  set follower(follower) {\n    this._follower.smoothing = follower;\n  }\n  /**\n   * The base frequency from which the sweep will start from.\n   */\n\n\n  get baseFrequency() {\n    return this._baseFrequency;\n  }\n\n  set baseFrequency(baseFreq) {\n    this._baseFrequency = this.toFrequency(baseFreq);\n\n    this._setSweepRange();\n  }\n  /**\n   * The sensitivity to control how responsive to the input signal the filter is.\n   */\n\n\n  get sensitivity() {\n    return gainToDb(1 / this._inputBoost.gain.value);\n  }\n\n  set sensitivity(sensitivity) {\n    this._inputBoost.gain.value = 1 / dbToGain(sensitivity);\n  }\n  /**\n   * sets the sweep range of the scaler\n   */\n\n\n  _setSweepRange() {\n    this._sweepRange.min = this._baseFrequency;\n    this._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._follower.dispose();\n\n    this._sweepRange.dispose();\n\n    this._bandpass.dispose();\n\n    this._peaking.dispose();\n\n    this._inputBoost.dispose();\n\n    return this;\n  }\n\n}","import { SingleIOProcessor } from \"../core/worklet/SingleIOProcessor.worklet\";\nimport { registerProcessor } from \"../core/worklet/WorkletGlobalScope\";\nexport const workletName = \"bit-crusher\";\nexport default class BitCrusherWorklet extends SingleIOProcessor {\n  static get parameterDescriptors() {\n    return [{\n      name: \"bits\",\n      defaultValue: 12,\n      minValue: 1,\n      maxValue: 16\n    }];\n  }\n\n  generate(input, _channel, parameters) {\n    const step = Math.pow(0.5, parameters.bits - 1);\n    const val = step * Math.floor(input / step + 0.5);\n    return val;\n  }\n\n}\nregisterProcessor(workletName, BitCrusherWorklet);","import { ToneAudioWorklet } from \"../core/worklet/ToneAudioWorklet\";\nimport { Effect } from \"./Effect\";\nimport { Gain } from \"../core/context/Gain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { connectSeries } from \"../core/context/ToneAudioNode\";\nimport { Param } from \"../core/context/Param\";\nimport { workletName } from \"./BitCrusher.worklet\";\n/**\n * BitCrusher down-samples the incoming signal to a different bit depth.\n * Lowering the bit depth of the signal creates distortion. Read more about BitCrushing\n * on [Wikipedia](https://en.wikipedia.org/wiki/Bitcrusher).\n * @example\n * // initialize crusher and route a synth through it\n * const crusher = new Tone.BitCrusher(4).toDestination();\n * const synth = new Tone.Synth().connect(crusher);\n * synth.triggerAttackRelease(\"C2\", 2);\n *\n * @category Effect\n */\n\nexport class BitCrusher extends Effect {\n  constructor() {\n    super(optionsFromArguments(BitCrusher.getDefaults(), arguments, [\"bits\"]));\n    this.name = \"BitCrusher\";\n    const options = optionsFromArguments(BitCrusher.getDefaults(), arguments, [\"bits\"]);\n    this._bitCrusherWorklet = new BitCrusherWorklet({\n      context: this.context,\n      bits: options.bits\n    }); // connect it up\n\n    this.connectEffect(this._bitCrusherWorklet);\n    this.bits = this._bitCrusherWorklet.bits;\n  }\n\n  static getDefaults() {\n    return Object.assign(Effect.getDefaults(), {\n      bits: 4\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._bitCrusherWorklet.dispose();\n\n    return this;\n  }\n\n}\n/**\n * Internal class which creates an AudioWorklet to do the bit crushing\n */\n\nclass BitCrusherWorklet extends ToneAudioWorklet {\n  constructor() {\n    super(optionsFromArguments(BitCrusherWorklet.getDefaults(), arguments));\n    this.name = \"BitCrusherWorklet\";\n    const options = optionsFromArguments(BitCrusherWorklet.getDefaults(), arguments);\n    this.input = new Gain({\n      context: this.context\n    });\n    this.output = new Gain({\n      context: this.context\n    });\n    this.bits = new Param({\n      context: this.context,\n      value: options.bits,\n      units: \"positive\",\n      minValue: 1,\n      maxValue: 16,\n      param: this._dummyParam,\n      swappable: true\n    });\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioWorklet.getDefaults(), {\n      bits: 12\n    });\n  }\n\n  _audioWorkletName() {\n    return workletName;\n  }\n\n  onReady(node) {\n    connectSeries(this.input, node, this.output);\n    const bits = node.parameters.get(\"bits\");\n    this.bits.setParam(bits);\n  }\n\n  dispose() {\n    super.dispose();\n    this.input.dispose();\n    this.output.dispose();\n    this.bits.dispose();\n    return this;\n  }\n\n}","import { Effect } from \"./Effect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { WaveShaper } from \"../signal/WaveShaper\";\n/**\n * Chebyshev is a waveshaper which is good\n * for making different types of distortion sounds.\n * Note that odd orders sound very different from even ones,\n * and order = 1 is no change.\n * Read more at [music.columbia.edu](http://music.columbia.edu/cmc/musicandcomputers/chapter4/04_06.php).\n * @example\n * // create a new cheby\n * const cheby = new Tone.Chebyshev(50).toDestination();\n * // create a monosynth connected to our cheby\n * const synth = new Tone.MonoSynth().connect(cheby);\n * synth.triggerAttackRelease(\"C2\", 0.4);\n * @category Effect\n */\n\nexport class Chebyshev extends Effect {\n  constructor() {\n    super(optionsFromArguments(Chebyshev.getDefaults(), arguments, [\"order\"]));\n    this.name = \"Chebyshev\";\n    const options = optionsFromArguments(Chebyshev.getDefaults(), arguments, [\"order\"]);\n    this._shaper = new WaveShaper({\n      context: this.context,\n      length: 4096\n    });\n    this._order = options.order;\n    this.connectEffect(this._shaper);\n    this.order = options.order;\n    this.oversample = options.oversample;\n  }\n\n  static getDefaults() {\n    return Object.assign(Effect.getDefaults(), {\n      order: 1,\n      oversample: \"none\"\n    });\n  }\n  /**\n   * get the coefficient for that degree\n   * @param  x the x value\n   * @param  degree\n   * @param  memo memoize the computed value. this speeds up computation greatly.\n   */\n\n\n  _getCoefficient(x, degree, memo) {\n    if (memo.has(degree)) {\n      return memo.get(degree);\n    } else if (degree === 0) {\n      memo.set(degree, 0);\n    } else if (degree === 1) {\n      memo.set(degree, x);\n    } else {\n      memo.set(degree, 2 * x * this._getCoefficient(x, degree - 1, memo) - this._getCoefficient(x, degree - 2, memo));\n    }\n\n    return memo.get(degree);\n  }\n  /**\n   * The order of the Chebyshev polynomial which creates the equation which is applied to the incoming\n   * signal through a Tone.WaveShaper. The equations are in the form:\n   * ```\n   * order 2: 2x^2 + 1\n   * order 3: 4x^3 + 3x\n   * ```\n   * @min 1\n   * @max 100\n   */\n\n\n  get order() {\n    return this._order;\n  }\n\n  set order(order) {\n    this._order = order;\n\n    this._shaper.setMap(x => {\n      return this._getCoefficient(x, order, new Map());\n    });\n  }\n  /**\n   * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n   */\n\n\n  get oversample() {\n    return this._shaper.oversample;\n  }\n\n  set oversample(oversampling) {\n    this._shaper.oversample = oversampling;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._shaper.dispose();\n\n    return this;\n  }\n\n}","import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * Split splits an incoming signal into the number of given channels.\n *\n * @example\n * const split = new Tone.Split();\n * // stereoSignal.connect(split);\n * @category Component\n */\n\nexport class Split extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Split.getDefaults(), arguments, [\"channels\"]));\n    this.name = \"Split\";\n    const options = optionsFromArguments(Split.getDefaults(), arguments, [\"channels\"]);\n    this._splitter = this.input = this.output = this.context.createChannelSplitter(options.channels);\n    this._internalChannels = [this._splitter];\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      channels: 2\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._splitter.disconnect();\n\n    return this;\n  }\n\n}","import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * Merge brings multiple mono input channels into a single multichannel output channel.\n *\n * @example\n * const merge = new Tone.Merge().toDestination();\n * // routing a sine tone in the left channel\n * const osc = new Tone.Oscillator().connect(merge, 0, 0).start();\n * // and noise in the right channel\n * const noise = new Tone.Noise().connect(merge, 0, 1).start();;\n * @category Component\n */\n\nexport class Merge extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]));\n    this.name = \"Merge\";\n    const options = optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]);\n    this._merger = this.output = this.input = this.context.createChannelMerger(options.channels);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      channels: 2\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._merger.disconnect();\n\n    return this;\n  }\n\n}","import { connect, connectSeries, ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { CrossFade } from \"../component/channel/CrossFade\";\nimport { Split } from \"../component/channel/Split\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Merge } from \"../component/channel/Merge\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Base class for Stereo effects.\n */\n\nexport class StereoEffect extends ToneAudioNode {\n  constructor(options) {\n    super(options);\n    this.name = \"StereoEffect\";\n    this.input = new Gain({\n      context: this.context\n    }); // force mono sources to be stereo\n\n    this.input.channelCount = 2;\n    this.input.channelCountMode = \"explicit\";\n    this._dryWet = this.output = new CrossFade({\n      context: this.context,\n      fade: options.wet\n    });\n    this.wet = this._dryWet.fade;\n    this._split = new Split({\n      context: this.context,\n      channels: 2\n    });\n    this._merge = new Merge({\n      context: this.context,\n      channels: 2\n    }); // connections\n\n    this.input.connect(this._split); // dry wet connections\n\n    this.input.connect(this._dryWet.a);\n\n    this._merge.connect(this._dryWet.b);\n\n    readOnly(this, [\"wet\"]);\n  }\n  /**\n   * Connect the left part of the effect\n   */\n\n\n  connectEffectLeft(...nodes) {\n    this._split.connect(nodes[0], 0, 0);\n\n    connectSeries(...nodes);\n    connect(nodes[nodes.length - 1], this._merge, 0, 0);\n  }\n  /**\n   * Connect the right part of the effect\n   */\n\n\n  connectEffectRight(...nodes) {\n    this._split.connect(nodes[0], 1, 0);\n\n    connectSeries(...nodes);\n    connect(nodes[nodes.length - 1], this._merge, 0, 1);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      wet: 1\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._dryWet.dispose();\n\n    this._split.dispose();\n\n    this._merge.dispose();\n\n    return this;\n  }\n\n}","import { StereoEffect } from \"./StereoEffect\";\nimport { Signal } from \"../signal/Signal\";\nimport { Gain } from \"../core/context/Gain\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Split } from \"../component/channel/Split\";\nimport { Merge } from \"../component/channel/Merge\";\n/**\n * Just like a stereo feedback effect, but the feedback is routed from left to right\n * and right to left instead of on the same channel.\n * ```\n * +--------------------------------+ feedbackL <-----------------------------------+\n * |                                                                                |\n * +-->                          +----->        +---->                          +---+\n *      feedbackMerge +--> split        (EFFECT)       merge +--> feedbackSplit\n * +-->                          +----->        +---->                          +---+\n * |                                                                                |\n * +--------------------------------+ feedbackR <-----------------------------------+\n * ```\n */\n\nexport class StereoFeedbackEffect extends StereoEffect {\n  constructor(options) {\n    super(options);\n    this.feedback = new Signal({\n      context: this.context,\n      value: options.feedback,\n      units: \"normalRange\"\n    });\n    this._feedbackL = new Gain({\n      context: this.context\n    });\n    this._feedbackR = new Gain({\n      context: this.context\n    });\n    this._feedbackSplit = new Split({\n      context: this.context,\n      channels: 2\n    });\n    this._feedbackMerge = new Merge({\n      context: this.context,\n      channels: 2\n    });\n\n    this._merge.connect(this._feedbackSplit);\n\n    this._feedbackMerge.connect(this._split); // the left output connected to the left input\n\n\n    this._feedbackSplit.connect(this._feedbackL, 0, 0);\n\n    this._feedbackL.connect(this._feedbackMerge, 0, 0); // the right output connected to the right input\n\n\n    this._feedbackSplit.connect(this._feedbackR, 1, 0);\n\n    this._feedbackR.connect(this._feedbackMerge, 0, 1); // the feedback control\n\n\n    this.feedback.fan(this._feedbackL.gain, this._feedbackR.gain);\n    readOnly(this, [\"feedback\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(StereoEffect.getDefaults(), {\n      feedback: 0.5\n    });\n  }\n\n  dispose() {\n    super.dispose();\n    this.feedback.dispose();\n\n    this._feedbackL.dispose();\n\n    this._feedbackR.dispose();\n\n    this._feedbackSplit.dispose();\n\n    this._feedbackMerge.dispose();\n\n    return this;\n  }\n\n}","import { StereoFeedbackEffect } from \"../effect/StereoFeedbackEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Delay } from \"../core/context/Delay\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Chorus is a stereo chorus effect composed of a left and right delay with an [[LFO]] applied to the delayTime of each channel.\n * When [[feedback]] is set to a value larger than 0, you also get Flanger-type effects.\n * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).\n * Read more on the chorus effect on [SoundOnSound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).\n *\n * @example\n * const chorus = new Tone.Chorus(4, 2.5, 0.5);\n * const synth = new Tone.PolySynth().connect(chorus);\n * synth.triggerAttackRelease([\"C3\", \"E3\", \"G3\"], \"8n\");\n *\n * @category Effect\n */\n\nexport class Chorus extends StereoFeedbackEffect {\n  constructor() {\n    super(optionsFromArguments(Chorus.getDefaults(), arguments, [\"frequency\", \"delayTime\", \"depth\"]));\n    this.name = \"Chorus\";\n    const options = optionsFromArguments(Chorus.getDefaults(), arguments, [\"frequency\", \"delayTime\", \"depth\"]);\n    this._depth = options.depth;\n    this._delayTime = options.delayTime / 1000;\n    this._lfoL = new LFO({\n      context: this.context,\n      frequency: options.frequency,\n      min: 0,\n      max: 1\n    });\n    this._lfoR = new LFO({\n      context: this.context,\n      frequency: options.frequency,\n      min: 0,\n      max: 1,\n      phase: 180\n    });\n    this._delayNodeL = new Delay({\n      context: this.context\n    });\n    this._delayNodeR = new Delay({\n      context: this.context\n    });\n    this.frequency = this._lfoL.frequency;\n    readOnly(this, [\"frequency\"]); // have one LFO frequency control the other\n\n    this._lfoL.frequency.connect(this._lfoR.frequency); // connections\n\n\n    this.connectEffectLeft(this._delayNodeL);\n    this.connectEffectRight(this._delayNodeR); // lfo setup\n\n    this._lfoL.connect(this._delayNodeL.delayTime);\n\n    this._lfoR.connect(this._delayNodeR.delayTime); // set the initial values\n\n\n    this.depth = this._depth;\n    this.type = options.type;\n    this.spread = options.spread;\n  }\n\n  static getDefaults() {\n    return Object.assign(StereoFeedbackEffect.getDefaults(), {\n      frequency: 1.5,\n      delayTime: 3.5,\n      depth: 0.7,\n      type: \"sine\",\n      spread: 180,\n      feedback: 0,\n      wet: 0.5\n    });\n  }\n  /**\n   * The depth of the effect. A depth of 1 makes the delayTime\n   * modulate between 0 and 2*delayTime (centered around the delayTime).\n   */\n\n\n  get depth() {\n    return this._depth;\n  }\n\n  set depth(depth) {\n    this._depth = depth;\n    const deviation = this._delayTime * depth;\n    this._lfoL.min = Math.max(this._delayTime - deviation, 0);\n    this._lfoL.max = this._delayTime + deviation;\n    this._lfoR.min = Math.max(this._delayTime - deviation, 0);\n    this._lfoR.max = this._delayTime + deviation;\n  }\n  /**\n   * The delayTime in milliseconds of the chorus. A larger delayTime\n   * will give a more pronounced effect. Nominal range a delayTime\n   * is between 2 and 20ms.\n   */\n\n\n  get delayTime() {\n    return this._delayTime * 1000;\n  }\n\n  set delayTime(delayTime) {\n    this._delayTime = delayTime / 1000;\n    this.depth = this._depth;\n  }\n  /**\n   * The oscillator type of the LFO.\n   */\n\n\n  get type() {\n    return this._lfoL.type;\n  }\n\n  set type(type) {\n    this._lfoL.type = type;\n    this._lfoR.type = type;\n  }\n  /**\n   * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n   * When set to 180, LFO's will be panned hard left and right respectively.\n   */\n\n\n  get spread() {\n    return this._lfoR.phase - this._lfoL.phase;\n  }\n\n  set spread(spread) {\n    this._lfoL.phase = 90 - spread / 2;\n    this._lfoR.phase = spread / 2 + 90;\n  }\n  /**\n   * Start the effect.\n   */\n\n\n  start(time) {\n    this._lfoL.start(time);\n\n    this._lfoR.start(time);\n\n    return this;\n  }\n  /**\n   * Stop the lfo\n   */\n\n\n  stop(time) {\n    this._lfoL.stop(time);\n\n    this._lfoR.stop(time);\n\n    return this;\n  }\n  /**\n   * Sync the filter to the transport. See [[LFO.sync]]\n   */\n\n\n  sync() {\n    this._lfoL.sync();\n\n    this._lfoR.sync();\n\n    return this;\n  }\n  /**\n   * Unsync the filter from the transport.\n   */\n\n\n  unsync() {\n    this._lfoL.unsync();\n\n    this._lfoR.unsync();\n\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._lfoL.dispose();\n\n    this._lfoR.dispose();\n\n    this._delayNodeL.dispose();\n\n    this._delayNodeR.dispose();\n\n    this.frequency.dispose();\n    return this;\n  }\n\n}","import { optionsFromArguments } from \"../core/util/Defaults\";\nimport { WaveShaper } from \"../signal/WaveShaper\";\nimport { Effect } from \"./Effect\";\n/**\n * A simple distortion effect using Tone.WaveShaper.\n * Algorithm from [this stackoverflow answer](http://stackoverflow.com/a/22313408).\n *\n * @example\n * const dist = new Tone.Distortion(0.8).toDestination();\n * const fm = new Tone.FMSynth().connect(dist);\n * fm.triggerAttackRelease(\"A1\", \"8n\");\n * @category Effect\n */\n\nexport class Distortion extends Effect {\n  constructor() {\n    super(optionsFromArguments(Distortion.getDefaults(), arguments, [\"distortion\"]));\n    this.name = \"Distortion\";\n    const options = optionsFromArguments(Distortion.getDefaults(), arguments, [\"distortion\"]);\n    this._shaper = new WaveShaper({\n      context: this.context,\n      length: 4096\n    });\n    this._distortion = options.distortion;\n    this.connectEffect(this._shaper);\n    this.distortion = options.distortion;\n    this.oversample = options.oversample;\n  }\n\n  static getDefaults() {\n    return Object.assign(Effect.getDefaults(), {\n      distortion: 0.4,\n      oversample: \"none\"\n    });\n  }\n  /**\n   * The amount of distortion. Nominal range is between 0 and 1.\n   */\n\n\n  get distortion() {\n    return this._distortion;\n  }\n\n  set distortion(amount) {\n    this._distortion = amount;\n    const k = amount * 100;\n    const deg = Math.PI / 180;\n\n    this._shaper.setMap(x => {\n      if (Math.abs(x) < 0.001) {\n        // should output 0 when input is 0\n        return 0;\n      } else {\n        return (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));\n      }\n    });\n  }\n  /**\n   * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n   */\n\n\n  get oversample() {\n    return this._shaper.oversample;\n  }\n\n  set oversample(oversampling) {\n    this._shaper.oversample = oversampling;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._shaper.dispose();\n\n    return this;\n  }\n\n}","import { Gain } from \"../core/context/Gain\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Effect } from \"./Effect\";\n/**\n * FeedbackEffect provides a loop between an audio source and its own output.\n * This is a base-class for feedback effects.\n */\n\nexport class FeedbackEffect extends Effect {\n  constructor(options) {\n    super(options);\n    this.name = \"FeedbackEffect\";\n    this._feedbackGain = new Gain({\n      context: this.context,\n      gain: options.feedback,\n      units: \"normalRange\"\n    });\n    this.feedback = this._feedbackGain.gain;\n    readOnly(this, \"feedback\"); // the feedback loop\n\n    this.effectReturn.chain(this._feedbackGain, this.effectSend);\n  }\n\n  static getDefaults() {\n    return Object.assign(Effect.getDefaults(), {\n      feedback: 0.125\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._feedbackGain.dispose();\n\n    this.feedback.dispose();\n    return this;\n  }\n\n}","import { Delay } from \"../core/context/Delay\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { FeedbackEffect } from \"./FeedbackEffect\";\n/**\n * FeedbackDelay is a DelayNode in which part of output signal is fed back into the delay.\n *\n * @param delayTime The delay applied to the incoming signal.\n * @param feedback The amount of the effected signal which is fed back through the delay.\n * @example\n * const feedbackDelay = new Tone.FeedbackDelay(\"8n\", 0.5).toDestination();\n * const tom = new Tone.MembraneSynth({\n * \toctaves: 4,\n * \tpitchDecay: 0.1\n * }).connect(feedbackDelay);\n * tom.triggerAttackRelease(\"A2\", \"32n\");\n * @category Effect\n */\n\nexport class FeedbackDelay extends FeedbackEffect {\n  constructor() {\n    super(optionsFromArguments(FeedbackDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]));\n    this.name = \"FeedbackDelay\";\n    const options = optionsFromArguments(FeedbackDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]);\n    this._delayNode = new Delay({\n      context: this.context,\n      delayTime: options.delayTime,\n      maxDelay: options.maxDelay\n    });\n    this.delayTime = this._delayNode.delayTime; // connect it up\n\n    this.connectEffect(this._delayNode);\n    readOnly(this, \"delayTime\");\n  }\n\n  static getDefaults() {\n    return Object.assign(FeedbackEffect.getDefaults(), {\n      delayTime: 0.25,\n      maxDelay: 1\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._delayNode.dispose();\n\n    this.delayTime.dispose();\n    return this;\n  }\n\n}","import { Gain } from \"../../core/context/Gain\";\nimport { connectSeries, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\n/**\n * PhaseShiftAllpass is an very efficient implementation of a Hilbert Transform\n * using two Allpass filter banks whose outputs have a phase difference of 90°.\n * Here the `offset90` phase is offset by +90° in relation to `output`.\n * Coefficients and structure was developed by Olli Niemitalo.\n * For more details see: http://yehar.com/blog/?p=368\n * @category Component\n */\n\nexport class PhaseShiftAllpass extends ToneAudioNode {\n  constructor(options) {\n    super(options);\n    this.name = \"PhaseShiftAllpass\";\n    this.input = new Gain({\n      context: this.context\n    });\n    /**\n     * The phase shifted output\n     */\n\n    this.output = new Gain({\n      context: this.context\n    });\n    /**\n     * The PhaseShifted allpass output\n     */\n\n    this.offset90 = new Gain({\n      context: this.context\n    });\n    const allpassBank1Values = [0.6923878, 0.9360654322959, 0.9882295226860, 0.9987488452737];\n    const allpassBank2Values = [0.4021921162426, 0.8561710882420, 0.9722909545651, 0.9952884791278];\n    this._bank0 = this._createAllPassFilterBank(allpassBank1Values);\n    this._bank1 = this._createAllPassFilterBank(allpassBank2Values);\n    this._oneSampleDelay = this.context.createIIRFilter([0.0, 1.0], [1.0, 0.0]); // connect Allpass filter banks\n\n    connectSeries(this.input, ...this._bank0, this._oneSampleDelay, this.output);\n    connectSeries(this.input, ...this._bank1, this.offset90);\n  }\n  /**\n   * Create all of the IIR filters from an array of values using the coefficient calculation.\n   */\n\n\n  _createAllPassFilterBank(bankValues) {\n    const nodes = bankValues.map(value => {\n      const coefficients = [[value * value, 0, -1], [1, 0, -(value * value)]];\n      return this.context.createIIRFilter(coefficients[0], coefficients[1]);\n    });\n    return nodes;\n  }\n\n  dispose() {\n    super.dispose();\n    this.input.dispose();\n    this.output.dispose();\n    this.offset90.dispose();\n\n    this._bank0.forEach(f => f.disconnect());\n\n    this._bank1.forEach(f => f.disconnect());\n\n    this._oneSampleDelay.disconnect();\n\n    return this;\n  }\n\n}","import { PhaseShiftAllpass } from \"../component/filter/PhaseShiftAllpass\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Effect } from \"../effect/Effect\";\nimport { Add } from \"../signal/Add\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Negate } from \"../signal/Negate\";\nimport { Signal } from \"../signal/Signal\";\nimport { Oscillator } from \"../source/oscillator/Oscillator\";\nimport { ToneOscillatorNode } from \"../source/oscillator/ToneOscillatorNode\";\n/**\n * FrequencyShifter can be used to shift all frequencies of a signal by a fixed amount.\n * The amount can be changed at audio rate and the effect is applied in real time.\n * The frequency shifting is implemented with a technique called single side band modulation using a ring modulator.\n * Note: Contrary to pitch shifting, all frequencies are shifted by the same amount,\n * destroying the harmonic relationship between them. This leads to the classic ring modulator timbre distortion.\n * The algorithm will produces some aliasing towards the high end, especially if your source material\n * contains a lot of high frequencies. Unfortunatelly the webaudio API does not support resampling\n * buffers in real time, so it is not possible to fix it properly. Depending on the use case it might\n * be an option to low pass filter your input before frequency shifting it to get ride of the aliasing.\n * You can find a very detailed description of the algorithm here: https://larzeitlin.github.io/RMFS/\n *\n * @example\n * const input = new Tone.Oscillator(230, \"sawtooth\").start();\n * const shift = new Tone.FrequencyShifter(42).toDestination();\n * input.connect(shift);\n * @category Effect\n */\n\nexport class FrequencyShifter extends Effect {\n  constructor() {\n    super(optionsFromArguments(FrequencyShifter.getDefaults(), arguments, [\"frequency\"]));\n    this.name = \"FrequencyShifter\";\n    const options = optionsFromArguments(FrequencyShifter.getDefaults(), arguments, [\"frequency\"]);\n    this.frequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: options.frequency,\n      minValue: -this.context.sampleRate / 2,\n      maxValue: this.context.sampleRate / 2\n    });\n    this._sine = new ToneOscillatorNode({\n      context: this.context,\n      type: \"sine\"\n    });\n    this._cosine = new Oscillator({\n      context: this.context,\n      phase: -90,\n      type: \"sine\"\n    });\n    this._sineMultiply = new Multiply({\n      context: this.context\n    });\n    this._cosineMultiply = new Multiply({\n      context: this.context\n    });\n    this._negate = new Negate({\n      context: this.context\n    });\n    this._add = new Add({\n      context: this.context\n    });\n    this._phaseShifter = new PhaseShiftAllpass({\n      context: this.context\n    });\n    this.effectSend.connect(this._phaseShifter); // connect the carrier frequency signal to the two oscillators\n\n    this.frequency.fan(this._sine.frequency, this._cosine.frequency);\n\n    this._phaseShifter.offset90.connect(this._cosineMultiply);\n\n    this._cosine.connect(this._cosineMultiply.factor);\n\n    this._phaseShifter.connect(this._sineMultiply);\n\n    this._sine.connect(this._sineMultiply.factor);\n\n    this._sineMultiply.connect(this._negate);\n\n    this._cosineMultiply.connect(this._add);\n\n    this._negate.connect(this._add.addend);\n\n    this._add.connect(this.effectReturn); // start the oscillators at the same time\n\n\n    const now = this.immediate();\n\n    this._sine.start(now);\n\n    this._cosine.start(now);\n  }\n\n  static getDefaults() {\n    return Object.assign(Effect.getDefaults(), {\n      frequency: 0\n    });\n  }\n\n  dispose() {\n    super.dispose();\n    this.frequency.dispose();\n\n    this._add.dispose();\n\n    this._cosine.dispose();\n\n    this._cosineMultiply.dispose();\n\n    this._negate.dispose();\n\n    this._phaseShifter.dispose();\n\n    this._sine.dispose();\n\n    this._sineMultiply.dispose();\n\n    return this;\n  }\n\n}","import { StereoEffect } from \"./StereoEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\nimport { LowpassCombFilter } from \"../component/filter/LowpassCombFilter\";\n/**\n * An array of comb filter delay values from Freeverb implementation\n */\n\nconst combFilterTunings = [1557 / 44100, 1617 / 44100, 1491 / 44100, 1422 / 44100, 1277 / 44100, 1356 / 44100, 1188 / 44100, 1116 / 44100];\n/**\n * An array of allpass filter frequency values from Freeverb implementation\n */\n\nconst allpassFilterFrequencies = [225, 556, 441, 341];\n/**\n * Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).\n * Read more on reverb on [Sound On Sound](https://web.archive.org/web/20160404083902/http://www.soundonsound.com:80/sos/feb01/articles/synthsecrets.asp).\n * Freeverb is now implemented with an AudioWorkletNode which may result on performance degradation on some platforms\n * @example\n * const freeverb = new Tone.Freeverb().toDestination();\n * freeverb.dampening = 1000;\n * // routing synth through the reverb\n * const synth = new Tone.NoiseSynth().connect(freeverb);\n * synth.triggerAttackRelease(0.05);\n * @category Effect\n */\n\nexport class Freeverb extends StereoEffect {\n  constructor() {\n    super(optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]));\n    this.name = \"Freeverb\";\n    /**\n     * the comb filters\n     */\n\n    this._combFilters = [];\n    /**\n     * the allpass filters on the left\n     */\n\n    this._allpassFiltersL = [];\n    /**\n     * the allpass filters on the right\n     */\n\n    this._allpassFiltersR = [];\n    const options = optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]);\n    this.roomSize = new Signal({\n      context: this.context,\n      value: options.roomSize,\n      units: \"normalRange\"\n    }); // make the allpass filters on the right\n\n    this._allpassFiltersL = allpassFilterFrequencies.map(freq => {\n      const allpassL = this.context.createBiquadFilter();\n      allpassL.type = \"allpass\";\n      allpassL.frequency.value = freq;\n      return allpassL;\n    }); // make the allpass filters on the left\n\n    this._allpassFiltersR = allpassFilterFrequencies.map(freq => {\n      const allpassR = this.context.createBiquadFilter();\n      allpassR.type = \"allpass\";\n      allpassR.frequency.value = freq;\n      return allpassR;\n    }); // make the comb filters\n\n    this._combFilters = combFilterTunings.map((delayTime, index) => {\n      const lfpf = new LowpassCombFilter({\n        context: this.context,\n        dampening: options.dampening,\n        delayTime\n      });\n\n      if (index < combFilterTunings.length / 2) {\n        this.connectEffectLeft(lfpf, ...this._allpassFiltersL);\n      } else {\n        this.connectEffectRight(lfpf, ...this._allpassFiltersR);\n      }\n\n      this.roomSize.connect(lfpf.resonance);\n      return lfpf;\n    });\n    readOnly(this, [\"roomSize\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(StereoEffect.getDefaults(), {\n      roomSize: 0.7,\n      dampening: 3000\n    });\n  }\n  /**\n   * The amount of dampening of the reverberant signal.\n   */\n\n\n  get dampening() {\n    return this._combFilters[0].dampening;\n  }\n\n  set dampening(d) {\n    this._combFilters.forEach(c => c.dampening = d);\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._allpassFiltersL.forEach(al => al.disconnect());\n\n    this._allpassFiltersR.forEach(ar => ar.disconnect());\n\n    this._combFilters.forEach(cf => cf.dispose());\n\n    this.roomSize.dispose();\n    return this;\n  }\n\n}","import { StereoEffect } from \"./StereoEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Scale } from \"../signal/Scale\";\nimport { Signal } from \"../signal/Signal\";\nimport { FeedbackCombFilter } from \"../component/filter/FeedbackCombFilter\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * an array of the comb filter delay time values\n */\n\nconst combFilterDelayTimes = [1687 / 25000, 1601 / 25000, 2053 / 25000, 2251 / 25000];\n/**\n * the resonances of each of the comb filters\n */\n\nconst combFilterResonances = [0.773, 0.802, 0.753, 0.733];\n/**\n * the allpass filter frequencies\n */\n\nconst allpassFilterFreqs = [347, 113, 37];\n/**\n * JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)\n * tuned by John Chowning in 1970.\n * It is made up of three allpass filters and four [[FeedbackCombFilter]].\n * JCReverb is now implemented with an AudioWorkletNode which may result on performance degradation on some platforms\n *\n * @example\n * const reverb = new Tone.JCReverb(0.4).toDestination();\n * const delay = new Tone.FeedbackDelay(0.5);\n * // connecting the synth to reverb through delay\n * const synth = new Tone.DuoSynth().chain(delay, reverb);\n * synth.triggerAttackRelease(\"A4\", \"8n\");\n *\n * @category Effect\n */\n\nexport class JCReverb extends StereoEffect {\n  constructor() {\n    super(optionsFromArguments(JCReverb.getDefaults(), arguments, [\"roomSize\"]));\n    this.name = \"JCReverb\";\n    /**\n     * a series of allpass filters\n     */\n\n    this._allpassFilters = [];\n    /**\n     * parallel feedback comb filters\n     */\n\n    this._feedbackCombFilters = [];\n    const options = optionsFromArguments(JCReverb.getDefaults(), arguments, [\"roomSize\"]);\n    this.roomSize = new Signal({\n      context: this.context,\n      value: options.roomSize,\n      units: \"normalRange\"\n    });\n    this._scaleRoomSize = new Scale({\n      context: this.context,\n      min: -0.733,\n      max: 0.197\n    }); // make the allpass filters\n\n    this._allpassFilters = allpassFilterFreqs.map(freq => {\n      const allpass = this.context.createBiquadFilter();\n      allpass.type = \"allpass\";\n      allpass.frequency.value = freq;\n      return allpass;\n    }); // and the comb filters\n\n    this._feedbackCombFilters = combFilterDelayTimes.map((delayTime, index) => {\n      const fbcf = new FeedbackCombFilter({\n        context: this.context,\n        delayTime\n      });\n\n      this._scaleRoomSize.connect(fbcf.resonance);\n\n      fbcf.resonance.value = combFilterResonances[index];\n\n      if (index < combFilterDelayTimes.length / 2) {\n        this.connectEffectLeft(...this._allpassFilters, fbcf);\n      } else {\n        this.connectEffectRight(...this._allpassFilters, fbcf);\n      }\n\n      return fbcf;\n    }); // chain the allpass filters together\n\n    this.roomSize.connect(this._scaleRoomSize);\n    readOnly(this, [\"roomSize\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(StereoEffect.getDefaults(), {\n      roomSize: 0.5\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._allpassFilters.forEach(apf => apf.disconnect());\n\n    this._feedbackCombFilters.forEach(fbcf => fbcf.dispose());\n\n    this.roomSize.dispose();\n\n    this._scaleRoomSize.dispose();\n\n    return this;\n  }\n\n}","import { StereoFeedbackEffect } from \"./StereoFeedbackEffect\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Just like a [[StereoFeedbackEffect]], but the feedback is routed from left to right\n * and right to left instead of on the same channel.\n * ```\n * +--------------------------------+ feedbackL <-----------------------------------+\n * |                                                                                |\n * +-->                          +----->        +---->                          +-----+\n *      feedbackMerge +--> split        (EFFECT)       merge +--> feedbackSplit     | |\n * +-->                          +----->        +---->                          +---+ |\n * |                                                                                  |\n * +--------------------------------+ feedbackR <-------------------------------------+\n * ```\n */\n\nexport class StereoXFeedbackEffect extends StereoFeedbackEffect {\n  constructor(options) {\n    super(options); // the left output connected to the right input\n\n    this._feedbackL.disconnect();\n\n    this._feedbackL.connect(this._feedbackMerge, 0, 1); // the left output connected to the right input\n\n\n    this._feedbackR.disconnect();\n\n    this._feedbackR.connect(this._feedbackMerge, 0, 0);\n\n    readOnly(this, [\"feedback\"]);\n  }\n\n}","import { StereoXFeedbackEffect } from \"./StereoXFeedbackEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Delay } from \"../core/context/Delay\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * PingPongDelay is a feedback delay effect where the echo is heard\n * first in one channel and next in the opposite channel. In a stereo\n * system these are the right and left channels.\n * PingPongDelay in more simplified terms is two Tone.FeedbackDelays\n * with independent delay values. Each delay is routed to one channel\n * (left or right), and the channel triggered second will always\n * trigger at the same interval after the first.\n * @example\n * const pingPong = new Tone.PingPongDelay(\"4n\", 0.2).toDestination();\n * const drum = new Tone.MembraneSynth().connect(pingPong);\n * drum.triggerAttackRelease(\"C4\", \"32n\");\n * @category Effect\n */\n\nexport class PingPongDelay extends StereoXFeedbackEffect {\n  constructor() {\n    super(optionsFromArguments(PingPongDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]));\n    this.name = \"PingPongDelay\";\n    const options = optionsFromArguments(PingPongDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]);\n    this._leftDelay = new Delay({\n      context: this.context,\n      maxDelay: options.maxDelay\n    });\n    this._rightDelay = new Delay({\n      context: this.context,\n      maxDelay: options.maxDelay\n    });\n    this._rightPreDelay = new Delay({\n      context: this.context,\n      maxDelay: options.maxDelay\n    });\n    this.delayTime = new Signal({\n      context: this.context,\n      units: \"time\",\n      value: options.delayTime\n    }); // connect it up\n\n    this.connectEffectLeft(this._leftDelay);\n    this.connectEffectRight(this._rightPreDelay, this._rightDelay);\n    this.delayTime.fan(this._leftDelay.delayTime, this._rightDelay.delayTime, this._rightPreDelay.delayTime); // rearranged the feedback to be after the rightPreDelay\n\n    this._feedbackL.disconnect();\n\n    this._feedbackL.connect(this._rightDelay);\n\n    readOnly(this, [\"delayTime\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(StereoXFeedbackEffect.getDefaults(), {\n      delayTime: 0.25,\n      maxDelay: 1\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._leftDelay.dispose();\n\n    this._rightDelay.dispose();\n\n    this._rightPreDelay.dispose();\n\n    this.delayTime.dispose();\n    return this;\n  }\n\n}","import { FeedbackEffect } from \"./FeedbackEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Delay } from \"../core/context/Delay\";\nimport { CrossFade } from \"../component/channel/CrossFade\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { intervalToFrequencyRatio } from \"../core/type/Conversions\";\n/**\n * PitchShift does near-realtime pitch shifting to the incoming signal.\n * The effect is achieved by speeding up or slowing down the delayTime\n * of a DelayNode using a sawtooth wave.\n * Algorithm found in [this pdf](http://dsp-book.narod.ru/soundproc.pdf).\n * Additional reference by [Miller Pucket](http://msp.ucsd.edu/techniques/v0.11/book-html/node115.html).\n * @category Effect\n */\n\nexport class PitchShift extends FeedbackEffect {\n  constructor() {\n    super(optionsFromArguments(PitchShift.getDefaults(), arguments, [\"pitch\"]));\n    this.name = \"PitchShift\";\n    const options = optionsFromArguments(PitchShift.getDefaults(), arguments, [\"pitch\"]);\n    this._frequency = new Signal({\n      context: this.context\n    });\n    this._delayA = new Delay({\n      maxDelay: 1,\n      context: this.context\n    });\n    this._lfoA = new LFO({\n      context: this.context,\n      min: 0,\n      max: 0.1,\n      type: \"sawtooth\"\n    }).connect(this._delayA.delayTime);\n    this._delayB = new Delay({\n      maxDelay: 1,\n      context: this.context\n    });\n    this._lfoB = new LFO({\n      context: this.context,\n      min: 0,\n      max: 0.1,\n      type: \"sawtooth\",\n      phase: 180\n    }).connect(this._delayB.delayTime);\n    this._crossFade = new CrossFade({\n      context: this.context\n    });\n    this._crossFadeLFO = new LFO({\n      context: this.context,\n      min: 0,\n      max: 1,\n      type: \"triangle\",\n      phase: 90\n    }).connect(this._crossFade.fade);\n    this._feedbackDelay = new Delay({\n      delayTime: options.delayTime,\n      context: this.context\n    });\n    this.delayTime = this._feedbackDelay.delayTime;\n    readOnly(this, \"delayTime\");\n    this._pitch = options.pitch;\n    this._windowSize = options.windowSize; // connect the two delay lines up\n\n    this._delayA.connect(this._crossFade.a);\n\n    this._delayB.connect(this._crossFade.b); // connect the frequency\n\n\n    this._frequency.fan(this._lfoA.frequency, this._lfoB.frequency, this._crossFadeLFO.frequency); // route the input\n\n\n    this.effectSend.fan(this._delayA, this._delayB);\n\n    this._crossFade.chain(this._feedbackDelay, this.effectReturn); // start the LFOs at the same time\n\n\n    const now = this.now();\n\n    this._lfoA.start(now);\n\n    this._lfoB.start(now);\n\n    this._crossFadeLFO.start(now); // set the initial value\n\n\n    this.windowSize = this._windowSize;\n  }\n\n  static getDefaults() {\n    return Object.assign(FeedbackEffect.getDefaults(), {\n      pitch: 0,\n      windowSize: 0.1,\n      delayTime: 0,\n      feedback: 0\n    });\n  }\n  /**\n   * Repitch the incoming signal by some interval (measured in semi-tones).\n   * @example\n   * const pitchShift = new Tone.PitchShift().toDestination();\n   * const osc = new Tone.Oscillator().connect(pitchShift).start().toDestination();\n   * pitchShift.pitch = -12; // down one octave\n   * pitchShift.pitch = 7; // up a fifth\n   */\n\n\n  get pitch() {\n    return this._pitch;\n  }\n\n  set pitch(interval) {\n    this._pitch = interval;\n    let factor = 0;\n\n    if (interval < 0) {\n      this._lfoA.min = 0;\n      this._lfoA.max = this._windowSize;\n      this._lfoB.min = 0;\n      this._lfoB.max = this._windowSize;\n      factor = intervalToFrequencyRatio(interval - 1) + 1;\n    } else {\n      this._lfoA.min = this._windowSize;\n      this._lfoA.max = 0;\n      this._lfoB.min = this._windowSize;\n      this._lfoB.max = 0;\n      factor = intervalToFrequencyRatio(interval) - 1;\n    }\n\n    this._frequency.value = factor * (1.2 / this._windowSize);\n  }\n  /**\n   * The window size corresponds roughly to the sample length in a looping sampler.\n   * Smaller values are desirable for a less noticeable delay time of the pitch shifted\n   * signal, but larger values will result in smoother pitch shifting for larger intervals.\n   * A nominal range of 0.03 to 0.1 is recommended.\n   */\n\n\n  get windowSize() {\n    return this._windowSize;\n  }\n\n  set windowSize(size) {\n    this._windowSize = this.toSeconds(size);\n    this.pitch = this._pitch;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._frequency.dispose();\n\n    this._delayA.dispose();\n\n    this._delayB.dispose();\n\n    this._lfoA.dispose();\n\n    this._lfoB.dispose();\n\n    this._crossFade.dispose();\n\n    this._crossFadeLFO.dispose();\n\n    this._feedbackDelay.dispose();\n\n    return this;\n  }\n\n}","import { StereoEffect } from \"./StereoEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Phaser is a phaser effect. Phasers work by changing the phase\n * of different frequency components of an incoming signal. Read more on\n * [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)).\n * Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).\n * @example\n * const phaser = new Tone.Phaser({\n * \tfrequency: 15,\n * \toctaves: 5,\n * \tbaseFrequency: 1000\n * }).toDestination();\n * const synth = new Tone.FMSynth().connect(phaser);\n * synth.triggerAttackRelease(\"E3\", \"2n\");\n * @category Effect\n */\n\nexport class Phaser extends StereoEffect {\n  constructor() {\n    super(optionsFromArguments(Phaser.getDefaults(), arguments, [\"frequency\", \"octaves\", \"baseFrequency\"]));\n    this.name = \"Phaser\";\n    const options = optionsFromArguments(Phaser.getDefaults(), arguments, [\"frequency\", \"octaves\", \"baseFrequency\"]);\n    this._lfoL = new LFO({\n      context: this.context,\n      frequency: options.frequency,\n      min: 0,\n      max: 1\n    });\n    this._lfoR = new LFO({\n      context: this.context,\n      frequency: options.frequency,\n      min: 0,\n      max: 1,\n      phase: 180\n    });\n    this._baseFrequency = this.toFrequency(options.baseFrequency);\n    this._octaves = options.octaves;\n    this.Q = new Signal({\n      context: this.context,\n      value: options.Q,\n      units: \"positive\"\n    });\n    this._filtersL = this._makeFilters(options.stages, this._lfoL);\n    this._filtersR = this._makeFilters(options.stages, this._lfoR);\n    this.frequency = this._lfoL.frequency;\n    this.frequency.value = options.frequency; // connect them up\n\n    this.connectEffectLeft(...this._filtersL);\n    this.connectEffectRight(...this._filtersR); // control the frequency with one LFO\n\n    this._lfoL.frequency.connect(this._lfoR.frequency); // set the options\n\n\n    this.baseFrequency = options.baseFrequency;\n    this.octaves = options.octaves; // start the lfo\n\n    this._lfoL.start();\n\n    this._lfoR.start();\n\n    readOnly(this, [\"frequency\", \"Q\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(StereoEffect.getDefaults(), {\n      frequency: 0.5,\n      octaves: 3,\n      stages: 10,\n      Q: 10,\n      baseFrequency: 350\n    });\n  }\n\n  _makeFilters(stages, connectToFreq) {\n    const filters = []; // make all the filters\n\n    for (let i = 0; i < stages; i++) {\n      const filter = this.context.createBiquadFilter();\n      filter.type = \"allpass\";\n      this.Q.connect(filter.Q);\n      connectToFreq.connect(filter.frequency);\n      filters.push(filter);\n    }\n\n    return filters;\n  }\n  /**\n   * The number of octaves the phase goes above the baseFrequency\n   */\n\n\n  get octaves() {\n    return this._octaves;\n  }\n\n  set octaves(octaves) {\n    this._octaves = octaves;\n    const max = this._baseFrequency * Math.pow(2, octaves);\n    this._lfoL.max = max;\n    this._lfoR.max = max;\n  }\n  /**\n   * The the base frequency of the filters.\n   */\n\n\n  get baseFrequency() {\n    return this._baseFrequency;\n  }\n\n  set baseFrequency(freq) {\n    this._baseFrequency = this.toFrequency(freq);\n    this._lfoL.min = this._baseFrequency;\n    this._lfoR.min = this._baseFrequency;\n    this.octaves = this._octaves;\n  }\n\n  dispose() {\n    super.dispose();\n    this.Q.dispose();\n\n    this._lfoL.dispose();\n\n    this._lfoR.dispose();\n\n    this._filtersL.forEach(f => f.disconnect());\n\n    this._filtersR.forEach(f => f.disconnect());\n\n    this.frequency.dispose();\n    return this;\n  }\n\n}","import { __awaiter } from \"tslib\";\nimport { Merge } from \"../component/channel/Merge\";\nimport { Gain } from \"../core/context/Gain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Noise } from \"../source/Noise\";\nimport { Effect } from \"./Effect\";\nimport { OfflineContext } from \"../core/context/OfflineContext\";\nimport { noOp } from \"../core/util/Interface\";\nimport { assertRange } from \"../core/util/Debug\";\n/**\n * Simple convolution created with decaying noise.\n * Generates an Impulse Response Buffer\n * with Tone.Offline then feeds the IR into ConvolverNode.\n * The impulse response generation is async, so you have\n * to wait until [[ready]] resolves before it will make a sound.\n *\n * Inspiration from [ReverbGen](https://github.com/adelespinasse/reverbGen).\n * Copyright (c) 2014 Alan deLespinasse Apache 2.0 License.\n *\n * @category Effect\n */\n\nexport class Reverb extends Effect {\n  constructor() {\n    super(optionsFromArguments(Reverb.getDefaults(), arguments, [\"decay\"]));\n    this.name = \"Reverb\";\n    /**\n     * Convolver node\n     */\n\n    this._convolver = this.context.createConvolver();\n    /**\n     * Resolves when the reverb buffer is generated. Whenever either [[decay]]\n     * or [[preDelay]] are set, you have to wait until [[ready]] resolves\n     * before the IR is generated with the latest values.\n     */\n\n    this.ready = Promise.resolve();\n    const options = optionsFromArguments(Reverb.getDefaults(), arguments, [\"decay\"]);\n    this._decay = options.decay;\n    this._preDelay = options.preDelay;\n    this.generate();\n    this.connectEffect(this._convolver);\n  }\n\n  static getDefaults() {\n    return Object.assign(Effect.getDefaults(), {\n      decay: 1.5,\n      preDelay: 0.01\n    });\n  }\n  /**\n   * The duration of the reverb.\n   */\n\n\n  get decay() {\n    return this._decay;\n  }\n\n  set decay(time) {\n    time = this.toSeconds(time);\n    assertRange(time, 0.001);\n    this._decay = time;\n    this.generate();\n  }\n  /**\n   * The amount of time before the reverb is fully ramped in.\n   */\n\n\n  get preDelay() {\n    return this._preDelay;\n  }\n\n  set preDelay(time) {\n    time = this.toSeconds(time);\n    assertRange(time, 0);\n    this._preDelay = time;\n    this.generate();\n  }\n  /**\n   * Generate the Impulse Response. Returns a promise while the IR is being generated.\n   * @return Promise which returns this object.\n   */\n\n\n  generate() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const previousReady = this.ready; // create a noise burst which decays over the duration in each channel\n\n      const context = new OfflineContext(2, this._decay + this._preDelay, this.context.sampleRate);\n      const noiseL = new Noise({\n        context\n      });\n      const noiseR = new Noise({\n        context\n      });\n      const merge = new Merge({\n        context\n      });\n      noiseL.connect(merge, 0, 0);\n      noiseR.connect(merge, 0, 1);\n      const gainNode = new Gain({\n        context\n      }).toDestination();\n      merge.connect(gainNode);\n      noiseL.start(0);\n      noiseR.start(0); // predelay\n\n      gainNode.gain.setValueAtTime(0, 0);\n      gainNode.gain.setValueAtTime(1, this._preDelay); // decay\n\n      gainNode.gain.exponentialApproachValueAtTime(0, this._preDelay, this.decay); // render the buffer\n\n      const renderPromise = context.render();\n      this.ready = renderPromise.then(noOp); // wait for the previous `ready` to resolve\n\n      yield previousReady; // set the buffer\n\n      this._convolver.buffer = (yield renderPromise).get();\n      return this;\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._convolver.disconnect();\n\n    return this;\n  }\n\n}","import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Split } from \"./Split\";\nimport { Add } from \"../../signal/Add\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Subtract } from \"../../signal/Subtract\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * Mid/Side processing separates the the 'mid' signal (which comes out of both the left and the right channel)\n * and the 'side' (which only comes out of the the side channels).\n * ```\n * Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right\n * Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and right\n * ```\n */\n\nexport class MidSideSplit extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(MidSideSplit.getDefaults(), arguments));\n    this.name = \"MidSideSplit\";\n    this._split = this.input = new Split({\n      channels: 2,\n      context: this.context\n    });\n    this._midAdd = new Add({\n      context: this.context\n    });\n    this.mid = new Multiply({\n      context: this.context,\n      value: Math.SQRT1_2\n    });\n    this._sideSubtract = new Subtract({\n      context: this.context\n    });\n    this.side = new Multiply({\n      context: this.context,\n      value: Math.SQRT1_2\n    });\n\n    this._split.connect(this._midAdd, 0);\n\n    this._split.connect(this._midAdd.addend, 1);\n\n    this._split.connect(this._sideSubtract, 0);\n\n    this._split.connect(this._sideSubtract.subtrahend, 1);\n\n    this._midAdd.connect(this.mid);\n\n    this._sideSubtract.connect(this.side);\n  }\n\n  dispose() {\n    super.dispose();\n    this.mid.dispose();\n    this.side.dispose();\n\n    this._midAdd.dispose();\n\n    this._sideSubtract.dispose();\n\n    this._split.dispose();\n\n    return this;\n  }\n\n}","import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Merge } from \"./Merge\";\nimport { Add } from \"../../signal/Add\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Subtract } from \"../../signal/Subtract\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * MidSideMerge merges the mid and side signal after they've been separated by [[MidSideMerge]]\n * ```\n * Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right\n * Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and righ\n * ```\n */\n\nexport class MidSideMerge extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(MidSideMerge.getDefaults(), arguments));\n    this.name = \"MidSideMerge\";\n    this.mid = new Gain({\n      context: this.context\n    });\n    this.side = new Gain({\n      context: this.context\n    });\n    this._left = new Add({\n      context: this.context\n    });\n    this._leftMult = new Multiply({\n      context: this.context,\n      value: Math.SQRT1_2\n    });\n    this._right = new Subtract({\n      context: this.context\n    });\n    this._rightMult = new Multiply({\n      context: this.context,\n      value: Math.SQRT1_2\n    });\n    this._merge = this.output = new Merge({\n      context: this.context\n    });\n    this.mid.fan(this._left);\n    this.side.connect(this._left.addend);\n    this.mid.connect(this._right);\n    this.side.connect(this._right.subtrahend);\n\n    this._left.connect(this._leftMult);\n\n    this._right.connect(this._rightMult);\n\n    this._leftMult.connect(this._merge, 0, 0);\n\n    this._rightMult.connect(this._merge, 0, 1);\n  }\n\n  dispose() {\n    super.dispose();\n    this.mid.dispose();\n    this.side.dispose();\n\n    this._leftMult.dispose();\n\n    this._rightMult.dispose();\n\n    this._left.dispose();\n\n    this._right.dispose();\n\n    return this;\n  }\n\n}","import { Effect } from \"./Effect\";\nimport { MidSideSplit } from \"../component/channel/MidSideSplit\";\nimport { MidSideMerge } from \"../component/channel/MidSideMerge\";\n/**\n * Mid/Side processing separates the the 'mid' signal\n * (which comes out of both the left and the right channel)\n * and the 'side' (which only comes out of the the side channels)\n * and effects them separately before being recombined.\n * Applies a Mid/Side seperation and recombination.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * This is a base-class for Mid/Side Effects.\n */\n\nexport class MidSideEffect extends Effect {\n  constructor(options) {\n    super(options);\n    this.name = \"MidSideEffect\";\n    this._midSideMerge = new MidSideMerge({\n      context: this.context\n    });\n    this._midSideSplit = new MidSideSplit({\n      context: this.context\n    });\n    this._midSend = this._midSideSplit.mid;\n    this._sideSend = this._midSideSplit.side;\n    this._midReturn = this._midSideMerge.mid;\n    this._sideReturn = this._midSideMerge.side; // the connections\n\n    this.effectSend.connect(this._midSideSplit);\n\n    this._midSideMerge.connect(this.effectReturn);\n  }\n  /**\n   * Connect the mid chain of the effect\n   */\n\n\n  connectEffectMid(...nodes) {\n    this._midSend.chain(...nodes, this._midReturn);\n  }\n  /**\n   * Connect the side chain of the effect\n   */\n\n\n  connectEffectSide(...nodes) {\n    this._sideSend.chain(...nodes, this._sideReturn);\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._midSideSplit.dispose();\n\n    this._midSideMerge.dispose();\n\n    this._midSend.dispose();\n\n    this._sideSend.dispose();\n\n    this._midReturn.dispose();\n\n    this._sideReturn.dispose();\n\n    return this;\n  }\n\n}","import { MidSideEffect } from \"../effect/MidSideEffect\";\nimport { Signal } from \"../signal/Signal\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Subtract } from \"../signal/Subtract\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { connect } from \"../core/context/ToneAudioNode\";\n/**\n * Applies a width factor to the mid/side seperation.\n * 0 is all mid and 1 is all side.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * ```\n * Mid *= 2*(1-width)<br>\n * Side *= 2*width\n * ```\n * @category Effect\n */\n\nexport class StereoWidener extends MidSideEffect {\n  constructor() {\n    super(optionsFromArguments(StereoWidener.getDefaults(), arguments, [\"width\"]));\n    this.name = \"StereoWidener\";\n    const options = optionsFromArguments(StereoWidener.getDefaults(), arguments, [\"width\"]);\n    this.width = new Signal({\n      context: this.context,\n      value: options.width,\n      units: \"normalRange\"\n    });\n    readOnly(this, [\"width\"]);\n    this._twoTimesWidthMid = new Multiply({\n      context: this.context,\n      value: 2\n    });\n    this._twoTimesWidthSide = new Multiply({\n      context: this.context,\n      value: 2\n    });\n    this._midMult = new Multiply({\n      context: this.context\n    });\n\n    this._twoTimesWidthMid.connect(this._midMult.factor);\n\n    this.connectEffectMid(this._midMult);\n    this._oneMinusWidth = new Subtract({\n      context: this.context\n    });\n\n    this._oneMinusWidth.connect(this._twoTimesWidthMid);\n\n    connect(this.context.getConstant(1), this._oneMinusWidth);\n    this.width.connect(this._oneMinusWidth.subtrahend);\n    this._sideMult = new Multiply({\n      context: this.context\n    });\n    this.width.connect(this._twoTimesWidthSide);\n\n    this._twoTimesWidthSide.connect(this._sideMult.factor);\n\n    this.connectEffectSide(this._sideMult);\n  }\n\n  static getDefaults() {\n    return Object.assign(MidSideEffect.getDefaults(), {\n      width: 0.5\n    });\n  }\n\n  dispose() {\n    super.dispose();\n    this.width.dispose();\n\n    this._midMult.dispose();\n\n    this._sideMult.dispose();\n\n    this._twoTimesWidthMid.dispose();\n\n    this._twoTimesWidthSide.dispose();\n\n    this._oneMinusWidth.dispose();\n\n    return this;\n  }\n\n}","import { StereoEffect } from \"./StereoEffect\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Signal } from \"../signal/Signal\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Tremolo modulates the amplitude of an incoming signal using an [[LFO]].\n * The effect is a stereo effect where the modulation phase is inverted in each channel.\n *\n * @example\n * // create a tremolo and start it's LFO\n * const tremolo = new Tone.Tremolo(9, 0.75).toDestination().start();\n * // route an oscillator through the tremolo and start it\n * const oscillator = new Tone.Oscillator().connect(tremolo).start();\n *\n * @category Effect\n */\n\nexport class Tremolo extends StereoEffect {\n  constructor() {\n    super(optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"]));\n    this.name = \"Tremolo\";\n    const options = optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"]);\n    this._lfoL = new LFO({\n      context: this.context,\n      type: options.type,\n      min: 1,\n      max: 0\n    });\n    this._lfoR = new LFO({\n      context: this.context,\n      type: options.type,\n      min: 1,\n      max: 0\n    });\n    this._amplitudeL = new Gain({\n      context: this.context\n    });\n    this._amplitudeR = new Gain({\n      context: this.context\n    });\n    this.frequency = new Signal({\n      context: this.context,\n      value: options.frequency,\n      units: \"frequency\"\n    });\n    this.depth = new Signal({\n      context: this.context,\n      value: options.depth,\n      units: \"normalRange\"\n    });\n    readOnly(this, [\"frequency\", \"depth\"]);\n    this.connectEffectLeft(this._amplitudeL);\n    this.connectEffectRight(this._amplitudeR);\n\n    this._lfoL.connect(this._amplitudeL.gain);\n\n    this._lfoR.connect(this._amplitudeR.gain);\n\n    this.frequency.fan(this._lfoL.frequency, this._lfoR.frequency);\n    this.depth.fan(this._lfoR.amplitude, this._lfoL.amplitude);\n    this.spread = options.spread;\n  }\n\n  static getDefaults() {\n    return Object.assign(StereoEffect.getDefaults(), {\n      frequency: 10,\n      type: \"sine\",\n      depth: 0.5,\n      spread: 180\n    });\n  }\n  /**\n   * Start the tremolo.\n   */\n\n\n  start(time) {\n    this._lfoL.start(time);\n\n    this._lfoR.start(time);\n\n    return this;\n  }\n  /**\n   * Stop the tremolo.\n   */\n\n\n  stop(time) {\n    this._lfoL.stop(time);\n\n    this._lfoR.stop(time);\n\n    return this;\n  }\n  /**\n   * Sync the effect to the transport.\n   */\n\n\n  sync() {\n    this._lfoL.sync();\n\n    this._lfoR.sync();\n\n    this.context.transport.syncSignal(this.frequency);\n    return this;\n  }\n  /**\n   * Unsync the filter from the transport\n   */\n\n\n  unsync() {\n    this._lfoL.unsync();\n\n    this._lfoR.unsync();\n\n    this.context.transport.unsyncSignal(this.frequency);\n    return this;\n  }\n  /**\n   * The oscillator type.\n   */\n\n\n  get type() {\n    return this._lfoL.type;\n  }\n\n  set type(type) {\n    this._lfoL.type = type;\n    this._lfoR.type = type;\n  }\n  /**\n   * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n   * When set to 180, LFO's will be panned hard left and right respectively.\n   */\n\n\n  get spread() {\n    return this._lfoR.phase - this._lfoL.phase; // 180\n  }\n\n  set spread(spread) {\n    this._lfoL.phase = 90 - spread / 2;\n    this._lfoR.phase = spread / 2 + 90;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._lfoL.dispose();\n\n    this._lfoR.dispose();\n\n    this._amplitudeL.dispose();\n\n    this._amplitudeR.dispose();\n\n    this.frequency.dispose();\n    this.depth.dispose();\n    return this;\n  }\n\n}","import { Effect } from \"./Effect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Delay } from \"../core/context/Delay\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * A Vibrato effect composed of a Tone.Delay and a Tone.LFO. The LFO\n * modulates the delayTime of the delay, causing the pitch to rise and fall.\n * @category Effect\n */\n\nexport class Vibrato extends Effect {\n  constructor() {\n    super(optionsFromArguments(Vibrato.getDefaults(), arguments, [\"frequency\", \"depth\"]));\n    this.name = \"Vibrato\";\n    const options = optionsFromArguments(Vibrato.getDefaults(), arguments, [\"frequency\", \"depth\"]);\n    this._delayNode = new Delay({\n      context: this.context,\n      delayTime: 0,\n      maxDelay: options.maxDelay\n    });\n    this._lfo = new LFO({\n      context: this.context,\n      type: options.type,\n      min: 0,\n      max: options.maxDelay,\n      frequency: options.frequency,\n      phase: -90 // offse the phase so the resting position is in the center\n\n    }).start().connect(this._delayNode.delayTime);\n    this.frequency = this._lfo.frequency;\n    this.depth = this._lfo.amplitude;\n    this.depth.value = options.depth;\n    readOnly(this, [\"frequency\", \"depth\"]);\n    this.effectSend.chain(this._delayNode, this.effectReturn);\n  }\n\n  static getDefaults() {\n    return Object.assign(Effect.getDefaults(), {\n      maxDelay: 0.005,\n      frequency: 5,\n      depth: 0.1,\n      type: \"sine\"\n    });\n  }\n  /**\n   * Type of oscillator attached to the Vibrato.\n   */\n\n\n  get type() {\n    return this._lfo.type;\n  }\n\n  set type(type) {\n    this._lfo.type = type;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._delayNode.dispose();\n\n    this._lfo.dispose();\n\n    this.frequency.dispose();\n    this.depth.dispose();\n    return this;\n  }\n\n}","import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Split } from \"../channel/Split\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { assert, assertRange } from \"../../core/util/Debug\";\n/**\n * Wrapper around the native Web Audio's [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).\n * Extracts FFT or Waveform data from the incoming signal.\n * @category Component\n */\n\nexport class Analyser extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Analyser.getDefaults(), arguments, [\"type\", \"size\"]));\n    this.name = \"Analyser\";\n    /**\n     * The analyser node.\n     */\n\n    this._analysers = [];\n    /**\n     * The buffer that the FFT data is written to\n     */\n\n    this._buffers = [];\n    const options = optionsFromArguments(Analyser.getDefaults(), arguments, [\"type\", \"size\"]);\n    this.input = this.output = this._gain = new Gain({\n      context: this.context\n    });\n    this._split = new Split({\n      context: this.context,\n      channels: options.channels\n    });\n    this.input.connect(this._split);\n    assertRange(options.channels, 1); // create the analysers\n\n    for (let channel = 0; channel < options.channels; channel++) {\n      this._analysers[channel] = this.context.createAnalyser();\n\n      this._split.connect(this._analysers[channel], channel, 0);\n    } // set the values initially\n\n\n    this.size = options.size;\n    this.type = options.type;\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      size: 1024,\n      smoothing: 0.8,\n      type: \"fft\",\n      channels: 1\n    });\n  }\n  /**\n   * Run the analysis given the current settings. If [[channels]] = 1,\n   * it will return a Float32Array. If [[channels]] > 1, it will\n   * return an array of Float32Arrays where each index in the array\n   * represents the analysis done on a channel.\n   */\n\n\n  getValue() {\n    this._analysers.forEach((analyser, index) => {\n      const buffer = this._buffers[index];\n\n      if (this._type === \"fft\") {\n        analyser.getFloatFrequencyData(buffer);\n      } else if (this._type === \"waveform\") {\n        analyser.getFloatTimeDomainData(buffer);\n      }\n    });\n\n    if (this.channels === 1) {\n      return this._buffers[0];\n    } else {\n      return this._buffers;\n    }\n  }\n  /**\n   * The size of analysis. This must be a power of two in the range 16 to 16384.\n   */\n\n\n  get size() {\n    return this._analysers[0].frequencyBinCount;\n  }\n\n  set size(size) {\n    this._analysers.forEach((analyser, index) => {\n      analyser.fftSize = size * 2;\n      this._buffers[index] = new Float32Array(size);\n    });\n  }\n  /**\n   * The number of channels the analyser does the analysis on. Channel\n   * separation is done using [[Split]]\n   */\n\n\n  get channels() {\n    return this._analysers.length;\n  }\n  /**\n   * The analysis function returned by analyser.getValue(), either \"fft\" or \"waveform\".\n   */\n\n\n  get type() {\n    return this._type;\n  }\n\n  set type(type) {\n    assert(type === \"waveform\" || type === \"fft\", `Analyser: invalid type: ${type}`);\n    this._type = type;\n  }\n  /**\n   * 0 represents no time averaging with the last analysis frame.\n   */\n\n\n  get smoothing() {\n    return this._analysers[0].smoothingTimeConstant;\n  }\n\n  set smoothing(val) {\n    this._analysers.forEach(a => a.smoothingTimeConstant = val);\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._analysers.forEach(a => a.disconnect());\n\n    this._split.dispose();\n\n    this._gain.dispose();\n\n    return this;\n  }\n\n}","import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Analyser } from \"./Analyser\";\n/**\n * The base class for Metering classes.\n */\n\nexport class MeterBase extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(MeterBase.getDefaults(), arguments));\n    this.name = \"MeterBase\";\n    this.input = this.output = this._analyser = new Analyser({\n      context: this.context,\n      size: 256,\n      type: \"waveform\"\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._analyser.dispose();\n\n    return this;\n  }\n\n}","import { gainToDb } from \"../../core/type/Conversions\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase } from \"./MeterBase\";\nimport { warn } from \"../../core/util/Debug\";\nimport { Analyser } from \"./Analyser\";\n/**\n * Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)\n * of an input signal. It can also get the raw value of the input signal.\n *\n * @example\n * const meter = new Tone.Meter();\n * const mic = new Tone.UserMedia();\n * mic.open();\n * // connect mic to the meter\n * mic.connect(meter);\n * // the current level of the mic\n * const level = meter.getValue();\n * @category Component\n */\n\nexport class Meter extends MeterBase {\n  constructor() {\n    super(optionsFromArguments(Meter.getDefaults(), arguments, [\"smoothing\"]));\n    this.name = \"Meter\";\n    /**\n     * The previous frame's value\n     */\n\n    this._rms = 0;\n    const options = optionsFromArguments(Meter.getDefaults(), arguments, [\"smoothing\"]);\n    this.input = this.output = this._analyser = new Analyser({\n      context: this.context,\n      size: 256,\n      type: \"waveform\",\n      channels: options.channels\n    });\n    this.smoothing = options.smoothing, this.normalRange = options.normalRange;\n  }\n\n  static getDefaults() {\n    return Object.assign(MeterBase.getDefaults(), {\n      smoothing: 0.8,\n      normalRange: false,\n      channels: 1\n    });\n  }\n  /**\n   * Use [[getValue]] instead. For the previous getValue behavior, use DCMeter.\n   * @deprecated\n   */\n\n\n  getLevel() {\n    warn(\"'getLevel' has been changed to 'getValue'\");\n    return this.getValue();\n  }\n  /**\n   * Get the current value of the incoming signal.\n   * Output is in decibels when [[normalRange]] is `false`.\n   * If [[channels]] = 1, then the output is a single number\n   * representing the value of the input signal. When [[channels]] > 1,\n   * then each channel is returned as a value in a number array.\n   */\n\n\n  getValue() {\n    const aValues = this._analyser.getValue();\n\n    const channelValues = this.channels === 1 ? [aValues] : aValues;\n    const vals = channelValues.map(values => {\n      const totalSquared = values.reduce((total, current) => total + current * current, 0);\n      const rms = Math.sqrt(totalSquared / values.length); // the rms can only fall at the rate of the smoothing\n      // but can jump up instantly\n\n      this._rms = Math.max(rms, this._rms * this.smoothing);\n      return this.normalRange ? this._rms : gainToDb(this._rms);\n    });\n\n    if (this.channels === 1) {\n      return vals[0];\n    } else {\n      return vals;\n    }\n  }\n  /**\n   * The number of channels of analysis.\n   */\n\n\n  get channels() {\n    return this._analyser.channels;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._analyser.dispose();\n\n    return this;\n  }\n\n}","import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { dbToGain } from \"../../core/type/Conversions\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase } from \"./MeterBase\";\n/**\n * Get the current frequency data of the connected audio source using a fast Fourier transform.\n * @category Component\n */\n\nexport class FFT extends MeterBase {\n  constructor() {\n    super(optionsFromArguments(FFT.getDefaults(), arguments, [\"size\"]));\n    this.name = \"FFT\";\n    const options = optionsFromArguments(FFT.getDefaults(), arguments, [\"size\"]);\n    this.normalRange = options.normalRange;\n    this._analyser.type = \"fft\";\n    this.size = options.size;\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      normalRange: false,\n      size: 1024,\n      smoothing: 0.8\n    });\n  }\n  /**\n   * Gets the current frequency data from the connected audio source.\n   * Returns the frequency data of length [[size]] as a Float32Array of decibel values.\n   */\n\n\n  getValue() {\n    const values = this._analyser.getValue();\n\n    return values.map(v => this.normalRange ? dbToGain(v) : v);\n  }\n  /**\n   * The size of analysis. This must be a power of two in the range 16 to 16384.\n   * Determines the size of the array returned by [[getValue]] (i.e. the number of\n   * frequency bins). Large FFT sizes may be costly to compute.\n   */\n\n\n  get size() {\n    return this._analyser.size;\n  }\n\n  set size(size) {\n    this._analyser.size = size;\n  }\n  /**\n   * 0 represents no time averaging with the last analysis frame.\n   */\n\n\n  get smoothing() {\n    return this._analyser.smoothing;\n  }\n\n  set smoothing(val) {\n    this._analyser.smoothing = val;\n  }\n\n}","import { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase } from \"./MeterBase\";\n/**\n * DCMeter gets the raw value of the input signal at the current time.\n *\n * @example\n * const meter = new Tone.DCMeter();\n * const mic = new Tone.UserMedia();\n * mic.open();\n * // connect mic to the meter\n * mic.connect(meter);\n * // the current level of the mic\n * const level = meter.getValue();\n * @category Component\n */\n\nexport class DCMeter extends MeterBase {\n  constructor() {\n    super(optionsFromArguments(DCMeter.getDefaults(), arguments));\n    this.name = \"DCMeter\";\n    this._analyser.type = \"waveform\";\n    this._analyser.size = 256;\n  }\n  /**\n   * Get the signal value of the incoming signal\n   */\n\n\n  getValue() {\n    const value = this._analyser.getValue();\n\n    return value[0];\n  }\n\n}","import { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase } from \"./MeterBase\";\n/**\n * Get the current waveform data of the connected audio source.\n * @category Component\n */\n\nexport class Waveform extends MeterBase {\n  constructor() {\n    super(optionsFromArguments(Waveform.getDefaults(), arguments, [\"size\"]));\n    this.name = \"Waveform\";\n    const options = optionsFromArguments(Waveform.getDefaults(), arguments, [\"size\"]);\n    this._analyser.type = \"waveform\";\n    this.size = options.size;\n  }\n\n  static getDefaults() {\n    return Object.assign(MeterBase.getDefaults(), {\n      size: 1024\n    });\n  }\n  /**\n   * Return the waveform for the current time as a Float32Array where each value in the array\n   * represents a sample in the waveform.\n   */\n\n\n  getValue() {\n    return this._analyser.getValue();\n  }\n  /**\n   * The size of analysis. This must be a power of two in the range 16 to 16384.\n   * Determines the size of the array returned by [[getValue]].\n   */\n\n\n  get size() {\n    return this._analyser.size;\n  }\n\n  set size(size) {\n    this._analyser.size = size;\n  }\n\n}","import { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * Solo lets you isolate a specific audio stream. When an instance is set to `solo=true`,\n * it will mute all other instances of Solo.\n * @example\n * const soloA = new Tone.Solo().toDestination();\n * const oscA = new Tone.Oscillator(\"C4\", \"sawtooth\").connect(soloA);\n * const soloB = new Tone.Solo().toDestination();\n * const oscB = new Tone.Oscillator(\"E4\", \"square\").connect(soloB);\n * soloA.solo = true;\n * // no audio will pass through soloB\n * @category Component\n */\n\nexport class Solo extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Solo.getDefaults(), arguments, [\"solo\"]));\n    this.name = \"Solo\";\n    const options = optionsFromArguments(Solo.getDefaults(), arguments, [\"solo\"]);\n    this.input = this.output = new Gain({\n      context: this.context\n    });\n\n    if (!Solo._allSolos.has(this.context)) {\n      Solo._allSolos.set(this.context, new Set());\n    }\n\n    Solo._allSolos.get(this.context).add(this); // set initially\n\n\n    this.solo = options.solo;\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      solo: false\n    });\n  }\n  /**\n   * Isolates this instance and mutes all other instances of Solo.\n   * Only one instance can be soloed at a time. A soloed\n   * instance will report `solo=false` when another instance is soloed.\n   */\n\n\n  get solo() {\n    return this._isSoloed();\n  }\n\n  set solo(solo) {\n    if (solo) {\n      this._addSolo();\n    } else {\n      this._removeSolo();\n    }\n\n    Solo._allSolos.get(this.context).forEach(instance => instance._updateSolo());\n  }\n  /**\n   * If the current instance is muted, i.e. another instance is soloed\n   */\n\n\n  get muted() {\n    return this.input.gain.value === 0;\n  }\n  /**\n   * Add this to the soloed array\n   */\n\n\n  _addSolo() {\n    if (!Solo._soloed.has(this.context)) {\n      Solo._soloed.set(this.context, new Set());\n    }\n\n    Solo._soloed.get(this.context).add(this);\n  }\n  /**\n   * Remove this from the soloed array\n   */\n\n\n  _removeSolo() {\n    if (Solo._soloed.has(this.context)) {\n      Solo._soloed.get(this.context).delete(this);\n    }\n  }\n  /**\n   * Is this on the soloed array\n   */\n\n\n  _isSoloed() {\n    return Solo._soloed.has(this.context) && Solo._soloed.get(this.context).has(this);\n  }\n  /**\n   * Returns true if no one is soloed\n   */\n\n\n  _noSolos() {\n    // either does not have any soloed added\n    return !Solo._soloed.has(this.context) || // or has a solo set but doesn't include any items\n    Solo._soloed.has(this.context) && Solo._soloed.get(this.context).size === 0;\n  }\n  /**\n   * Solo the current instance and unsolo all other instances.\n   */\n\n\n  _updateSolo() {\n    if (this._isSoloed()) {\n      this.input.gain.value = 1;\n    } else if (this._noSolos()) {\n      // no one is soloed\n      this.input.gain.value = 1;\n    } else {\n      this.input.gain.value = 0;\n    }\n  }\n\n  dispose() {\n    super.dispose();\n\n    Solo._allSolos.get(this.context).delete(this);\n\n    this._removeSolo();\n\n    return this;\n  }\n\n}\n/**\n * Hold all of the solo'ed tracks belonging to a specific context\n */\n\nSolo._allSolos = new Map();\n/**\n * Hold the currently solo'ed instance(s)\n */\n\nSolo._soloed = new Map();","import { readOnly } from \"../../core/util/Interface\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Panner } from \"./Panner\";\nimport { Volume } from \"./Volume\";\n/**\n * PanVol is a Tone.Panner and Tone.Volume in one.\n * @example\n * // pan the incoming signal left and drop the volume\n * const panVol = new Tone.PanVol(-0.25, -12).toDestination();\n * const osc = new Tone.Oscillator().connect(panVol).start();\n * @category Component\n */\n\nexport class PanVol extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(PanVol.getDefaults(), arguments, [\"pan\", \"volume\"]));\n    this.name = \"PanVol\";\n    const options = optionsFromArguments(PanVol.getDefaults(), arguments, [\"pan\", \"volume\"]);\n    this._panner = this.input = new Panner({\n      context: this.context,\n      pan: options.pan,\n      channelCount: options.channelCount\n    });\n    this.pan = this._panner.pan;\n    this._volume = this.output = new Volume({\n      context: this.context,\n      volume: options.volume\n    });\n    this.volume = this._volume.volume; // connections\n\n    this._panner.connect(this._volume);\n\n    this.mute = options.mute;\n    readOnly(this, [\"pan\", \"volume\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      mute: false,\n      pan: 0,\n      volume: 0,\n      channelCount: 1\n    });\n  }\n  /**\n   * Mute/unmute the volume\n   */\n\n\n  get mute() {\n    return this._volume.mute;\n  }\n\n  set mute(mute) {\n    this._volume.mute = mute;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._panner.dispose();\n\n    this.pan.dispose();\n\n    this._volume.dispose();\n\n    this.volume.dispose();\n    return this;\n  }\n\n}","import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Solo } from \"./Solo\";\nimport { PanVol } from \"./PanVol\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Gain } from \"../../core/context/Gain\";\n/**\n * Channel provides a channel strip interface with volume, pan, solo and mute controls.\n * See [[PanVol]] and [[Solo]]\n * @example\n * // pan the incoming signal left and drop the volume 12db\n * const channel = new Tone.Channel(-0.25, -12);\n * @category Component\n */\n\nexport class Channel extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"]));\n    this.name = \"Channel\";\n    const options = optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"]);\n    this._solo = this.input = new Solo({\n      solo: options.solo,\n      context: this.context\n    });\n    this._panVol = this.output = new PanVol({\n      context: this.context,\n      pan: options.pan,\n      volume: options.volume,\n      mute: options.mute\n    });\n    this.pan = this._panVol.pan;\n    this.volume = this._panVol.volume;\n\n    this._solo.connect(this._panVol);\n\n    readOnly(this, [\"pan\", \"volume\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      pan: 0,\n      volume: 0,\n      mute: false,\n      solo: false\n    });\n  }\n  /**\n   * Solo/unsolo the channel. Soloing is only relative to other [[Channels]] and [[Solo]] instances\n   */\n\n\n  get solo() {\n    return this._solo.solo;\n  }\n\n  set solo(solo) {\n    this._solo.solo = solo;\n  }\n  /**\n   * If the current instance is muted, i.e. another instance is soloed,\n   * or the channel is muted\n   */\n\n\n  get muted() {\n    return this._solo.muted || this.mute;\n  }\n  /**\n   * Mute/unmute the volume\n   */\n\n\n  get mute() {\n    return this._panVol.mute;\n  }\n\n  set mute(mute) {\n    this._panVol.mute = mute;\n  }\n  /**\n   * Get the gain node belonging to the bus name. Create it if\n   * it doesn't exist\n   * @param name The bus name\n   */\n\n\n  _getBus(name) {\n    if (!Channel.buses.has(name)) {\n      Channel.buses.set(name, new Gain({\n        context: this.context\n      }));\n    }\n\n    return Channel.buses.get(name);\n  }\n  /**\n   * Send audio to another channel using a string. `send` is a lot like\n   * [[connect]], except it uses a string instead of an object. This can\n   * be useful in large applications to decouple sections since [[send]]\n   * and [[receive]] can be invoked separately in order to connect an object\n   * @param name The channel name to send the audio\n   * @param volume The amount of the signal to send.\n   * \tDefaults to 0db, i.e. send the entire signal\n   * @returns Returns the gain node of this connection.\n   */\n\n\n  send(name, volume = 0) {\n    const bus = this._getBus(name);\n\n    const sendKnob = new Gain({\n      context: this.context,\n      units: \"decibels\",\n      gain: volume\n    });\n    this.connect(sendKnob);\n    sendKnob.connect(bus);\n    return sendKnob;\n  }\n  /**\n   * Receive audio from a channel which was connected with [[send]].\n   * @param name The channel name to receive audio from.\n   */\n\n\n  receive(name) {\n    const bus = this._getBus(name);\n\n    bus.connect(this);\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._panVol.dispose();\n\n    this.pan.dispose();\n    this.volume.dispose();\n\n    this._solo.dispose();\n\n    return this;\n  }\n\n}\n/**\n * Store the send/receive channels by name.\n */\n\nChannel.buses = new Map();","import { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Filter } from \"../filter/Filter\";\n/**\n * Split the incoming signal into three bands (low, mid, high)\n * with two crossover frequency controls.\n * ```\n *            +----------------------+\n *          +-> input < lowFrequency +------------------> low\n *          | +----------------------+\n *          |\n *          | +--------------------------------------+\n * input ---+-> lowFrequency < input < highFrequency +--> mid\n *          | +--------------------------------------+\n *          |\n *          | +-----------------------+\n *          +-> highFrequency < input +-----------------> high\n *            +-----------------------+\n * ```\n * @category Component\n */\n\nexport class MultibandSplit extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]));\n    this.name = \"MultibandSplit\";\n    /**\n     * the input\n     */\n\n    this.input = new Gain({\n      context: this.context\n    });\n    /**\n     * no output node, use either low, mid or high outputs\n     */\n\n    this.output = undefined;\n    /**\n     * The low band.\n     */\n\n    this.low = new Filter({\n      context: this.context,\n      frequency: 0,\n      type: \"lowpass\"\n    });\n    /**\n     * the lower filter of the mid band\n     */\n\n    this._lowMidFilter = new Filter({\n      context: this.context,\n      frequency: 0,\n      type: \"highpass\"\n    });\n    /**\n     * The mid band output.\n     */\n\n    this.mid = new Filter({\n      context: this.context,\n      frequency: 0,\n      type: \"lowpass\"\n    });\n    /**\n     * The high band output.\n     */\n\n    this.high = new Filter({\n      context: this.context,\n      frequency: 0,\n      type: \"highpass\"\n    });\n    this._internalChannels = [this.low, this.mid, this.high];\n    const options = optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]);\n    this.lowFrequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: options.lowFrequency\n    });\n    this.highFrequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: options.highFrequency\n    });\n    this.Q = new Signal({\n      context: this.context,\n      units: \"positive\",\n      value: options.Q\n    });\n    this.input.fan(this.low, this.high);\n    this.input.chain(this._lowMidFilter, this.mid); // the frequency control signal\n\n    this.lowFrequency.fan(this.low.frequency, this._lowMidFilter.frequency);\n    this.highFrequency.fan(this.mid.frequency, this.high.frequency); // the Q value\n\n    this.Q.connect(this.low.Q);\n    this.Q.connect(this._lowMidFilter.Q);\n    this.Q.connect(this.mid.Q);\n    this.Q.connect(this.high.Q);\n    readOnly(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      Q: 1,\n      highFrequency: 2500,\n      lowFrequency: 400\n    });\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n    writable(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n    this.low.dispose();\n\n    this._lowMidFilter.dispose();\n\n    this.mid.dispose();\n    this.high.dispose();\n    this.lowFrequency.dispose();\n    this.highFrequency.dispose();\n    this.Q.dispose();\n    return this;\n  }\n\n}","import { ToneAudioNode } from \"./ToneAudioNode\";\nimport { Param } from \"./Param\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization\";\n/**\n * Tone.Listener is a thin wrapper around the AudioListener. Listener combined\n * with [[Panner3D]] makes up the Web Audio API's 3D panning system. Panner3D allows you\n * to place sounds in 3D and Listener allows you to navigate the 3D sound environment from\n * a first-person perspective. There is only one listener per audio context.\n */\n\nexport class Listener extends ToneAudioNode {\n  constructor() {\n    super(...arguments);\n    this.name = \"Listener\";\n    this.positionX = new Param({\n      context: this.context,\n      param: this.context.rawContext.listener.positionX\n    });\n    this.positionY = new Param({\n      context: this.context,\n      param: this.context.rawContext.listener.positionY\n    });\n    this.positionZ = new Param({\n      context: this.context,\n      param: this.context.rawContext.listener.positionZ\n    });\n    this.forwardX = new Param({\n      context: this.context,\n      param: this.context.rawContext.listener.forwardX\n    });\n    this.forwardY = new Param({\n      context: this.context,\n      param: this.context.rawContext.listener.forwardY\n    });\n    this.forwardZ = new Param({\n      context: this.context,\n      param: this.context.rawContext.listener.forwardZ\n    });\n    this.upX = new Param({\n      context: this.context,\n      param: this.context.rawContext.listener.upX\n    });\n    this.upY = new Param({\n      context: this.context,\n      param: this.context.rawContext.listener.upY\n    });\n    this.upZ = new Param({\n      context: this.context,\n      param: this.context.rawContext.listener.upZ\n    });\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      positionX: 0,\n      positionY: 0,\n      positionZ: 0,\n      forwardX: 0,\n      forwardY: 0,\n      forwardZ: -1,\n      upX: 0,\n      upY: 1,\n      upZ: 0\n    });\n  }\n\n  dispose() {\n    super.dispose();\n    this.positionX.dispose();\n    this.positionY.dispose();\n    this.positionZ.dispose();\n    this.forwardX.dispose();\n    this.forwardY.dispose();\n    this.forwardZ.dispose();\n    this.upX.dispose();\n    this.upY.dispose();\n    this.upZ.dispose();\n    return this;\n  }\n\n} //-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\n\nonContextInit(context => {\n  context.listener = new Listener({\n    context\n  });\n});\nonContextClose(context => {\n  context.listener.dispose();\n});","import { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport \"../../core/context/Listener\";\n/**\n * A spatialized panner node which supports equalpower or HRTF panning.\n * @category Component\n */\n\nexport class Panner3D extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Panner3D.getDefaults(), arguments, [\"positionX\", \"positionY\", \"positionZ\"]));\n    this.name = \"Panner3D\";\n    const options = optionsFromArguments(Panner3D.getDefaults(), arguments, [\"positionX\", \"positionY\", \"positionZ\"]);\n    this._panner = this.input = this.output = this.context.createPanner(); // set some values\n\n    this.panningModel = options.panningModel;\n    this.maxDistance = options.maxDistance;\n    this.distanceModel = options.distanceModel;\n    this.coneOuterGain = options.coneOuterGain;\n    this.coneOuterAngle = options.coneOuterAngle;\n    this.coneInnerAngle = options.coneInnerAngle;\n    this.refDistance = options.refDistance;\n    this.rolloffFactor = options.rolloffFactor;\n    this.positionX = new Param({\n      context: this.context,\n      param: this._panner.positionX,\n      value: options.positionX\n    });\n    this.positionY = new Param({\n      context: this.context,\n      param: this._panner.positionY,\n      value: options.positionY\n    });\n    this.positionZ = new Param({\n      context: this.context,\n      param: this._panner.positionZ,\n      value: options.positionZ\n    });\n    this.orientationX = new Param({\n      context: this.context,\n      param: this._panner.orientationX,\n      value: options.orientationX\n    });\n    this.orientationY = new Param({\n      context: this.context,\n      param: this._panner.orientationY,\n      value: options.orientationY\n    });\n    this.orientationZ = new Param({\n      context: this.context,\n      param: this._panner.orientationZ,\n      value: options.orientationZ\n    });\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      coneInnerAngle: 360,\n      coneOuterAngle: 360,\n      coneOuterGain: 0,\n      distanceModel: \"inverse\",\n      maxDistance: 10000,\n      orientationX: 0,\n      orientationY: 0,\n      orientationZ: 0,\n      panningModel: \"equalpower\",\n      positionX: 0,\n      positionY: 0,\n      positionZ: 0,\n      refDistance: 1,\n      rolloffFactor: 1\n    });\n  }\n  /**\n   * Sets the position of the source in 3d space.\n   */\n\n\n  setPosition(x, y, z) {\n    this.positionX.value = x;\n    this.positionY.value = y;\n    this.positionZ.value = z;\n    return this;\n  }\n  /**\n   * Sets the orientation of the source in 3d space.\n   */\n\n\n  setOrientation(x, y, z) {\n    this.orientationX.value = x;\n    this.orientationY.value = y;\n    this.orientationZ.value = z;\n    return this;\n  }\n  /**\n   * The panning model. Either \"equalpower\" or \"HRTF\".\n   */\n\n\n  get panningModel() {\n    return this._panner.panningModel;\n  }\n\n  set panningModel(val) {\n    this._panner.panningModel = val;\n  }\n  /**\n   * A reference distance for reducing volume as source move further from the listener\n   */\n\n\n  get refDistance() {\n    return this._panner.refDistance;\n  }\n\n  set refDistance(val) {\n    this._panner.refDistance = val;\n  }\n  /**\n   * Describes how quickly the volume is reduced as source moves away from listener.\n   */\n\n\n  get rolloffFactor() {\n    return this._panner.rolloffFactor;\n  }\n\n  set rolloffFactor(val) {\n    this._panner.rolloffFactor = val;\n  }\n  /**\n   * The distance model used by,  \"linear\", \"inverse\", or \"exponential\".\n   */\n\n\n  get distanceModel() {\n    return this._panner.distanceModel;\n  }\n\n  set distanceModel(val) {\n    this._panner.distanceModel = val;\n  }\n  /**\n   * The angle, in degrees, inside of which there will be no volume reduction\n   */\n\n\n  get coneInnerAngle() {\n    return this._panner.coneInnerAngle;\n  }\n\n  set coneInnerAngle(val) {\n    this._panner.coneInnerAngle = val;\n  }\n  /**\n   * The angle, in degrees, outside of which the volume will be reduced\n   * to a constant value of coneOuterGain\n   */\n\n\n  get coneOuterAngle() {\n    return this._panner.coneOuterAngle;\n  }\n\n  set coneOuterAngle(val) {\n    this._panner.coneOuterAngle = val;\n  }\n  /**\n   * The gain outside of the coneOuterAngle\n   */\n\n\n  get coneOuterGain() {\n    return this._panner.coneOuterGain;\n  }\n\n  set coneOuterGain(val) {\n    this._panner.coneOuterGain = val;\n  }\n  /**\n   * The maximum distance between source and listener,\n   * after which the volume will not be reduced any further.\n   */\n\n\n  get maxDistance() {\n    return this._panner.maxDistance;\n  }\n\n  set maxDistance(val) {\n    this._panner.maxDistance = val;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._panner.disconnect();\n\n    this.orientationX.dispose();\n    this.orientationY.dispose();\n    this.orientationZ.dispose();\n    this.positionX.dispose();\n    this.positionY.dispose();\n    this.positionZ.dispose();\n    return this;\n  }\n\n}","import { __awaiter } from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { assert } from \"../../core/util/Debug\";\nimport { theWindow } from \"../../core/context/AudioContext\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * This is only natively supported in Chrome and Firefox.\n * For a cross-browser shim, install (audio-recorder-polyfill)[https://www.npmjs.com/package/audio-recorder-polyfill].\n * @example\n * const recorder = new Tone.Recorder();\n * const synth = new Tone.Synth().connect(recorder);\n * // start recording\n * recorder.start();\n * // generate a few notes\n * synth.triggerAttackRelease(\"C3\", 0.5);\n * synth.triggerAttackRelease(\"C4\", 0.5, \"+1\");\n * synth.triggerAttackRelease(\"C5\", 0.5, \"+2\");\n * // wait for the notes to end and stop the recording\n * setTimeout(async () => {\n * \t// the recorded audio is returned as a blob\n * \tconst recording = await recorder.stop();\n * \t// download the recording by creating an anchor element and blob url\n * \tconst url = URL.createObjectURL(recording);\n * \tconst anchor = document.createElement(\"a\");\n * \tanchor.download = \"recording.webm\";\n * \tanchor.href = url;\n * \tanchor.click();\n * }, 4000);\n */\n\nexport class Recorder extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Recorder.getDefaults(), arguments, [\"gain\", \"units\"]));\n    this.name = \"Recorder\";\n    const options = optionsFromArguments(Recorder.getDefaults(), arguments, [\"gain\", \"units\"]);\n    this.input = new Gain({\n      context: this.context\n    });\n    assert(Recorder.supported, \"Media Recorder API is not available\");\n    this._stream = this.context.createMediaStreamDestination();\n    this.input.connect(this._stream);\n    this._recorder = new MediaRecorder(this._stream.stream, {\n      mimeType: options.mimeType\n    });\n  }\n\n  static getDefaults() {\n    return ToneAudioNode.getDefaults();\n  }\n  /**\n   * The mime type is the format that the audio is encoded in. For Chrome\n   * that is typically webm encoded as \"vorbis\".\n   */\n\n\n  get mimeType() {\n    return this._recorder.mimeType;\n  }\n  /**\n   * Test if your platform supports the Media Recorder API. If it's not available,\n   * try installing this (polyfill)[https://www.npmjs.com/package/audio-recorder-polyfill].\n   */\n\n\n  static get supported() {\n    return theWindow !== null && Reflect.has(theWindow, \"MediaRecorder\");\n  }\n  /**\n   * Get the playback state of the Recorder, either \"started\", \"stopped\" or \"paused\"\n   */\n\n\n  get state() {\n    if (this._recorder.state === \"inactive\") {\n      return \"stopped\";\n    } else if (this._recorder.state === \"paused\") {\n      return \"paused\";\n    } else {\n      return \"started\";\n    }\n  }\n\n  start() {\n    return __awaiter(this, void 0, void 0, function* () {\n      assert(this.state !== \"started\", \"Recorder is already started\");\n      const startPromise = new Promise(done => {\n        const handleStart = () => {\n          this._recorder.removeEventListener(\"start\", handleStart, false);\n\n          done();\n        };\n\n        this._recorder.addEventListener(\"start\", handleStart, false);\n      });\n\n      this._recorder.start();\n\n      return yield startPromise;\n    });\n  }\n\n  stop() {\n    return __awaiter(this, void 0, void 0, function* () {\n      assert(this.state !== \"stopped\", \"Recorder is not started\");\n      const dataPromise = new Promise(done => {\n        const handleData = e => {\n          this._recorder.removeEventListener(\"dataavailable\", handleData, false);\n\n          done(e.data);\n        };\n\n        this._recorder.addEventListener(\"dataavailable\", handleData, false);\n      });\n\n      this._recorder.stop();\n\n      return yield dataPromise;\n    });\n  }\n\n  pause() {\n    assert(this.state === \"started\", \"Recorder must be started\");\n\n    this._recorder.pause();\n\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n    this.input.dispose();\n\n    this._stream.disconnect();\n\n    return this;\n  }\n\n}","import { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * Compressor is a thin wrapper around the Web Audio\n * [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).\n * Compression reduces the volume of loud sounds or amplifies quiet sounds\n * by narrowing or \"compressing\" an audio signal's dynamic range.\n * Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).\n * @example\n * const comp = new Tone.Compressor(-30, 3);\n * @category Component\n */\n\nexport class Compressor extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Compressor.getDefaults(), arguments, [\"threshold\", \"ratio\"]));\n    this.name = \"Compressor\";\n    /**\n     * the compressor node\n     */\n\n    this._compressor = this.context.createDynamicsCompressor();\n    this.input = this._compressor;\n    this.output = this._compressor;\n    const options = optionsFromArguments(Compressor.getDefaults(), arguments, [\"threshold\", \"ratio\"]);\n    this.threshold = new Param({\n      minValue: this._compressor.threshold.minValue,\n      maxValue: this._compressor.threshold.maxValue,\n      context: this.context,\n      convert: false,\n      param: this._compressor.threshold,\n      units: \"decibels\",\n      value: options.threshold\n    });\n    this.attack = new Param({\n      minValue: this._compressor.attack.minValue,\n      maxValue: this._compressor.attack.maxValue,\n      context: this.context,\n      param: this._compressor.attack,\n      units: \"time\",\n      value: options.attack\n    });\n    this.release = new Param({\n      minValue: this._compressor.release.minValue,\n      maxValue: this._compressor.release.maxValue,\n      context: this.context,\n      param: this._compressor.release,\n      units: \"time\",\n      value: options.release\n    });\n    this.knee = new Param({\n      minValue: this._compressor.knee.minValue,\n      maxValue: this._compressor.knee.maxValue,\n      context: this.context,\n      convert: false,\n      param: this._compressor.knee,\n      units: \"decibels\",\n      value: options.knee\n    });\n    this.ratio = new Param({\n      minValue: this._compressor.ratio.minValue,\n      maxValue: this._compressor.ratio.maxValue,\n      context: this.context,\n      convert: false,\n      param: this._compressor.ratio,\n      units: \"positive\",\n      value: options.ratio\n    }); // set the defaults\n\n    readOnly(this, [\"knee\", \"release\", \"attack\", \"ratio\", \"threshold\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      attack: 0.003,\n      knee: 30,\n      ratio: 12,\n      release: 0.25,\n      threshold: -24\n    });\n  }\n  /**\n   * A read-only decibel value for metering purposes, representing the current amount of gain\n   * reduction that the compressor is applying to the signal. If fed no signal the value will be 0 (no gain reduction).\n   */\n\n\n  get reduction() {\n    return this._compressor.reduction;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._compressor.disconnect();\n\n    this.attack.dispose();\n    this.release.dispose();\n    this.threshold.dispose();\n    this.ratio.dispose();\n    this.knee.dispose();\n    return this;\n  }\n\n}","import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { GreaterThan } from \"../../signal/GreaterThan\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { Follower } from \"../analysis/Follower\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { dbToGain, gainToDb } from \"../../core/type/Conversions\";\n/**\n * Gate only passes a signal through when the incoming\n * signal exceeds a specified threshold. It uses [[Follower]] to follow the ampltiude\n * of the incoming signal and compares it to the [[threshold]] value using [[GreaterThan]].\n *\n * @example\n * const gate = new Tone.Gate(-30, 0.2).toDestination();\n * const mic = new Tone.UserMedia().connect(gate);\n * // the gate will only pass through the incoming\n * // signal when it's louder than -30db\n */\n\nexport class Gate extends ToneAudioNode {\n  constructor() {\n    super(Object.assign(optionsFromArguments(Gate.getDefaults(), arguments, [\"threshold\", \"smoothing\"])));\n    this.name = \"Gate\";\n    const options = optionsFromArguments(Gate.getDefaults(), arguments, [\"threshold\", \"smoothing\"]);\n    this._follower = new Follower({\n      context: this.context,\n      smoothing: options.smoothing\n    });\n    this._gt = new GreaterThan({\n      context: this.context,\n      value: dbToGain(options.threshold)\n    });\n    this.input = new Gain({\n      context: this.context\n    });\n    this._gate = this.output = new Gain({\n      context: this.context\n    }); // connections\n\n    this.input.connect(this._gate); // the control signal\n\n    this.input.chain(this._follower, this._gt, this._gate.gain);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      smoothing: 0.1,\n      threshold: -40\n    });\n  }\n  /**\n   * The threshold of the gate in decibels\n   */\n\n\n  get threshold() {\n    return gainToDb(this._gt.value);\n  }\n\n  set threshold(thresh) {\n    this._gt.value = dbToGain(thresh);\n  }\n  /**\n   * The attack/decay speed of the gate. See [[Follower.smoothing]]\n   */\n\n\n  get smoothing() {\n    return this._follower.smoothing;\n  }\n\n  set smoothing(smoothingTime) {\n    this._follower.smoothing = smoothingTime;\n  }\n\n  dispose() {\n    super.dispose();\n    this.input.dispose();\n\n    this._follower.dispose();\n\n    this._gt.dispose();\n\n    this._gate.dispose();\n\n    return this;\n  }\n\n}","import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Compressor } from \"./Compressor\";\nimport { readOnly } from \"../../core/util/Interface\";\n;\n/**\n * Limiter will limit the loudness of an incoming signal.\n * It is composed of a [[Compressor]] with a fast attack\n * and release and max ratio. Limiters are commonly used to safeguard against\n * signal clipping. Unlike a compressor, limiters do not provide\n * smooth gain reduction and almost completely prevent\n * additional gain above the threshold.\n *\n * @example\n * const limiter = new Tone.Limiter(-20).toDestination();\n * const oscillator = new Tone.Oscillator().connect(limiter);\n * oscillator.start();\n */\n\nexport class Limiter extends ToneAudioNode {\n  constructor() {\n    super(Object.assign(optionsFromArguments(Limiter.getDefaults(), arguments, [\"threshold\"])));\n    this.name = \"Limiter\";\n    const options = optionsFromArguments(Limiter.getDefaults(), arguments, [\"threshold\"]);\n    this._compressor = this.input = this.output = new Compressor({\n      context: this.context,\n      ratio: 20,\n      attack: 0,\n      release: 0,\n      threshold: options.threshold\n    });\n    this.threshold = this._compressor.threshold;\n    readOnly(this, \"threshold\");\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      threshold: -12\n    });\n  }\n  /**\n   * A read-only decibel value for metering purposes, representing the current amount of gain\n   * reduction that the compressor is applying to the signal.\n   */\n\n\n  get reduction() {\n    return this._compressor.reduction;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._compressor.dispose();\n\n    this.threshold.dispose();\n    return this;\n  }\n\n}","import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Compressor } from \"./Compressor\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MidSideSplit } from \"../channel/MidSideSplit\";\nimport { MidSideMerge } from \"../channel/MidSideMerge\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * MidSideCompressor applies two different compressors to the [[mid]]\n * and [[side]] signal components of the input. See [[MidSideSplit]] and [[MidSideMerge]].\n */\n\nexport class MidSideCompressor extends ToneAudioNode {\n  constructor() {\n    super(Object.assign(optionsFromArguments(MidSideCompressor.getDefaults(), arguments)));\n    this.name = \"MidSideCompressor\";\n    const options = optionsFromArguments(MidSideCompressor.getDefaults(), arguments);\n    this._midSideSplit = this.input = new MidSideSplit({\n      context: this.context\n    });\n    this._midSideMerge = this.output = new MidSideMerge({\n      context: this.context\n    });\n    this.mid = new Compressor(Object.assign(options.mid, {\n      context: this.context\n    }));\n    this.side = new Compressor(Object.assign(options.side, {\n      context: this.context\n    }));\n\n    this._midSideSplit.mid.chain(this.mid, this._midSideMerge.mid);\n\n    this._midSideSplit.side.chain(this.side, this._midSideMerge.side);\n\n    readOnly(this, [\"mid\", \"side\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      mid: {\n        ratio: 3,\n        threshold: -24,\n        release: 0.03,\n        attack: 0.02,\n        knee: 16\n      },\n      side: {\n        ratio: 6,\n        threshold: -30,\n        release: 0.25,\n        attack: 0.03,\n        knee: 10\n      }\n    });\n  }\n\n  dispose() {\n    super.dispose();\n    this.mid.dispose();\n    this.side.dispose();\n\n    this._midSideSplit.dispose();\n\n    this._midSideMerge.dispose();\n\n    return this;\n  }\n\n}","import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Compressor } from \"./Compressor\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { MultibandSplit } from \"../channel/MultibandSplit\";\nimport { Gain } from \"../../core/context/Gain\";\n/**\n * A compressor with separate controls over low/mid/high dynamics. See [[Compressor]] and [[MultibandSplit]]\n *\n * @example\n * const multiband = new Tone.MultibandCompressor({\n * \tlowFrequency: 200,\n * \thighFrequency: 1300,\n * \tlow: {\n * \t\tthreshold: -12\n * \t}\n * });\n */\n\nexport class MultibandCompressor extends ToneAudioNode {\n  constructor() {\n    super(Object.assign(optionsFromArguments(MultibandCompressor.getDefaults(), arguments)));\n    this.name = \"MultibandCompressor\";\n    const options = optionsFromArguments(MultibandCompressor.getDefaults(), arguments);\n    this._splitter = this.input = new MultibandSplit({\n      context: this.context,\n      lowFrequency: options.lowFrequency,\n      highFrequency: options.highFrequency\n    });\n    this.lowFrequency = this._splitter.lowFrequency;\n    this.highFrequency = this._splitter.highFrequency;\n    this.output = new Gain({\n      context: this.context\n    });\n    this.low = new Compressor(Object.assign(options.low, {\n      context: this.context\n    }));\n    this.mid = new Compressor(Object.assign(options.mid, {\n      context: this.context\n    }));\n    this.high = new Compressor(Object.assign(options.high, {\n      context: this.context\n    })); // connect the compressor\n\n    this._splitter.low.chain(this.low, this.output);\n\n    this._splitter.mid.chain(this.mid, this.output);\n\n    this._splitter.high.chain(this.high, this.output);\n\n    readOnly(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      lowFrequency: 250,\n      highFrequency: 2000,\n      low: {\n        ratio: 6,\n        threshold: -30,\n        release: 0.25,\n        attack: 0.03,\n        knee: 10\n      },\n      mid: {\n        ratio: 3,\n        threshold: -24,\n        release: 0.03,\n        attack: 0.02,\n        knee: 16\n      },\n      high: {\n        ratio: 3,\n        threshold: -24,\n        release: 0.03,\n        attack: 0.02,\n        knee: 16\n      }\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._splitter.dispose();\n\n    this.low.dispose();\n    this.mid.dispose();\n    this.high.dispose();\n    this.output.dispose();\n    return this;\n  }\n\n}","import { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { MultibandSplit } from \"../channel/MultibandSplit\";\n/**\n * EQ3 provides 3 equalizer bins: Low/Mid/High.\n * @category Component\n */\n\nexport class EQ3 extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]));\n    this.name = \"EQ3\";\n    /**\n     * the output\n     */\n\n    this.output = new Gain({\n      context: this.context\n    });\n    this._internalChannels = [];\n    const options = optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]);\n    this.input = this._multibandSplit = new MultibandSplit({\n      context: this.context,\n      highFrequency: options.highFrequency,\n      lowFrequency: options.lowFrequency\n    });\n    this._lowGain = new Gain({\n      context: this.context,\n      gain: options.low,\n      units: \"decibels\"\n    });\n    this._midGain = new Gain({\n      context: this.context,\n      gain: options.mid,\n      units: \"decibels\"\n    });\n    this._highGain = new Gain({\n      context: this.context,\n      gain: options.high,\n      units: \"decibels\"\n    });\n    this.low = this._lowGain.gain;\n    this.mid = this._midGain.gain;\n    this.high = this._highGain.gain;\n    this.Q = this._multibandSplit.Q;\n    this.lowFrequency = this._multibandSplit.lowFrequency;\n    this.highFrequency = this._multibandSplit.highFrequency; // the frequency bands\n\n    this._multibandSplit.low.chain(this._lowGain, this.output);\n\n    this._multibandSplit.mid.chain(this._midGain, this.output);\n\n    this._multibandSplit.high.chain(this._highGain, this.output);\n\n    readOnly(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n    this._internalChannels = [this._multibandSplit];\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      high: 0,\n      highFrequency: 2500,\n      low: 0,\n      lowFrequency: 400,\n      mid: 0\n    });\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n    writable(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n\n    this._multibandSplit.dispose();\n\n    this.lowFrequency.dispose();\n    this.highFrequency.dispose();\n\n    this._lowGain.dispose();\n\n    this._midGain.dispose();\n\n    this._highGain.dispose();\n\n    this.low.dispose();\n    this.mid.dispose();\n    this.high.dispose();\n    this.Q.dispose();\n    return this;\n  }\n\n}","import { __awaiter } from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { noOp } from \"../../core/util/Interface\";\n/**\n * Convolver is a wrapper around the Native Web Audio\n * [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n * Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n * [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n *\n * @example\n * // initializing the convolver with an impulse response\n * const convolver = new Tone.Convolver(\"./path/to/ir.wav\").toDestination();\n * @category Component\n */\n\nexport class Convolver extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]));\n    this.name = \"Convolver\";\n    /**\n     * The native ConvolverNode\n     */\n\n    this._convolver = this.context.createConvolver();\n    const options = optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]);\n    this._buffer = new ToneAudioBuffer(options.url, buffer => {\n      this.buffer = buffer;\n      options.onload();\n    });\n    this.input = new Gain({\n      context: this.context\n    });\n    this.output = new Gain({\n      context: this.context\n    }); // set if it's already loaded, set it immediately\n\n    if (this._buffer.loaded) {\n      this.buffer = this._buffer;\n    } // initially set normalization\n\n\n    this.normalize = options.normalize; // connect it up\n\n    this.input.chain(this._convolver, this.output);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      normalize: true,\n      onload: noOp\n    });\n  }\n  /**\n   * Load an impulse response url as an audio buffer.\n   * Decodes the audio asynchronously and invokes\n   * the callback once the audio buffer loads.\n   * @param url The url of the buffer to load. filetype support depends on the browser.\n   */\n\n\n  load(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.buffer = yield this._buffer.load(url);\n    });\n  }\n  /**\n   * The convolver's buffer\n   */\n\n\n  get buffer() {\n    if (this._buffer.length) {\n      return this._buffer;\n    } else {\n      return null;\n    }\n  }\n\n  set buffer(buffer) {\n    if (buffer) {\n      this._buffer.set(buffer);\n    } // if it's already got a buffer, create a new one\n\n\n    if (this._convolver.buffer) {\n      // disconnect the old one\n      this.input.disconnect();\n\n      this._convolver.disconnect(); // create and connect a new one\n\n\n      this._convolver = this.context.createConvolver();\n      this.input.chain(this._convolver, this.output);\n    }\n\n    const buff = this._buffer.get();\n\n    this._convolver.buffer = buff ? buff : null;\n  }\n  /**\n   * The normalize property of the ConvolverNode interface is a boolean that\n   * controls whether the impulse response from the buffer will be scaled by\n   * an equal-power normalization when the buffer attribute is set, or not.\n   */\n\n\n  get normalize() {\n    return this._convolver.normalize;\n  }\n\n  set normalize(norm) {\n    this._convolver.normalize = norm;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._buffer.dispose();\n\n    this._convolver.disconnect();\n\n    return this;\n  }\n\n}","export { getContext, setContext } from \"./core/Global\";\nexport * from \"./classes\";\nexport * from \"./version\";\nimport { getContext } from \"./core/Global\";\nimport { ToneAudioBuffer } from \"./core/context/ToneAudioBuffer\";\nexport { start } from \"./core/Global\";\nexport { supported } from \"./core/context/AudioContext\";\n/**\n * The current audio context time of the global [[Context]].\n * See [[Context.now]]\n * @category Core\n */\n\nexport const now = getContext().now.bind(getContext());\n/**\n * The current audio context time of the global [[Context]] without the [[Context.lookAhead]]\n * See [[Context.immediate]]\n * @category Core\n */\n\nexport const immediate = getContext().immediate.bind(getContext());\n/**\n * The Transport object belonging to the global Tone.js Context.\n * See [[Transport]]\n * @category Core\n */\n\nexport const Transport = getContext().transport;\n/**\n * The Destination (output) belonging to the global Tone.js Context.\n * See [[Destination]]\n * @category Core\n */\n\nexport const Destination = getContext().destination;\n/**\n * The [[Listener]] belonging to the global Tone.js Context.\n * @category Core\n */\n\nexport const Listener = getContext().listener;\n/**\n * Draw is used to synchronize the draw frame with the Transport's callbacks.\n * See [[Draw]]\n * @category Core\n */\n\nexport const Draw = getContext().draw;\n/**\n * A reference to the global context\n * See [[Context]]\n * @category Core\n */\n\nexport const context = getContext();\n/**\n * Promise which resolves when all of the loading promises are resolved.\n * Alias for static [[ToneAudioBuffer.loaded]] method.\n * @category Core\n */\n\nexport const loaded = ToneAudioBuffer.loaded.bind(ToneAudioBuffer); // this fills in name changes from 13.x to 14.x\n\nimport { ToneAudioBuffers } from \"./core/context/ToneAudioBuffers\";\nimport { ToneBufferSource } from \"./source/buffer/ToneBufferSource\";\nexport const Buffer = ToneAudioBuffer;\nexport const Buffers = ToneAudioBuffers;\nexport const BufferSource = ToneBufferSource;","import { AUDIO_NODE_CONNECTIONS_STORE } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getAudioNodeConnections = audioNode => {\n  return getValueForKey(AUDIO_NODE_CONNECTIONS_STORE, audioNode);\n};","export const getValueForKey = (map, key) => {\n  const value = map.get(key);\n\n  if (value === undefined) {\n    throw new Error('A value with the given key could not be found.');\n  }\n\n  return value;\n};","export const createNotSupportedError = () => {\n  try {\n    return new DOMException('', 'NotSupportedError');\n  } catch (err) {\n    // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n    err.code = 9;\n    err.name = 'NotSupportedError';\n    return err;\n  }\n};","export const interceptConnections = (original, interceptor) => {\n  original.connect = interceptor.connect.bind(interceptor);\n  original.disconnect = interceptor.disconnect.bind(interceptor);\n  return original;\n};","export const isNativeAudioNodeFaker = nativeAudioNodeOrNativeAudioNodeFaker => {\n  return 'inputs' in nativeAudioNodeOrNativeAudioNodeFaker;\n};","import { createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent } from 'automation-events';\nimport { createAbortError } from './factories/abort-error';\nimport { createAddAudioNodeConnections } from './factories/add-audio-node-connections';\nimport { createAddAudioParamConnections } from './factories/add-audio-param-connections';\nimport { createAddAudioWorkletModule } from './factories/add-audio-worklet-module';\nimport { createAddSilentConnection } from './factories/add-silent-connection';\nimport { createAddUnrenderedAudioWorkletNode } from './factories/add-unrendered-audio-worklet-node';\nimport { createAnalyserNodeConstructor } from './factories/analyser-node-constructor';\nimport { createAnalyserNodeRendererFactory } from './factories/analyser-node-renderer-factory';\nimport { createAudioBufferConstructor } from './factories/audio-buffer-constructor';\nimport { createAudioBufferSourceNodeConstructor } from './factories/audio-buffer-source-node-constructor';\nimport { createAudioBufferSourceNodeRendererFactory } from './factories/audio-buffer-source-node-renderer-factory';\nimport { createAudioContextConstructor } from './factories/audio-context-constructor';\nimport { createAudioDestinationNodeConstructor } from './factories/audio-destination-node-constructor';\nimport { createAudioDestinationNodeRenderer } from './factories/audio-destination-node-renderer-factory';\nimport { createAudioListenerFactory } from './factories/audio-listener-factory';\nimport { createAudioNodeConstructor } from './factories/audio-node-constructor';\nimport { createAudioParamFactory } from './factories/audio-param-factory';\nimport { createAudioParamRenderer } from './factories/audio-param-renderer';\nimport { createAudioWorkletNodeConstructor } from './factories/audio-worklet-node-constructor';\nimport { createAudioWorkletNodeRendererFactory } from './factories/audio-worklet-node-renderer-factory';\nimport { createBaseAudioContextConstructor } from './factories/base-audio-context-constructor';\nimport { createBiquadFilterNodeConstructor } from './factories/biquad-filter-node-constructor';\nimport { createBiquadFilterNodeRendererFactory } from './factories/biquad-filter-node-renderer-factory';\nimport { createCacheTestResult } from './factories/cache-test-result';\nimport { createChannelMergerNodeConstructor } from './factories/channel-merger-node-constructor';\nimport { createChannelMergerNodeRendererFactory } from './factories/channel-merger-node-renderer-factory';\nimport { createChannelSplitterNodeConstructor } from './factories/channel-splitter-node-constructor';\nimport { createChannelSplitterNodeRendererFactory } from './factories/channel-splitter-node-renderer-factory';\nimport { createConnectAudioParam } from './factories/connect-audio-param';\nimport { createConnectMultipleOutputs } from './factories/connect-multiple-outputs';\nimport { createConnectedNativeAudioBufferSourceNodeFactory } from './factories/connected-native-audio-buffer-source-node-factory';\nimport { createConstantSourceNodeConstructor } from './factories/constant-source-node-constructor';\nimport { createConstantSourceNodeRendererFactory } from './factories/constant-source-node-renderer-factory';\nimport { createConvertNumberToUnsignedLong } from './factories/convert-number-to-unsigned-long';\nimport { createConvolverNodeConstructor } from './factories/convolver-node-constructor';\nimport { createConvolverNodeRendererFactory } from './factories/convolver-node-renderer-factory';\nimport { createCreateNativeOfflineAudioContext } from './factories/create-native-offline-audio-context';\nimport { createDataCloneError } from './factories/data-clone-error';\nimport { createDecodeAudioData } from './factories/decode-audio-data';\nimport { createDecrementCycleCounter } from './factories/decrement-cycle-counter';\nimport { createDelayNodeConstructor } from './factories/delay-node-constructor';\nimport { createDelayNodeRendererFactory } from './factories/delay-node-renderer-factory';\nimport { createDeleteUnrenderedAudioWorkletNode } from './factories/delete-unrendered-audio-worklet-node';\nimport { createDetectCycles } from './factories/detect-cycles';\nimport { createDisconnectMultipleOutputs } from './factories/disconnect-multiple-outputs';\nimport { createDynamicsCompressorNodeConstructor } from './factories/dynamics-compressor-node-constructor';\nimport { createDynamicsCompressorNodeRendererFactory } from './factories/dynamics-compressor-node-renderer-factory';\nimport { createEncodingError } from './factories/encoding-error';\nimport { createEvaluateSource } from './factories/evaluate-source';\nimport { createEventTargetConstructor } from './factories/event-target-constructor';\nimport { createExposeCurrentFrameAndCurrentTime } from './factories/expose-current-frame-and-current-time';\nimport { createFetchSource } from './factories/fetch-source';\nimport { createGainNodeConstructor } from './factories/gain-node-constructor';\nimport { createGainNodeRendererFactory } from './factories/gain-node-renderer-factory';\nimport { createGetAudioNodeRenderer } from './factories/get-audio-node-renderer';\nimport { createGetAudioParamRenderer } from './factories/get-audio-param-renderer';\nimport { createGetBackupNativeContext } from './factories/get-backup-native-context';\nimport { createGetNativeContext } from './factories/get-native-context';\nimport { createGetUnrenderedAudioWorkletNodes } from './factories/get-unrendered-audio-worklet-nodes';\nimport { createIIRFilterNodeConstructor } from './factories/iir-filter-node-constructor';\nimport { createIIRFilterNodeRendererFactory } from './factories/iir-filter-node-renderer-factory';\nimport { createIncrementCycleCounterFactory } from './factories/increment-cycle-counter-factory';\nimport { createIndexSizeError } from './factories/index-size-error';\nimport { createInvalidAccessError } from './factories/invalid-access-error';\nimport { createInvalidStateError } from './factories/invalid-state-error';\nimport { createIsAnyAudioContext } from './factories/is-any-audio-context';\nimport { createIsAnyAudioNode } from './factories/is-any-audio-node';\nimport { createIsAnyAudioParam } from './factories/is-any-audio-param';\nimport { createIsAnyOfflineAudioContext } from './factories/is-any-offline-audio-context';\nimport { createIsNativeAudioContext } from './factories/is-native-audio-context';\nimport { createIsNativeAudioNode } from './factories/is-native-audio-node';\nimport { createIsNativeAudioParam } from './factories/is-native-audio-param';\nimport { createIsNativeContext } from './factories/is-native-context';\nimport { createIsNativeOfflineAudioContext } from './factories/is-native-offline-audio-context';\nimport { createIsSecureContext } from './factories/is-secure-context';\nimport { createIsSupportedPromise } from './factories/is-supported-promise';\nimport { createMediaElementAudioSourceNodeConstructor } from './factories/media-element-audio-source-node-constructor';\nimport { createMediaStreamAudioDestinationNodeConstructor } from './factories/media-stream-audio-destination-node-constructor';\nimport { createMediaStreamAudioSourceNodeConstructor } from './factories/media-stream-audio-source-node-constructor';\nimport { createMediaStreamTrackAudioSourceNodeConstructor } from './factories/media-stream-track-audio-source-node-constructor';\nimport { createMinimalAudioContextConstructor } from './factories/minimal-audio-context-constructor';\nimport { createMinimalBaseAudioContextConstructor } from './factories/minimal-base-audio-context-constructor';\nimport { createMinimalOfflineAudioContextConstructor } from './factories/minimal-offline-audio-context-constructor';\nimport { createMonitorConnections } from './factories/monitor-connections';\nimport { createNativeAnalyserNodeFactory } from './factories/native-analyser-node-factory';\nimport { createNativeAudioBufferConstructor } from './factories/native-audio-buffer-constructor';\nimport { createNativeAudioBufferSourceNodeFactory } from './factories/native-audio-buffer-source-node-factory';\nimport { createNativeAudioContextConstructor } from './factories/native-audio-context-constructor';\nimport { createNativeAudioDestinationNodeFactory } from './factories/native-audio-destination-node';\nimport { createNativeAudioNodeFactory } from './factories/native-audio-node-factory';\nimport { createNativeAudioWorkletNodeConstructor } from './factories/native-audio-worklet-node-constructor';\nimport { createNativeAudioWorkletNodeFactory } from './factories/native-audio-worklet-node-factory';\nimport { createNativeAudioWorkletNodeFakerFactory } from './factories/native-audio-worklet-node-faker-factory';\nimport { createNativeBiquadFilterNodeFactory } from './factories/native-biquad-filter-node-factory';\nimport { createNativeChannelMergerNodeFactory } from './factories/native-channel-merger-node-factory';\nimport { createNativeChannelSplitterNodeFactory } from './factories/native-channel-splitter-node-factory';\nimport { createNativeConstantSourceNodeFactory } from './factories/native-constant-source-node-factory';\nimport { createNativeConstantSourceNodeFakerFactory } from './factories/native-constant-source-node-faker-factory';\nimport { createNativeConvolverNodeFactory } from './factories/native-convolver-node-factory';\nimport { createNativeConvolverNodeFakerFactory } from './factories/native-convolver-node-faker-factory';\nimport { createNativeDelayNodeFactory } from './factories/native-delay-node-factory';\nimport { createNativeDynamicsCompressorNodeFactory } from './factories/native-dynamics-compressor-node-factory';\nimport { createNativeGainNodeFactory } from './factories/native-gain-node-factory';\nimport { createNativeIIRFilterNodeFactory } from './factories/native-iir-filter-node-factory';\nimport { createNativeIIRFilterNodeFakerFactory } from './factories/native-iir-filter-node-faker-factory';\nimport { createNativeMediaElementAudioSourceNodeFactory } from './factories/native-media-element-audio-source-node-factory';\nimport { createNativeMediaStreamAudioDestinationNodeFactory } from './factories/native-media-stream-audio-destination-node-factory';\nimport { createNativeMediaStreamAudioSourceNodeFactory } from './factories/native-media-stream-audio-source-node-factory';\nimport { createNativeMediaStreamTrackAudioSourceNodeFactory } from './factories/native-media-stream-track-audio-source-node-factory';\nimport { createNativeOfflineAudioContextConstructor } from './factories/native-offline-audio-context-constructor';\nimport { createNativeOscillatorNodeFactory } from './factories/native-oscillator-node-factory';\nimport { createNativePannerNodeFactory } from './factories/native-panner-node-factory';\nimport { createNativePannerNodeFakerFactory } from './factories/native-panner-node-faker-factory';\nimport { createNativePeriodicWaveFactory } from './factories/native-periodic-wave-factory';\nimport { createNativeScriptProcessorNodeFactory } from './factories/native-script-processor-node-factory';\nimport { createNativeStereoPannerNodeFactory } from './factories/native-stereo-panner-node-factory';\nimport { createNativeStereoPannerNodeFakerFactory } from './factories/native-stereo-panner-node-faker-factory';\nimport { createNativeWaveShaperNodeFactory } from './factories/native-wave-shaper-node-factory';\nimport { createNativeWaveShaperNodeFakerFactory } from './factories/native-wave-shaper-node-faker-factory';\nimport { createNotSupportedError } from './factories/not-supported-error';\nimport { createOfflineAudioContextConstructor } from './factories/offline-audio-context-constructor';\nimport { createOscillatorNodeConstructor } from './factories/oscillator-node-constructor';\nimport { createOscillatorNodeRendererFactory } from './factories/oscillator-node-renderer-factory';\nimport { createPannerNodeConstructor } from './factories/panner-node-constructor';\nimport { createPannerNodeRendererFactory } from './factories/panner-node-renderer-factory';\nimport { createPeriodicWaveConstructor } from './factories/periodic-wave-constructor';\nimport { createRenderAutomation } from './factories/render-automation';\nimport { createRenderInputsOfAudioNode } from './factories/render-inputs-of-audio-node';\nimport { createRenderInputsOfAudioParam } from './factories/render-inputs-of-audio-param';\nimport { createRenderNativeOfflineAudioContext } from './factories/render-native-offline-audio-context';\nimport { createStartRendering } from './factories/start-rendering';\nimport { createStereoPannerNodeConstructor } from './factories/stereo-panner-node-constructor';\nimport { createStereoPannerNodeRendererFactory } from './factories/stereo-panner-node-renderer-factory';\nimport { createTestAudioBufferConstructorSupport } from './factories/test-audio-buffer-constructor-support';\nimport { createTestAudioBufferCopyChannelMethodsSubarraySupport } from './factories/test-audio-buffer-copy-channel-methods-subarray-support';\nimport { createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport } from './factories/test-audio-buffer-source-node-start-method-consecutive-calls-support';\nimport { createTestAudioBufferSourceNodeStartMethodDurationParameterSupport } from './factories/test-audio-buffer-source-node-start-method-duration-parameter-support';\nimport { createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport } from './factories/test-audio-buffer-source-node-start-method-offset-clamping-support';\nimport { createTestAudioBufferSourceNodeStopMethodNullifiedBufferSupport } from './factories/test-audio-buffer-source-node-stop-method-nullified-buffer-support';\nimport { createTestAudioContextCloseMethodSupport } from './factories/test-audio-context-close-method-support';\nimport { createTestAudioContextDecodeAudioDataMethodTypeErrorSupport } from './factories/test-audio-context-decode-audio-data-method-type-error-support';\nimport { createTestAudioContextOptionsSupport } from './factories/test-audio-context-options-support';\nimport { createTestAudioNodeConnectMethodSupport } from './factories/test-audio-node-connect-method-support';\nimport { createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport } from './factories/test-audio-scheduled-source-node-start-method-negative-parameters-support';\nimport { createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport } from './factories/test-audio-scheduled-source-node-stop-method-consecutive-calls-support';\nimport { createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport } from './factories/test-audio-scheduled-source-node-stop-method-negative-parameters-support';\nimport { createTestAudioWorkletProcessorNoOutputsSupport } from './factories/test-audio-worklet-processor-no-outputs-support';\nimport { createTestChannelMergerNodeChannelCountSupport } from './factories/test-channel-merger-node-channel-count-support';\nimport { createTestConstantSourceNodeAccurateSchedulingSupport } from './factories/test-constant-source-node-accurate-scheduling-support';\nimport { createTestConvolverNodeBufferReassignabilitySupport } from './factories/test-convolver-node-buffer-reassignability-support';\nimport { createTestIsSecureContextSupport } from './factories/test-is-secure-context-support';\nimport { createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport } from './factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support';\nimport { createTestOfflineAudioContextCurrentTimeSupport } from './factories/test-offline-audio-context-current-time-support';\nimport { createTestStereoPannerNodeDefaultValueSupport } from './factories/test-stereo-panner-node-default-value-support';\nimport { createUnknownError } from './factories/unknown-error';\nimport { createWaveShaperNodeConstructor } from './factories/wave-shaper-node-constructor';\nimport { createWaveShaperNodeRendererFactory } from './factories/wave-shaper-node-renderer-factory';\nimport { createWindow } from './factories/window';\nimport { createWrapAudioBufferCopyChannelMethods } from './factories/wrap-audio-buffer-copy-channel-methods';\nimport { createWrapAudioBufferCopyChannelMethodsOutOfBounds } from './factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds';\nimport { createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer } from './factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer';\nimport { createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls } from './factories/wrap-audio-scheduled-source-node-stop-method-consecutive-calls';\nimport { createWrapChannelMergerNode } from './factories/wrap-channel-merger-node';\nimport { AUDIO_NODE_CONNECTIONS_STORE, AUDIO_NODE_STORE, AUDIO_PARAM_CONNECTIONS_STORE, AUDIO_PARAM_STORE, CONTEXT_STORE, CYCLE_COUNTERS } from './globals';\nimport { connectNativeAudioNodeToNativeAudioNode } from './helpers/connect-native-audio-node-to-native-audio-node';\nimport { disconnectNativeAudioNodeFromNativeAudioNode } from './helpers/disconnect-native-audio-node-from-native-audio-node';\nimport { getAudioNodeConnections } from './helpers/get-audio-node-connections';\nimport { getAudioParamConnections } from './helpers/get-audio-param-connections';\nimport { getNativeAudioNode } from './helpers/get-native-audio-node';\nimport { getNativeAudioParam } from './helpers/get-native-audio-param';\nimport { getValueForKey } from './helpers/get-value-for-key';\nimport { insertElementInSet } from './helpers/insert-element-in-set';\nimport { isActiveAudioNode } from './helpers/is-active-audio-node';\nimport { isDCCurve } from './helpers/is-dc-curve';\nimport { isPartOfACycle } from './helpers/is-part-of-a-cycle';\nimport { overwriteAccessors } from './helpers/overwrite-accessors';\nimport { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from './helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { testPromiseSupport } from './helpers/test-promise-support';\nimport { testTransferablesSupport } from './helpers/test-transferables-support';\nimport { wrapAudioBufferSourceNodeStartMethodOffsetClamping } from './helpers/wrap-audio-buffer-source-node-start-method-offset-clamping';\nimport { wrapEventListener } from './helpers/wrap-event-listener';\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\n\nexport * from './interfaces/index';\nexport * from './types/index';\nconst cacheTestResult = createCacheTestResult(new Map(), new WeakMap());\nconst window = createWindow();\nconst nativeOfflineAudioContextConstructor = createNativeOfflineAudioContextConstructor(window);\nconst isNativeOfflineAudioContext = createIsNativeOfflineAudioContext(nativeOfflineAudioContextConstructor);\nconst nativeAudioContextConstructor = createNativeAudioContextConstructor(window);\nconst getBackupNativeContext = createGetBackupNativeContext(isNativeOfflineAudioContext, nativeAudioContextConstructor, nativeOfflineAudioContextConstructor);\nconst createNativeAudioNode = createNativeAudioNodeFactory(getBackupNativeContext);\nconst createNativeAnalyserNode = createNativeAnalyserNodeFactory(cacheTestResult, createIndexSizeError, createNativeAudioNode);\nconst getAudioNodeRenderer = createGetAudioNodeRenderer(getAudioNodeConnections);\nconst renderInputsOfAudioNode = createRenderInputsOfAudioNode(getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle);\nconst createAnalyserNodeRenderer = createAnalyserNodeRendererFactory(createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst auxiliaryGainNodeStore = new WeakMap();\nconst getNativeContext = createGetNativeContext(CONTEXT_STORE);\nconst audioParamAudioNodeStore = new WeakMap();\nconst eventTargetConstructor = createEventTargetConstructor(wrapEventListener);\nconst isNativeAudioContext = createIsNativeAudioContext(nativeAudioContextConstructor);\nconst isNativeAudioNode = createIsNativeAudioNode(window);\nconst isNativeAudioParam = createIsNativeAudioParam(window);\nconst audioNodeConstructor = createAudioNodeConstructor(createAddAudioNodeConnections(AUDIO_NODE_CONNECTIONS_STORE), auxiliaryGainNodeStore, cacheTestResult, createIncrementCycleCounterFactory(CYCLE_COUNTERS, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, isActiveAudioNode), createIndexSizeError, createInvalidAccessError, createNotSupportedError, createDecrementCycleCounter(connectNativeAudioNodeToNativeAudioNode, CYCLE_COUNTERS, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext), createDetectCycles(audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey), eventTargetConstructor, getNativeContext, isNativeAudioContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext);\nconst analyserNodeConstructor = createAnalyserNodeConstructor(audioNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext);\nexport { analyserNodeConstructor as AnalyserNode };\nconst audioBufferStore = new WeakSet();\nconst nativeAudioBufferConstructor = createNativeAudioBufferConstructor(window);\nconst convertNumberToUnsignedLong = createConvertNumberToUnsignedLong(new Uint32Array(1));\nconst wrapAudioBufferCopyChannelMethods = createWrapAudioBufferCopyChannelMethods(convertNumberToUnsignedLong, createIndexSizeError);\nconst wrapAudioBufferCopyChannelMethodsOutOfBounds = createWrapAudioBufferCopyChannelMethodsOutOfBounds(convertNumberToUnsignedLong);\nconst audioBufferConstructor = createAudioBufferConstructor(audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, createTestAudioBufferConstructorSupport(nativeAudioBufferConstructor), wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nexport { audioBufferConstructor as AudioBuffer };\nconst createNativeGainNode = createNativeGainNodeFactory(createNativeAudioNode);\nconst addSilentConnection = createAddSilentConnection(createNativeGainNode);\nconst testAudioScheduledSourceNodeStartMethodNegativeParametersSupport = createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport(createNativeAudioNode);\nconst testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(createNativeAudioNode);\nconst testAudioScheduledSourceNodeStopMethodNegativeParametersSupport = createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport(createNativeAudioNode);\nconst wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(createNativeAudioNode);\nconst renderInputsOfAudioParam = createRenderInputsOfAudioParam(getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle);\nconst connectAudioParam = createConnectAudioParam(renderInputsOfAudioParam);\nconst createNativeAudioBufferSourceNode = createNativeAudioBufferSourceNodeFactory(addSilentConnection, cacheTestResult, createNativeAudioNode, createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(createNativeAudioNode), createTestAudioBufferSourceNodeStartMethodDurationParameterSupport(nativeOfflineAudioContextConstructor), createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport(createNativeAudioNode), createTestAudioBufferSourceNodeStopMethodNullifiedBufferSupport(createNativeAudioNode), testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClamping, createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer(overwriteAccessors), wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst renderAutomation = createRenderAutomation(createGetAudioParamRenderer(getAudioParamConnections), renderInputsOfAudioParam);\nconst createAudioBufferSourceNodeRenderer = createAudioBufferSourceNodeRendererFactory(connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst createAudioParam = createAudioParamFactory(createAddAudioParamConnections(AUDIO_PARAM_CONNECTIONS_STORE), audioParamAudioNodeStore, AUDIO_PARAM_STORE, createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor);\nconst audioBufferSourceNodeConstructor = createAudioBufferSourceNodeConstructor(audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nexport { audioBufferSourceNodeConstructor as AudioBufferSourceNode };\nconst audioDestinationNodeConstructor = createAudioDestinationNodeConstructor(audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNodeFactory(createNativeGainNode, overwriteAccessors), getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode);\nconst createNativeBiquadFilterNode = createNativeBiquadFilterNodeFactory(createNativeAudioNode);\nconst createBiquadFilterNodeRenderer = createBiquadFilterNodeRendererFactory(connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst biquadFilterNodeConstructor = createBiquadFilterNodeConstructor(audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext);\nconst monitorConnections = createMonitorConnections(insertElementInSet, isNativeAudioNode);\nconst wrapChannelMergerNode = createWrapChannelMergerNode(createInvalidStateError, createNativeAudioNode, monitorConnections);\nconst createNativeChannelMergerNode = createNativeChannelMergerNodeFactory(createNativeAudioNode, wrapChannelMergerNode);\nconst createChannelMergerNodeRenderer = createChannelMergerNodeRendererFactory(createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst channelMergerNodeConstructor = createChannelMergerNodeConstructor(audioNodeConstructor, createChannelMergerNodeRenderer, createNativeChannelMergerNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeChannelSplitterNode = createNativeChannelSplitterNodeFactory(createNativeAudioNode);\nconst createChannelSplitterNodeRenderer = createChannelSplitterNodeRendererFactory(createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst channelSplitterNodeConstructor = createChannelSplitterNodeConstructor(audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeConstantSourceNodeFaker = createNativeConstantSourceNodeFakerFactory(addSilentConnection, createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections);\nconst createNativeConstantSourceNode = createNativeConstantSourceNodeFactory(addSilentConnection, cacheTestResult, createNativeAudioNode, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport);\nconst createConstantSourceNodeRenderer = createConstantSourceNodeRendererFactory(connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst constantSourceNodeConstructor = createConstantSourceNodeConstructor(audioNodeConstructor, createAudioParam, createConstantSourceNodeRenderer, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nconst createNativeConvolverNodeFaker = createNativeConvolverNodeFakerFactory(createNativeAudioNode, createNativeGainNode, monitorConnections);\nconst createNativeConvolverNode = createNativeConvolverNodeFactory(createNativeAudioNode, createNativeConvolverNodeFaker, createNotSupportedError, overwriteAccessors);\nconst createConvolverNodeRenderer = createConvolverNodeRendererFactory(createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst convolverNodeConstructor = createConvolverNodeConstructor(audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeDelayNode = createNativeDelayNodeFactory(createNativeAudioNode);\nconst createDelayNodeRenderer = createDelayNodeRendererFactory(connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst delayNodeConstructor = createDelayNodeConstructor(audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeDynamicsCompressorNode = createNativeDynamicsCompressorNodeFactory(createNativeAudioNode, createNotSupportedError);\nconst createDynamicsCompressorNodeRenderer = createDynamicsCompressorNodeRendererFactory(connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst dynamicsCompressorNodeConstructor = createDynamicsCompressorNodeConstructor(audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext);\nconst createGainNodeRenderer = createGainNodeRendererFactory(connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst gainNodeConstructor = createGainNodeConstructor(audioNodeConstructor, createAudioParam, createGainNodeRenderer, createNativeGainNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeScriptProcessorNode = createNativeScriptProcessorNodeFactory(createNativeAudioNode);\nconst createNativeIIRFilterNodeFaker = createNativeIIRFilterNodeFakerFactory(createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError);\nconst renderNativeOfflineAudioContext = createRenderNativeOfflineAudioContext(cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, createTestOfflineAudioContextCurrentTimeSupport(createNativeGainNode, nativeOfflineAudioContextConstructor));\nconst createIIRFilterNodeRenderer = createIIRFilterNodeRendererFactory(createNativeAudioBufferSourceNode, createNativeAudioNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nconst createNativeIIRFilterNode = createNativeIIRFilterNodeFactory(createNativeAudioNode, createNativeIIRFilterNodeFaker);\nconst iIRFilterNodeConstructor = createIIRFilterNodeConstructor(audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst createAudioListener = createAudioListenerFactory(createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, isNativeOfflineAudioContext);\nconst unrenderedAudioWorkletNodeStore = new WeakMap();\nconst minimalBaseAudioContextConstructor = createMinimalBaseAudioContextConstructor(audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, isNativeOfflineAudioContext, unrenderedAudioWorkletNodeStore, wrapEventListener);\nconst createNativeOscillatorNode = createNativeOscillatorNodeFactory(addSilentConnection, cacheTestResult, createNativeAudioNode, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst createOscillatorNodeRenderer = createOscillatorNodeRendererFactory(connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst oscillatorNodeConstructor = createOscillatorNodeConstructor(audioNodeConstructor, createAudioParam, createInvalidStateError, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nconst createConnectedNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNodeFactory(createNativeAudioBufferSourceNode);\nconst createNativeWaveShaperNodeFaker = createNativeWaveShaperNodeFakerFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeAudioNode, createNativeGainNode, isDCCurve, monitorConnections);\nconst createNativeWaveShaperNode = createNativeWaveShaperNodeFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeAudioNode, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, overwriteAccessors);\nconst createNativePannerNodeFaker = createNativePannerNodeFakerFactory(connectNativeAudioNodeToNativeAudioNode, createInvalidStateError, createNativeAudioNode, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError, disconnectNativeAudioNodeFromNativeAudioNode, monitorConnections);\nconst createNativePannerNode = createNativePannerNodeFactory(createNativeAudioNode, createNativePannerNodeFaker);\nconst createPannerNodeRenderer = createPannerNodeRendererFactory(connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nconst pannerNodeConstructor = createPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst createNativePeriodicWave = createNativePeriodicWaveFactory(getBackupNativeContext);\nconst periodicWaveConstructor = createPeriodicWaveConstructor(createNativePeriodicWave, getNativeContext, new WeakSet());\nconst nativeStereoPannerNodeFakerFactory = createNativeStereoPannerNodeFakerFactory(createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError, monitorConnections);\nconst createNativeStereoPannerNode = createNativeStereoPannerNodeFactory(createNativeAudioNode, nativeStereoPannerNodeFakerFactory, createNotSupportedError);\nconst createStereoPannerNodeRenderer = createStereoPannerNodeRendererFactory(connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst stereoPannerNodeConstructor = createStereoPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst createWaveShaperNodeRenderer = createWaveShaperNodeRendererFactory(createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst waveShaperNodeConstructor = createWaveShaperNodeConstructor(audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst isSecureContext = createIsSecureContext(window);\nconst exposeCurrentFrameAndCurrentTime = createExposeCurrentFrameAndCurrentTime(window); // The addAudioWorkletModule() function is only available in a SecureContext.\n\nexport const addAudioWorkletModule = isSecureContext ? createAddAudioWorkletModule(createNotSupportedError, createEvaluateSource(window), exposeCurrentFrameAndCurrentTime, createFetchSource(createAbortError), getBackupNativeContext, getNativeContext, new WeakMap(), new WeakMap(), // @todo window is guaranteed to be defined because isSecureContext checks that as well.\nwindow) : undefined;\nconst isNativeContext = createIsNativeContext(isNativeAudioContext, isNativeOfflineAudioContext);\nexport const decodeAudioData = createDecodeAudioData(audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, new WeakSet(), getNativeContext, isNativeContext, isNativeOfflineAudioContext, nativeOfflineAudioContextConstructor, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nconst baseAudioContextConstructor = createBaseAudioContextConstructor(addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor);\nconst createNativeMediaElementAudioSourceNode = createNativeMediaElementAudioSourceNodeFactory(createNativeAudioNode);\nconst mediaElementAudioSourceNodeConstructor = createMediaElementAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaElementAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeMediaStreamAudioDestinationNode = createNativeMediaStreamAudioDestinationNodeFactory(createNativeAudioNode, createNotSupportedError);\nconst mediaStreamAudioDestinationNodeConstructor = createMediaStreamAudioDestinationNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeMediaStreamAudioSourceNode = createNativeMediaStreamAudioSourceNodeFactory(createNativeAudioNode);\nconst mediaStreamAudioSourceNodeConstructor = createMediaStreamAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNodeFactory(createInvalidStateError, createNativeAudioNode, isNativeOfflineAudioContext);\nconst mediaStreamTrackAudioSourceNodeConstructor = createMediaStreamTrackAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, getNativeContext);\nconst audioContextConstructor = createAudioContextConstructor(baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioDestinationNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor);\nexport { audioContextConstructor as AudioContext };\nconst getUnrenderedAudioWorkletNodes = createGetUnrenderedAudioWorkletNodes(unrenderedAudioWorkletNodeStore);\nconst addUnrenderedAudioWorkletNode = createAddUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);\nconst connectMultipleOutputs = createConnectMultipleOutputs(createIndexSizeError);\nconst deleteUnrenderedAudioWorkletNode = createDeleteUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);\nconst disconnectMultipleOutputs = createDisconnectMultipleOutputs(createIndexSizeError);\nconst createNativeAudioWorkletNodeFaker = createNativeAudioWorkletNodeFakerFactory(auxiliaryGainNodeStore, connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, monitorConnections);\nconst createNativeAudioWorkletNode = createNativeAudioWorkletNodeFactory(createInvalidStateError, createNativeAudioNode, createNativeAudioWorkletNodeFaker, createNativeGainNode, createNotSupportedError, monitorConnections);\nconst nativeAudioWorkletNodeConstructor = createNativeAudioWorkletNodeConstructor(window);\nconst createAudioWorkletNodeRenderer = createAudioWorkletNodeRendererFactory(connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, deleteUnrenderedAudioWorkletNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getNativeAudioNode, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext); // The AudioWorkletNode constructor is only available in a SecureContext.\n\nconst audioWorkletNodeConstructor = isSecureContext ? createAudioWorkletNodeConstructor(addUnrenderedAudioWorkletNode, audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, wrapEventListener) : undefined;\nexport { audioWorkletNodeConstructor as AudioWorkletNode };\nexport { biquadFilterNodeConstructor as BiquadFilterNode };\nexport { channelMergerNodeConstructor as ChannelMergerNode };\nexport { channelSplitterNodeConstructor as ChannelSplitterNode };\nexport { convolverNodeConstructor as ConvolverNode };\nexport { constantSourceNodeConstructor as ConstantSourceNode };\nexport { delayNodeConstructor as DelayNode };\nexport { dynamicsCompressorNodeConstructor as DynamicsCompressorNode };\nexport { gainNodeConstructor as GainNode };\nexport { iIRFilterNodeConstructor as IIRFilterNode };\nexport { mediaElementAudioSourceNodeConstructor as MediaElementAudioSourceNode };\nexport { mediaStreamAudioDestinationNodeConstructor as MediaStreamAudioDestinationNode };\nexport { mediaStreamAudioSourceNodeConstructor as MediaStreamAudioSourceNode };\nexport { mediaStreamTrackAudioSourceNodeConstructor as MediaStreamTrackAudioSourceNode };\nconst minimalAudioContextConstructor = createMinimalAudioContextConstructor(createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor);\nexport { minimalAudioContextConstructor as MinimalAudioContext };\nconst createNativeOfflineAudioContext = createCreateNativeOfflineAudioContext(createNotSupportedError, nativeOfflineAudioContextConstructor);\nconst startRendering = createStartRendering(audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nconst minimalOfflineAudioContextConstructor = createMinimalOfflineAudioContextConstructor(cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering);\nexport { minimalOfflineAudioContextConstructor as MinimalOfflineAudioContext };\nconst offlineAudioContextConstructor = createOfflineAudioContextConstructor(baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering);\nexport { offlineAudioContextConstructor as OfflineAudioContext };\nexport { oscillatorNodeConstructor as OscillatorNode };\nexport { pannerNodeConstructor as PannerNode };\nexport { periodicWaveConstructor as PeriodicWave };\nexport { stereoPannerNodeConstructor as StereoPannerNode };\nexport { waveShaperNodeConstructor as WaveShaperNode };\nexport const isAnyAudioContext = createIsAnyAudioContext(CONTEXT_STORE, isNativeAudioContext);\nexport const isAnyAudioNode = createIsAnyAudioNode(AUDIO_NODE_STORE, isNativeAudioNode);\nexport const isAnyAudioParam = createIsAnyAudioParam(AUDIO_PARAM_STORE, isNativeAudioParam);\nexport const isAnyOfflineAudioContext = createIsAnyOfflineAudioContext(CONTEXT_STORE, isNativeOfflineAudioContext);\nexport const isSupported = () => createIsSupportedPromise(cacheTestResult, createTestAudioBufferCopyChannelMethodsSubarraySupport(nativeOfflineAudioContextConstructor), createTestAudioContextCloseMethodSupport(nativeAudioContextConstructor), createTestAudioContextDecodeAudioDataMethodTypeErrorSupport(nativeOfflineAudioContextConstructor), createTestAudioContextOptionsSupport(nativeAudioContextConstructor), createTestAudioNodeConnectMethodSupport(nativeOfflineAudioContextConstructor), createTestAudioWorkletProcessorNoOutputsSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor), createTestChannelMergerNodeChannelCountSupport(createNativeAudioNode, nativeOfflineAudioContextConstructor), createTestConstantSourceNodeAccurateSchedulingSupport(createNativeAudioNode, nativeOfflineAudioContextConstructor), createTestConvolverNodeBufferReassignabilitySupport(nativeOfflineAudioContextConstructor), createTestIsSecureContextSupport(window), createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport(nativeAudioContextConstructor), createTestStereoPannerNodeDefaultValueSupport(nativeOfflineAudioContextConstructor), testTransferablesSupport);","export const testPromiseSupport = nativeContext => {\n  // This 12 numbers represent the 48 bytes of an empty WAVE file with a single sample.\n  const uint32Array = new Uint32Array([1179011410, 40, 1163280727, 544501094, 16, 131073, 44100, 176400, 1048580, 1635017060, 4, 0]);\n\n  try {\n    // Bug #1: Safari requires a successCallback.\n    const promise = nativeContext.decodeAudioData(uint32Array.buffer, () => {// Ignore the success callback.\n    });\n\n    if (promise === undefined) {\n      return false;\n    }\n\n    promise.catch(() => {// Ignore rejected errors.\n    });\n    return true;\n  } catch {// Ignore errors.\n  }\n\n  return false;\n};","export const createIndexSizeError = () => {\n  try {\n    return new DOMException('', 'IndexSizeError');\n  } catch (err) {\n    // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n    err.code = 1;\n    err.name = 'IndexSizeError';\n    return err;\n  }\n};","export const insertElementInSet = (set, element, predicate, ignoreDuplicates) => {\n  for (const lmnt of set) {\n    if (predicate(lmnt)) {\n      if (ignoreDuplicates) {\n        return false;\n      }\n\n      throw Error('The set contains at least one similar element.');\n    }\n  }\n\n  set.add(element);\n  return true;\n};","import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nimport { getEventListenersOfAudioNode } from './get-event-listeners-of-audio-node';\nexport const setInternalStateToActive = audioNode => {\n  if (ACTIVE_AUDIO_NODE_STORE.has(audioNode)) {\n    throw new Error('The AudioNode is already stored.');\n  }\n\n  ACTIVE_AUDIO_NODE_STORE.add(audioNode);\n  getEventListenersOfAudioNode(audioNode).forEach(eventListener => eventListener(true));\n};","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@babel/runtime/helpers/slicedToArray'), require('@babel/runtime/helpers/classCallCheck'), require('@babel/runtime/helpers/createClass')) : typeof define === 'function' && define.amd ? define(['exports', '@babel/runtime/helpers/slicedToArray', '@babel/runtime/helpers/classCallCheck', '@babel/runtime/helpers/createClass'], factory) : (global = global || self, factory(global.automationEvents = {}, global._slicedToArray, global._classCallCheck, global._createClass));\n})(this, function (exports, _slicedToArray, _classCallCheck, _createClass) {\n  'use strict';\n\n  _slicedToArray = _slicedToArray && Object.prototype.hasOwnProperty.call(_slicedToArray, 'default') ? _slicedToArray['default'] : _slicedToArray;\n  _classCallCheck = _classCallCheck && Object.prototype.hasOwnProperty.call(_classCallCheck, 'default') ? _classCallCheck['default'] : _classCallCheck;\n  _createClass = _createClass && Object.prototype.hasOwnProperty.call(_createClass, 'default') ? _createClass['default'] : _createClass;\n\n  var createExtendedExponentialRampToValueAutomationEvent = function createExtendedExponentialRampToValueAutomationEvent(value, endTime, insertTime) {\n    return {\n      endTime: endTime,\n      insertTime: insertTime,\n      type: 'exponentialRampToValue',\n      value: value\n    };\n  };\n\n  var createExtendedLinearRampToValueAutomationEvent = function createExtendedLinearRampToValueAutomationEvent(value, endTime, insertTime) {\n    return {\n      endTime: endTime,\n      insertTime: insertTime,\n      type: 'linearRampToValue',\n      value: value\n    };\n  };\n\n  var createSetValueAutomationEvent = function createSetValueAutomationEvent(value, startTime) {\n    return {\n      startTime: startTime,\n      type: 'setValue',\n      value: value\n    };\n  };\n\n  var createSetValueCurveAutomationEvent = function createSetValueCurveAutomationEvent(values, startTime, duration) {\n    return {\n      duration: duration,\n      startTime: startTime,\n      type: 'setValueCurve',\n      values: values\n    };\n  };\n\n  var getTargetValueAtTime = function getTargetValueAtTime(time, valueAtStartTime, _ref) {\n    var startTime = _ref.startTime,\n        target = _ref.target,\n        timeConstant = _ref.timeConstant;\n    return target + (valueAtStartTime - target) * Math.exp((startTime - time) / timeConstant);\n  };\n\n  var isExponentialRampToValueAutomationEvent = function isExponentialRampToValueAutomationEvent(automationEvent) {\n    return automationEvent.type === 'exponentialRampToValue';\n  };\n\n  var isLinearRampToValueAutomationEvent = function isLinearRampToValueAutomationEvent(automationEvent) {\n    return automationEvent.type === 'linearRampToValue';\n  };\n\n  var isAnyRampToValueAutomationEvent = function isAnyRampToValueAutomationEvent(automationEvent) {\n    return isExponentialRampToValueAutomationEvent(automationEvent) || isLinearRampToValueAutomationEvent(automationEvent);\n  };\n\n  var isSetValueAutomationEvent = function isSetValueAutomationEvent(automationEvent) {\n    return automationEvent.type === 'setValue';\n  };\n\n  var isSetValueCurveAutomationEvent = function isSetValueCurveAutomationEvent(automationEvent) {\n    return automationEvent.type === 'setValueCurve';\n  };\n\n  var getValueOfAutomationEventAtIndexAtTime = function getValueOfAutomationEventAtIndexAtTime(automationEvents, index, time, defaultValue) {\n    var automationEvent = automationEvents[index];\n    return automationEvent === undefined ? defaultValue : isAnyRampToValueAutomationEvent(automationEvent) || isSetValueAutomationEvent(automationEvent) ? automationEvent.value : isSetValueCurveAutomationEvent(automationEvent) ? automationEvent.values[automationEvent.values.length - 1] : getTargetValueAtTime(time, getValueOfAutomationEventAtIndexAtTime(automationEvents, index - 1, automationEvent.startTime, defaultValue), automationEvent);\n  };\n\n  var getEndTimeAndValueOfPreviousAutomationEvent = function getEndTimeAndValueOfPreviousAutomationEvent(automationEvents, index, currentAutomationEvent, nextAutomationEvent, defaultValue) {\n    return currentAutomationEvent === undefined ? [nextAutomationEvent.insertTime, defaultValue] : isAnyRampToValueAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.endTime, currentAutomationEvent.value] : isSetValueAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.startTime, currentAutomationEvent.value] : isSetValueCurveAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.startTime + currentAutomationEvent.duration, currentAutomationEvent.values[currentAutomationEvent.values.length - 1]] : [currentAutomationEvent.startTime, getValueOfAutomationEventAtIndexAtTime(automationEvents, index - 1, currentAutomationEvent.startTime, defaultValue)];\n  };\n\n  var isCancelAndHoldAutomationEvent = function isCancelAndHoldAutomationEvent(automationEvent) {\n    return automationEvent.type === 'cancelAndHold';\n  };\n\n  var isCancelScheduledValuesAutomationEvent = function isCancelScheduledValuesAutomationEvent(automationEvent) {\n    return automationEvent.type === 'cancelScheduledValues';\n  };\n\n  var getEventTime = function getEventTime(automationEvent) {\n    if (isCancelAndHoldAutomationEvent(automationEvent) || isCancelScheduledValuesAutomationEvent(automationEvent)) {\n      return automationEvent.cancelTime;\n    }\n\n    if (isExponentialRampToValueAutomationEvent(automationEvent) || isLinearRampToValueAutomationEvent(automationEvent)) {\n      return automationEvent.endTime;\n    }\n\n    return automationEvent.startTime;\n  };\n\n  var getExponentialRampValueAtTime = function getExponentialRampValueAtTime(time, startTime, valueAtStartTime, _ref) {\n    var endTime = _ref.endTime,\n        value = _ref.value;\n\n    if (valueAtStartTime === value) {\n      return value;\n    }\n\n    if (0 < valueAtStartTime && 0 < value || valueAtStartTime < 0 && value < 0) {\n      return valueAtStartTime * Math.pow(value / valueAtStartTime, (time - startTime) / (endTime - startTime));\n    }\n\n    return 0;\n  };\n\n  var getLinearRampValueAtTime = function getLinearRampValueAtTime(time, startTime, valueAtStartTime, _ref) {\n    var endTime = _ref.endTime,\n        value = _ref.value;\n    return valueAtStartTime + (time - startTime) / (endTime - startTime) * (value - valueAtStartTime);\n  };\n\n  var interpolateValue = function interpolateValue(values, theoreticIndex) {\n    var lowerIndex = Math.floor(theoreticIndex);\n    var upperIndex = Math.ceil(theoreticIndex);\n\n    if (lowerIndex === upperIndex) {\n      return values[lowerIndex];\n    }\n\n    return (1 - (theoreticIndex - lowerIndex)) * values[lowerIndex] + (1 - (upperIndex - theoreticIndex)) * values[upperIndex];\n  };\n\n  var getValueCurveValueAtTime = function getValueCurveValueAtTime(time, _ref) {\n    var duration = _ref.duration,\n        startTime = _ref.startTime,\n        values = _ref.values;\n    var theoreticIndex = (time - startTime) / duration * (values.length - 1);\n    return interpolateValue(values, theoreticIndex);\n  };\n\n  var isSetTargetAutomationEvent = function isSetTargetAutomationEvent(automationEvent) {\n    return automationEvent.type === 'setTarget';\n  };\n\n  var AutomationEventList = /*#__PURE__*/function () {\n    function AutomationEventList(defaultValue) {\n      _classCallCheck(this, AutomationEventList);\n\n      this._automationEvents = [];\n      this._currenTime = 0;\n      this._defaultValue = defaultValue;\n    }\n\n    _createClass(AutomationEventList, [{\n      key: Symbol.iterator,\n      value: function value() {\n        return this._automationEvents[Symbol.iterator]();\n      }\n    }, {\n      key: \"add\",\n      value: function add(automationEvent) {\n        var eventTime = getEventTime(automationEvent);\n\n        if (isCancelAndHoldAutomationEvent(automationEvent) || isCancelScheduledValuesAutomationEvent(automationEvent)) {\n          var index = this._automationEvents.findIndex(function (currentAutomationEvent) {\n            return getEventTime(currentAutomationEvent) >= eventTime;\n          });\n\n          var removedAutomationEvent = this._automationEvents[index];\n\n          if (index !== -1) {\n            this._automationEvents = this._automationEvents.slice(0, index);\n          }\n\n          if (isCancelAndHoldAutomationEvent(automationEvent)) {\n            var lastAutomationEvent = this._automationEvents[this._automationEvents.length - 1];\n\n            if (removedAutomationEvent !== undefined && isAnyRampToValueAutomationEvent(removedAutomationEvent)) {\n              if (isSetTargetAutomationEvent(lastAutomationEvent)) {\n                throw new Error('The internal list is malformed.');\n              }\n\n              var startTime = isSetValueCurveAutomationEvent(lastAutomationEvent) ? lastAutomationEvent.startTime + lastAutomationEvent.duration : getEventTime(lastAutomationEvent);\n              var startValue = isSetValueCurveAutomationEvent(lastAutomationEvent) ? lastAutomationEvent.values[lastAutomationEvent.values.length - 1] : lastAutomationEvent.value;\n              var value = isExponentialRampToValueAutomationEvent(removedAutomationEvent) ? getExponentialRampValueAtTime(eventTime, startTime, startValue, removedAutomationEvent) : getLinearRampValueAtTime(eventTime, startTime, startValue, removedAutomationEvent);\n              var truncatedAutomationEvent = isExponentialRampToValueAutomationEvent(removedAutomationEvent) ? createExtendedExponentialRampToValueAutomationEvent(value, eventTime, this._currenTime) : createExtendedLinearRampToValueAutomationEvent(value, eventTime, this._currenTime);\n\n              this._automationEvents.push(truncatedAutomationEvent);\n            }\n\n            if (lastAutomationEvent !== undefined && isSetTargetAutomationEvent(lastAutomationEvent)) {\n              this._automationEvents.push(createSetValueAutomationEvent(this.getValue(eventTime), eventTime));\n            }\n\n            if (lastAutomationEvent !== undefined && isSetValueCurveAutomationEvent(lastAutomationEvent) && lastAutomationEvent.startTime + lastAutomationEvent.duration > eventTime) {\n              this._automationEvents[this._automationEvents.length - 1] = createSetValueCurveAutomationEvent(new Float32Array([6, 7]), lastAutomationEvent.startTime, eventTime - lastAutomationEvent.startTime);\n            }\n          }\n        } else {\n          var _index = this._automationEvents.findIndex(function (currentAutomationEvent) {\n            return getEventTime(currentAutomationEvent) > eventTime;\n          });\n\n          var previousAutomationEvent = _index === -1 ? this._automationEvents[this._automationEvents.length - 1] : this._automationEvents[_index - 1];\n\n          if (previousAutomationEvent !== undefined && isSetValueCurveAutomationEvent(previousAutomationEvent) && getEventTime(previousAutomationEvent) + previousAutomationEvent.duration > eventTime) {\n            return false;\n          }\n\n          var persistentAutomationEvent = isExponentialRampToValueAutomationEvent(automationEvent) ? createExtendedExponentialRampToValueAutomationEvent(automationEvent.value, automationEvent.endTime, this._currenTime) : isLinearRampToValueAutomationEvent(automationEvent) ? createExtendedLinearRampToValueAutomationEvent(automationEvent.value, eventTime, this._currenTime) : automationEvent;\n\n          if (_index === -1) {\n            this._automationEvents.push(persistentAutomationEvent);\n          } else {\n            if (isSetValueCurveAutomationEvent(automationEvent) && eventTime + automationEvent.duration > getEventTime(this._automationEvents[_index])) {\n              return false;\n            }\n\n            this._automationEvents.splice(_index, 0, persistentAutomationEvent);\n          }\n        }\n\n        return true;\n      }\n    }, {\n      key: \"flush\",\n      value: function flush(time) {\n        var index = this._automationEvents.findIndex(function (currentAutomationEvent) {\n          return getEventTime(currentAutomationEvent) > time;\n        });\n\n        if (index > 1) {\n          var remainingAutomationEvents = this._automationEvents.slice(index - 1);\n\n          var firstRemainingAutomationEvent = remainingAutomationEvents[0];\n\n          if (isSetTargetAutomationEvent(firstRemainingAutomationEvent)) {\n            remainingAutomationEvents.unshift(createSetValueAutomationEvent(getValueOfAutomationEventAtIndexAtTime(this._automationEvents, index - 2, firstRemainingAutomationEvent.startTime, this._defaultValue), firstRemainingAutomationEvent.startTime));\n          }\n\n          this._automationEvents = remainingAutomationEvents;\n        }\n      }\n    }, {\n      key: \"getValue\",\n      value: function getValue(time) {\n        if (this._automationEvents.length === 0) {\n          return this._defaultValue;\n        }\n\n        var lastAutomationEvent = this._automationEvents[this._automationEvents.length - 1];\n\n        var index = this._automationEvents.findIndex(function (automationEvent) {\n          return getEventTime(automationEvent) > time;\n        });\n\n        var nextAutomationEvent = this._automationEvents[index];\n        var currentAutomationEvent = getEventTime(lastAutomationEvent) <= time ? lastAutomationEvent : this._automationEvents[index - 1];\n\n        if (currentAutomationEvent !== undefined && isSetTargetAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent) || nextAutomationEvent.insertTime > time)) {\n          return getTargetValueAtTime(time, getValueOfAutomationEventAtIndexAtTime(this._automationEvents, index - 2, currentAutomationEvent.startTime, this._defaultValue), currentAutomationEvent);\n        }\n\n        if (currentAutomationEvent !== undefined && isSetValueAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent))) {\n          return currentAutomationEvent.value;\n        }\n\n        if (currentAutomationEvent !== undefined && isSetValueCurveAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent) || currentAutomationEvent.startTime + currentAutomationEvent.duration > time)) {\n          if (time < currentAutomationEvent.startTime + currentAutomationEvent.duration) {\n            return getValueCurveValueAtTime(time, currentAutomationEvent);\n          }\n\n          return currentAutomationEvent.values[currentAutomationEvent.values.length - 1];\n        }\n\n        if (currentAutomationEvent !== undefined && isAnyRampToValueAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent))) {\n          return currentAutomationEvent.value;\n        }\n\n        if (nextAutomationEvent !== undefined && isExponentialRampToValueAutomationEvent(nextAutomationEvent)) {\n          var _getEndTimeAndValueOf = getEndTimeAndValueOfPreviousAutomationEvent(this._automationEvents, index - 1, currentAutomationEvent, nextAutomationEvent, this._defaultValue),\n              _getEndTimeAndValueOf2 = _slicedToArray(_getEndTimeAndValueOf, 2),\n              startTime = _getEndTimeAndValueOf2[0],\n              value = _getEndTimeAndValueOf2[1];\n\n          return getExponentialRampValueAtTime(time, startTime, value, nextAutomationEvent);\n        }\n\n        if (nextAutomationEvent !== undefined && isLinearRampToValueAutomationEvent(nextAutomationEvent)) {\n          var _getEndTimeAndValueOf3 = getEndTimeAndValueOfPreviousAutomationEvent(this._automationEvents, index - 1, currentAutomationEvent, nextAutomationEvent, this._defaultValue),\n              _getEndTimeAndValueOf4 = _slicedToArray(_getEndTimeAndValueOf3, 2),\n              _startTime = _getEndTimeAndValueOf4[0],\n              _value = _getEndTimeAndValueOf4[1];\n\n          return getLinearRampValueAtTime(time, _startTime, _value, nextAutomationEvent);\n        }\n\n        return this._defaultValue;\n      }\n    }]);\n\n    return AutomationEventList;\n  }();\n\n  var createCancelAndHoldAutomationEvent = function createCancelAndHoldAutomationEvent(cancelTime) {\n    return {\n      cancelTime: cancelTime,\n      type: 'cancelAndHold'\n    };\n  };\n\n  var createCancelScheduledValuesAutomationEvent = function createCancelScheduledValuesAutomationEvent(cancelTime) {\n    return {\n      cancelTime: cancelTime,\n      type: 'cancelScheduledValues'\n    };\n  };\n\n  var createExponentialRampToValueAutomationEvent = function createExponentialRampToValueAutomationEvent(value, endTime) {\n    return {\n      endTime: endTime,\n      type: 'exponentialRampToValue',\n      value: value\n    };\n  };\n\n  var createLinearRampToValueAutomationEvent = function createLinearRampToValueAutomationEvent(value, endTime) {\n    return {\n      endTime: endTime,\n      type: 'linearRampToValue',\n      value: value\n    };\n  };\n\n  var createSetTargetAutomationEvent = function createSetTargetAutomationEvent(target, startTime, timeConstant) {\n    return {\n      startTime: startTime,\n      target: target,\n      timeConstant: timeConstant,\n      type: 'setTarget'\n    };\n  };\n\n  exports.AutomationEventList = AutomationEventList;\n  exports.createCancelAndHoldAutomationEvent = createCancelAndHoldAutomationEvent;\n  exports.createCancelScheduledValuesAutomationEvent = createCancelScheduledValuesAutomationEvent;\n  exports.createExponentialRampToValueAutomationEvent = createExponentialRampToValueAutomationEvent;\n  exports.createLinearRampToValueAutomationEvent = createLinearRampToValueAutomationEvent;\n  exports.createSetTargetAutomationEvent = createSetTargetAutomationEvent;\n  exports.createSetValueAutomationEvent = createSetValueAutomationEvent;\n  exports.createSetValueCurveAutomationEvent = createSetValueCurveAutomationEvent;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","import { CYCLE_COUNTERS } from '../globals';\nexport const isPartOfACycle = audioNode => {\n  return CYCLE_COUNTERS.has(audioNode);\n};","import { EVENT_LISTENERS } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getEventListenersOfAudioNode = audioNode => {\n  return getValueForKey(EVENT_LISTENERS, audioNode);\n};","import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nimport { getEventListenersOfAudioNode } from './get-event-listeners-of-audio-node';\nexport const setInternalStateToPassive = audioNode => {\n  if (!ACTIVE_AUDIO_NODE_STORE.has(audioNode)) {\n    throw new Error('The AudioNode is not stored.');\n  }\n\n  ACTIVE_AUDIO_NODE_STORE.delete(audioNode);\n  getEventListenersOfAudioNode(audioNode).forEach(eventListener => eventListener(false));\n};","import { isAudioNode } from './audio-node';\nexport const isAudioNodeOutputConnection = outputConnection => {\n  return isAudioNode(outputConnection[0]);\n};","import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nexport const isActiveAudioNode = audioNode => ACTIVE_AUDIO_NODE_STORE.has(audioNode);","export const isAudioNode = audioNodeOrAudioParam => {\n  return 'context' in audioNodeOrAudioParam;\n};","export const isNativeAudioNode = nativeAudioNodeOrAudioParam => {\n  return 'context' in nativeAudioNodeOrAudioParam;\n};","import { AUDIO_PARAM_CONNECTIONS_STORE } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getAudioParamConnections = audioParam => {\n  return getValueForKey(AUDIO_PARAM_CONNECTIONS_STORE, audioParam);\n};","import { AUDIO_PARAM_STORE } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getNativeAudioParam = audioParam => {\n  return getValueForKey(AUDIO_PARAM_STORE, audioParam);\n};","export const wrapEventListener = (target, eventListener) => {\n  return event => {\n    const descriptor = {\n      value: target\n    };\n    Object.defineProperties(event, {\n      currentTarget: descriptor,\n      target: descriptor\n    });\n\n    if (typeof eventListener === 'function') {\n      return eventListener.call(target, event);\n    }\n\n    return eventListener.handleEvent.call(target, event);\n  };\n};","import { createIndexSizeError } from '../factories/index-size-error';\nexport const wrapAudioBufferGetChannelDataMethod = audioBuffer => {\n  audioBuffer.getChannelData = (getChannelData => {\n    return channel => {\n      try {\n        return getChannelData.call(audioBuffer, channel);\n      } catch (err) {\n        if (err.code === 12) {\n          throw createIndexSizeError();\n        }\n\n        throw err;\n      }\n    };\n  })(audioBuffer.getChannelData);\n};","export const wrapAudioScheduledSourceNodeStartMethodNegativeParameters = nativeAudioScheduledSourceNode => {\n  nativeAudioScheduledSourceNode.start = (start => {\n    return (when = 0, offset = 0, duration) => {\n      if (typeof duration === 'number' && duration < 0 || offset < 0 || when < 0) {\n        throw new RangeError(\"The parameters can't be negative.\");\n      } // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n\n\n      start.call(nativeAudioScheduledSourceNode, when, offset, duration);\n    };\n  })(nativeAudioScheduledSourceNode.start);\n};","export const wrapAudioScheduledSourceNodeStopMethodNegativeParameters = nativeAudioScheduledSourceNode => {\n  nativeAudioScheduledSourceNode.stop = (stop => {\n    return (when = 0) => {\n      if (when < 0) {\n        throw new RangeError(\"The parameter can't be negative.\");\n      }\n\n      stop.call(nativeAudioScheduledSourceNode, when);\n    };\n  })(nativeAudioScheduledSourceNode.stop);\n};","export const testAudioBufferCopyChannelMethodsOutOfBoundsSupport = nativeAudioBuffer => {\n  try {\n    nativeAudioBuffer.copyToChannel(new Float32Array(1), 0, -1);\n  } catch {\n    return false;\n  }\n\n  return true;\n};","import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nexport const connectNativeAudioNodeToNativeAudioNode = (nativeSourceAudioNode, nativeDestinationAudioNode, output, input) => {\n  if (isNativeAudioNodeFaker(nativeDestinationAudioNode)) {\n    const fakeNativeDestinationAudioNode = nativeDestinationAudioNode.inputs[input];\n    nativeSourceAudioNode.connect(fakeNativeDestinationAudioNode, output, 0);\n    return [fakeNativeDestinationAudioNode, output, 0];\n  }\n\n  nativeSourceAudioNode.connect(nativeDestinationAudioNode, output, input);\n  return [nativeDestinationAudioNode, output, input];\n};","import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nexport const disconnectNativeAudioNodeFromNativeAudioNode = (nativeSourceAudioNode, nativeDestinationAudioNode, output, input) => {\n  if (isNativeAudioNodeFaker(nativeDestinationAudioNode)) {\n    nativeSourceAudioNode.disconnect(nativeDestinationAudioNode.inputs[input], output, 0);\n  } else {\n    nativeSourceAudioNode.disconnect(nativeDestinationAudioNode, output, input);\n  }\n};","export function copyFromChannel(audioBuffer, // @todo There is currently no way to define something like { [ key: number | string ]: Float32Array }\nparent, key, channelNumber, bufferOffset) {\n  if (typeof audioBuffer.copyFromChannel === 'function') {\n    // The byteLength will be 0 when the ArrayBuffer was transferred.\n    if (parent[key].byteLength === 0) {\n      parent[key] = new Float32Array(128);\n    }\n\n    audioBuffer.copyFromChannel(parent[key], channelNumber, bufferOffset); // Bug #5: Safari does not support copyFromChannel().\n  } else {\n    const channelData = audioBuffer.getChannelData(channelNumber); // The byteLength will be 0 when the ArrayBuffer was transferred.\n\n    if (parent[key].byteLength === 0) {\n      parent[key] = channelData.slice(bufferOffset, bufferOffset + 128);\n    } else {\n      const slicedInput = new Float32Array(channelData.buffer, bufferOffset * Float32Array.BYTES_PER_ELEMENT, 128);\n      parent[key].set(slicedInput);\n    }\n  }\n}","export const createNestedArrays = (x, y) => {\n  const arrays = [];\n\n  for (let i = 0; i < x; i += 1) {\n    const array = [];\n    const length = typeof y === 'number' ? y : y[i];\n\n    for (let j = 0; j < length; j += 1) {\n      array.push(new Float32Array(128));\n    }\n\n    arrays.push(array);\n  }\n\n  return arrays;\n};","export const createInvalidAccessError = () => {\n  try {\n    return new DOMException('', 'InvalidAccessError');\n  } catch (err) {\n    // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n    err.code = 15;\n    err.name = 'InvalidAccessError';\n    return err;\n  }\n};","export const overwriteAccessors = (object, property, createGetter, createSetter) => {\n  let prototype = Object.getPrototypeOf(object);\n\n  while (!prototype.hasOwnProperty(property)) {\n    prototype = Object.getPrototypeOf(prototype);\n  }\n\n  const {\n    get,\n    set\n  } = Object.getOwnPropertyDescriptor(prototype, property);\n  Object.defineProperty(object, property, {\n    get: createGetter(get),\n    set: createSetter(set)\n  });\n};","export const isValidLatencyHint = latencyHint => {\n  return latencyHint === undefined || typeof latencyHint === 'number' || typeof latencyHint === 'string' && (latencyHint === 'balanced' || latencyHint === 'interactive' || latencyHint === 'playback');\n};","export class ReadOnlyMap {\n  constructor(parameters) {\n    this._map = new Map(parameters);\n  }\n\n  get size() {\n    return this._map.size;\n  }\n\n  entries() {\n    return this._map.entries();\n  }\n\n  forEach(callback, thisArg = null) {\n    return this._map.forEach((value, key) => callback.call(thisArg, value, key, this));\n  }\n\n  get(name) {\n    return this._map.get(name);\n  }\n\n  has(name) {\n    return this._map.has(name);\n  }\n\n  keys() {\n    return this._map.keys();\n  }\n\n  values() {\n    return this._map.values();\n  }\n\n}","export const copyToChannel = (audioBuffer, parent, key, channelNumber, bufferOffset) => {\n  if (typeof audioBuffer.copyToChannel === 'function') {\n    // The byteLength will be 0 when the ArrayBuffer was transferred.\n    if (parent[key].byteLength !== 0) {\n      audioBuffer.copyToChannel(parent[key], channelNumber, bufferOffset);\n    } // Bug #5: Safari does not support copyToChannel().\n\n  } else {\n    // The byteLength will be 0 when the ArrayBuffer was transferred.\n    if (parent[key].byteLength !== 0) {\n      audioBuffer.getChannelData(channelNumber).set(parent[key], bufferOffset);\n    }\n  }\n};","// This implementation as shamelessly inspired by source code of\n// tslint:disable-next-line:max-line-length\n// {@link https://chromium.googlesource.com/chromium/src.git/+/master/third_party/WebKit/Source/platform/audio/IIRFilter.cpp|Chromium's IIRFilter}.\nexport const filterBuffer = (feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffer, yBuffer, bufferIndex, bufferLength, input, output) => {\n  const inputLength = input.length;\n  let i = bufferIndex;\n\n  for (let j = 0; j < inputLength; j += 1) {\n    let y = feedforward[0] * input[j];\n\n    for (let k = 1; k < minLength; k += 1) {\n      const x = i - k & bufferLength - 1; // tslint:disable-line:no-bitwise\n\n      y += feedforward[k] * xBuffer[x];\n      y -= feedback[k] * yBuffer[x];\n    }\n\n    for (let k = minLength; k < feedforwardLength; k += 1) {\n      y += feedforward[k] * xBuffer[i - k & bufferLength - 1]; // tslint:disable-line:no-bitwise\n    }\n\n    for (let k = minLength; k < feedbackLength; k += 1) {\n      y -= feedback[k] * yBuffer[i - k & bufferLength - 1]; // tslint:disable-line:no-bitwise\n    }\n\n    xBuffer[i] = input[j];\n    yBuffer[i] = y;\n    i = i + 1 & bufferLength - 1; // tslint:disable-line:no-bitwise\n\n    output[j] = y;\n  }\n\n  return i;\n};","export const computeBufferSize = (baseLatency, sampleRate) => {\n  if (baseLatency === null) {\n    return 512;\n  }\n\n  return Math.max(512, Math.min(16384, Math.pow(2, Math.round(Math.log2(baseLatency * sampleRate)))));\n};","export const createUnknownError = () => {\n  try {\n    return new DOMException('', 'UnknownError');\n  } catch (err) {\n    // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n    err.name = 'UnknownError';\n    return err;\n  }\n};","export const isDCCurve = curve => {\n  if (curve === null) {\n    return false;\n  }\n\n  const length = curve.length;\n\n  if (length % 2 !== 0) {\n    return curve[Math.floor(length / 2)] !== 0;\n  }\n\n  return curve[length / 2 - 1] + curve[length / 2] !== 0;\n};","export * from './analyser-node';\nexport * from './analyser-options';\nexport * from './audio-buffer';\nexport * from './audio-buffer-options';\nexport * from './audio-buffer-source-node';\nexport * from './audio-buffer-source-node-renderer';\nexport * from './audio-buffer-source-options';\nexport * from './audio-context';\nexport * from './audio-context-options';\nexport * from './audio-destination-node';\nexport * from './audio-listener';\nexport * from './audio-node';\nexport * from './audio-node-options';\nexport * from './audio-node-renderer';\nexport * from './audio-param';\nexport * from './audio-param-descriptor';\nexport * from './audio-param-renderer';\nexport * from './audio-scheduled-source-node';\nexport * from './audio-scheduled-source-node-event-map';\nexport * from './audio-worklet';\nexport * from './audio-worklet-node';\nexport * from './audio-worklet-node-event-map';\nexport * from './audio-worklet-node-options';\nexport * from './audio-worklet-processor';\nexport * from './audio-worklet-processor-constructor';\nexport * from './automation';\nexport * from './base-audio-context';\nexport * from './biquad-filter-node';\nexport * from './biquad-filter-options';\nexport * from './channel-merger-options';\nexport * from './channel-splitter-options';\nexport * from './common-audio-context';\nexport * from './common-offline-audio-context';\nexport * from './constant-source-node';\nexport * from './constant-source-node-renderer';\nexport * from './constant-source-options';\nexport * from './convolver-node';\nexport * from './convolver-options';\nexport * from './delay-node';\nexport * from './delay-options';\nexport * from './dynamics-compressor-node';\nexport * from './dynamics-compressor-options';\nexport * from './gain-node';\nexport * from './gain-options';\nexport * from './iir-filter-node';\nexport * from './iir-filter-options';\nexport * from './media-element-audio-source-node';\nexport * from './media-element-audio-source-options';\nexport * from './media-stream-audio-destination-node';\nexport * from './media-stream-audio-source-node';\nexport * from './media-stream-audio-source-options';\nexport * from './media-stream-track-audio-source-node';\nexport * from './media-stream-track-audio-source-options';\nexport * from './minimal-audio-context';\nexport * from './minimal-base-audio-context';\nexport * from './minimal-base-audio-context-event-map';\nexport * from './minimal-offline-audio-context';\nexport * from './native-audio-node-faker';\nexport * from './native-audio-worklet-node-faker';\nexport * from './native-constant-source-node-faker';\nexport * from './native-convolver-node-faker';\nexport * from './native-iir-filter-node-faker';\nexport * from './native-panner-node-faker';\nexport * from './native-stereo-panner-node-faker';\nexport * from './native-wave-shaper-node-faker';\nexport * from './offline-audio-completion-event';\nexport * from './offline-audio-context';\nexport * from './offline-audio-context-constructor';\nexport * from './offline-audio-context-options';\nexport * from './oscillator-node';\nexport * from './oscillator-node-renderer';\nexport * from './oscillator-options';\nexport * from './panner-node';\nexport * from './panner-options';\nexport * from './periodic-wave';\nexport * from './periodic-wave-constraints';\nexport * from './periodic-wave-options';\nexport * from './read-only-map';\nexport * from './stereo-panner-node';\nexport * from './stereo-panner-options';\nexport * from './wave-shaper-node';\nexport * from './wave-shaper-options';\nexport * from './worklet-options';","export * from './abort-error-factory';\nexport * from './active-input-connection';\nexport * from './add-audio-node-connections-factory';\nexport * from './add-audio-node-connections-function';\nexport * from './add-audio-param-connections-factory';\nexport * from './add-audio-param-connections-function';\nexport * from './add-audio-worklet-module-factory';\nexport * from './add-audio-worklet-module-function';\nexport * from './add-silent-connection-factory';\nexport * from './add-silent-connection-function';\nexport * from './add-unrendered-audio-worklet-node-factory';\nexport * from './add-unrendered-audio-worklet-node-function';\nexport * from './analyser-node-constructor';\nexport * from './analyser-node-constructor-factory';\nexport * from './analyser-node-renderer-factory';\nexport * from './analyser-node-renderer-factory-factory';\nexport * from './any-audio-buffer';\nexport * from './any-context';\nexport * from './audio-buffer-constructor';\nexport * from './audio-buffer-constructor-factory';\nexport * from './audio-buffer-source-node-constructor';\nexport * from './audio-buffer-source-node-constructor-factory';\nexport * from './audio-buffer-source-node-renderer';\nexport * from './audio-buffer-source-node-renderer-factory';\nexport * from './audio-buffer-source-node-renderer-factory-factory';\nexport * from './audio-buffer-store';\nexport * from './audio-context-constructor';\nexport * from './audio-context-constructor-factory';\nexport * from './audio-context-latency-category';\nexport * from './audio-context-state';\nexport * from './audio-destination-node-constructor';\nexport * from './audio-destination-node-constructor-factory';\nexport * from './audio-destination-node-renderer-factory';\nexport * from './audio-listener-factory';\nexport * from './audio-listener-factory-factory';\nexport * from './audio-node-connections';\nexport * from './audio-node-connections-store';\nexport * from './audio-node-constructor';\nexport * from './audio-node-constructor-factory';\nexport * from './audio-node-output-connection';\nexport * from './audio-node-renderer';\nexport * from './audio-node-store';\nexport * from './audio-param-audio-node-store';\nexport * from './audio-param-connections';\nexport * from './audio-param-connections-store';\nexport * from './audio-param-factory';\nexport * from './audio-param-factory-factory';\nexport * from './audio-param-map';\nexport * from './audio-param-output-connection';\nexport * from './audio-param-renderer-factory';\nexport * from './audio-param-store';\nexport * from './audio-worklet-node-constructor';\nexport * from './audio-worklet-node-constructor-factory';\nexport * from './audio-worklet-node-renderer-factory';\nexport * from './audio-worklet-node-renderer-factory-factory';\nexport * from './auxiliary-gain-node-store';\nexport * from './base-audio-context-constructor';\nexport * from './base-audio-context-constructor-factory';\nexport * from './biquad-filter-node-constructor';\nexport * from './biquad-filter-node-constructor-factory';\nexport * from './biquad-filter-node-renderer-factory';\nexport * from './biquad-filter-node-renderer-factory-factory';\nexport * from './biquad-filter-type';\nexport * from './channel-count-mode';\nexport * from './channel-interpretation';\nexport * from './channel-merger-node-constructor';\nexport * from './channel-merger-node-constructor-factory';\nexport * from './channel-merger-node-renderer-factory';\nexport * from './channel-merger-node-renderer-factory-factory';\nexport * from './channel-splitter-node-constructor';\nexport * from './channel-splitter-node-constructor-factory';\nexport * from './channel-splitter-node-renderer-factory';\nexport * from './channel-splitter-node-renderer-factory-factory';\nexport * from './cache-test-result-factory';\nexport * from './cache-test-result-function';\nexport * from './connect-audio-param-factory';\nexport * from './connect-audio-param-function';\nexport * from './connect-multiple-outputs-factory';\nexport * from './connect-multiple-outputs-function';\nexport * from './connect-native-audio-node-to-native-audio-node-function';\nexport * from './connected-native-audio-buffer-source-node-factory';\nexport * from './connected-native-audio-buffer-source-node-factory-factory';\nexport * from './constant-source-node-constructor';\nexport * from './constant-source-node-constructor-factory';\nexport * from './constant-source-node-renderer';\nexport * from './constant-source-node-renderer-factory';\nexport * from './constant-source-node-renderer-factory-factory';\nexport * from './constructor';\nexport * from './context';\nexport * from './context-store';\nexport * from './convert-number-to-unsigned-long-factory';\nexport * from './convert-number-to-unsigned-long-function';\nexport * from './convolver-node-constructor';\nexport * from './convolver-node-constructor-factory';\nexport * from './convolver-node-renderer-factory';\nexport * from './convolver-node-renderer-factory-factory';\nexport * from './create-native-offline-audio-context-factory';\nexport * from './create-native-offline-audio-context-function';\nexport * from './cycle-counters';\nexport * from './data-clone-error-factory';\nexport * from './decode-audio-data-factory';\nexport * from './decode-audio-data-function';\nexport * from './decode-error-callback';\nexport * from './decode-success-callback';\nexport * from './decrement-cycle-counter-factory';\nexport * from './decrement-cycle-counter-function';\nexport * from './delay-node-constructor';\nexport * from './delay-node-constructor-factory';\nexport * from './delay-node-renderer-factory';\nexport * from './delay-node-renderer-factory-factory';\nexport * from './delete-unrendered-audio-worklet-node-factory';\nexport * from './delete-unrendered-audio-worklet-node-function';\nexport * from './detect-cycles-factory';\nexport * from './detect-cycles-function';\nexport * from './disconnect-multiple-outputs-factory';\nexport * from './disconnect-multiple-outputs-function';\nexport * from './disconnect-native-audio-node-from-native-audio-node-function';\nexport * from './distance-model-type';\nexport * from './dynamics-compressor-node-constructor';\nexport * from './dynamics-compressor-node-constructor-factory';\nexport * from './dynamics-compressor-node-renderer-factory';\nexport * from './dynamics-compressor-node-renderer-factory-factory';\nexport * from './encoding-error-factory';\nexport * from './error-event-handler';\nexport * from './evaluate-audio-worklet-global-scope-function';\nexport * from './evaluate-source-factory';\nexport * from './evaluate-source-function';\nexport * from './event-handler';\nexport * from './event-target-constructor';\nexport * from './event-target-constructor-factory';\nexport * from './expose-current-frame-and-current-time-factory';\nexport * from './expose-current-frame-and-current-time-function';\nexport * from './fetch-source-factory';\nexport * from './fetch-source-function';\nexport * from './gain-node-constructor';\nexport * from './gain-node-constructor-factory';\nexport * from './gain-node-renderer-factory';\nexport * from './gain-node-renderer-factory-factory';\nexport * from './get-audio-node-connections-function';\nexport * from './get-audio-node-renderer-factory';\nexport * from './get-audio-node-renderer-function';\nexport * from './get-audio-param-connections-function';\nexport * from './get-audio-param-renderer-factory';\nexport * from './get-audio-param-renderer-function';\nexport * from './get-backup-native-context-factory';\nexport * from './get-backup-native-context-function';\nexport * from './get-native-audio-node-function';\nexport * from './get-native-audio-param-function';\nexport * from './get-native-context-function';\nexport * from './get-native-context-factory';\nexport * from './get-unrendered-audio-worklet-nodes-factory';\nexport * from './get-unrendered-audio-worklet-nodes-function';\nexport * from './get-value-for-key-function';\nexport * from './iir-filter-node-constructor';\nexport * from './iir-filter-node-constructor-factory';\nexport * from './iir-filter-node-renderer-factory';\nexport * from './iir-filter-node-renderer-factory-factory';\nexport * from './increment-cycle-counter-factory';\nexport * from './increment-cycle-counter-factory-factory';\nexport * from './increment-cycle-counter-function';\nexport * from './index-size-error-factory';\nexport * from './insert-element-in-set-function';\nexport * from './internal-state-event-listener';\nexport * from './invalid-access-error-factory';\nexport * from './invalid-state-error-factory';\nexport * from './is-active-audio-node-function';\nexport * from './is-any-audio-context-factory';\nexport * from './is-any-audio-context-function';\nexport * from './is-any-audio-node-factory';\nexport * from './is-any-audio-node-function';\nexport * from './is-any-audio-param-factory';\nexport * from './is-any-audio-param-function';\nexport * from './is-any-offline-audio-context-factory';\nexport * from './is-any-offline-audio-context-function';\nexport * from './is-dc-curve-function';\nexport * from './is-native-audio-context-factory';\nexport * from './is-native-audio-context-function';\nexport * from './is-native-audio-node-factory';\nexport * from './is-native-audio-node-function';\nexport * from './is-native-audio-param-factory';\nexport * from './is-native-audio-param-function';\nexport * from './is-native-context-factory';\nexport * from './is-native-context-function';\nexport * from './is-native-offline-audio-context-factory';\nexport * from './is-native-offline-audio-context-function';\nexport * from './is-part-of-a-cycle-function';\nexport * from './is-secure-context-factory';\nexport * from './is-supported-promise-factory';\nexport * from './media-element-audio-source-node-constructor';\nexport * from './media-element-audio-source-node-constructor-factory';\nexport * from './media-stream-audio-destination-node-constructor';\nexport * from './media-stream-audio-destination-node-constructor-factory';\nexport * from './media-stream-audio-source-node-constructor';\nexport * from './media-stream-audio-source-node-constructor-factory';\nexport * from './media-stream-track-audio-source-node-constructor';\nexport * from './media-stream-track-audio-source-node-constructor-factory';\nexport * from './minimal-audio-context-constructor';\nexport * from './minimal-audio-context-constructor-factory';\nexport * from './minimal-base-audio-context-constructor';\nexport * from './minimal-base-audio-context-constructor-factory';\nexport * from './minimal-offline-audio-context-constructor';\nexport * from './minimal-offline-audio-context-constructor-factory';\nexport * from './monitor-connections-factory';\nexport * from './monitor-connections-function';\nexport * from './native-analyser-node';\nexport * from './native-analyser-node-factory';\nexport * from './native-analyser-node-factory-factory';\nexport * from './native-audio-buffer';\nexport * from './native-audio-buffer-constructor';\nexport * from './native-audio-buffer-constructor-factory';\nexport * from './native-audio-buffer-source-node';\nexport * from './native-audio-buffer-source-node-factory';\nexport * from './native-audio-buffer-source-node-factory-factory';\nexport * from './native-audio-context';\nexport * from './native-audio-context-constructor';\nexport * from './native-audio-context-constructor-factory';\nexport * from './native-audio-destination-node';\nexport * from './native-audio-destination-node-factory';\nexport * from './native-audio-destination-node-factory-factory';\nexport * from './native-audio-listener';\nexport * from './native-audio-node';\nexport * from './native-audio-node-factory';\nexport * from './native-audio-node-factory-factory';\nexport * from './native-audio-param';\nexport * from './native-audio-param-map';\nexport * from './native-audio-worklet';\nexport * from './native-audio-worklet-node';\nexport * from './native-audio-worklet-node-constructor';\nexport * from './native-audio-worklet-node-constructor-factory';\nexport * from './native-audio-worklet-node-factory';\nexport * from './native-audio-worklet-node-factory-factory';\nexport * from './native-audio-worklet-node-faker-factory';\nexport * from './native-audio-worklet-node-faker-factory-factory';\nexport * from './native-audio-worklet-node-options';\nexport * from './native-biquad-filter-node';\nexport * from './native-biquad-filter-node-factory';\nexport * from './native-biquad-filter-node-factory-factory';\nexport * from './native-channel-merger-node';\nexport * from './native-channel-merger-node-factory';\nexport * from './native-channel-merger-node-factory-factory';\nexport * from './native-channel-splitter-node';\nexport * from './native-channel-splitter-node-factory';\nexport * from './native-channel-splitter-node-factory-factory';\nexport * from './native-constant-source-node';\nexport * from './native-constant-source-node-factory';\nexport * from './native-constant-source-node-factory-factory';\nexport * from './native-constant-source-node-faker-factory';\nexport * from './native-constant-source-node-faker-factory-factory';\nexport * from './native-context';\nexport * from './native-convolver-node';\nexport * from './native-convolver-node-factory';\nexport * from './native-convolver-node-factory-factory';\nexport * from './native-convolver-node-faker-factory';\nexport * from './native-convolver-node-faker-factory-factory';\nexport * from './native-delay-node-factory';\nexport * from './native-delay-node-factory-factory';\nexport * from './native-delay-node';\nexport * from './native-dynamics-compressor-node';\nexport * from './native-dynamics-compressor-node-factory';\nexport * from './native-dynamics-compressor-node-factory-factory';\nexport * from './native-event-target';\nexport * from './native-gain-node';\nexport * from './native-gain-node-factory';\nexport * from './native-gain-node-factory-factory';\nexport * from './native-iir-filter-node';\nexport * from './native-iir-filter-node-factory';\nexport * from './native-iir-filter-node-factory-factory';\nexport * from './native-iir-filter-node-faker-factory';\nexport * from './native-iir-filter-node-faker-factory-factory';\nexport * from './native-media-element-audio-source-node';\nexport * from './native-media-element-audio-source-node-factory';\nexport * from './native-media-element-audio-source-node-factory-factory';\nexport * from './native-media-stream-audio-destination-node';\nexport * from './native-media-stream-audio-destination-node-factory';\nexport * from './native-media-stream-audio-destination-node-factory-factory';\nexport * from './native-media-stream-audio-source-node';\nexport * from './native-media-stream-audio-source-node-factory';\nexport * from './native-media-stream-audio-source-node-factory-factory';\nexport * from './native-media-stream-track-audio-source-node';\nexport * from './native-media-stream-track-audio-source-node-factory';\nexport * from './native-media-stream-track-audio-source-node-factory-factory';\nexport * from './native-offline-audio-context';\nexport * from './native-offline-audio-context-constructor';\nexport * from './native-offline-audio-context-constructor-factory';\nexport * from './native-oscillator-node';\nexport * from './native-oscillator-node-factory';\nexport * from './native-oscillator-node-factory-factory';\nexport * from './native-panner-node';\nexport * from './native-panner-node-factory';\nexport * from './native-panner-node-factory-factory';\nexport * from './native-panner-node-faker-factory';\nexport * from './native-panner-node-faker-factory-factory';\nexport * from './native-periodic-wave';\nexport * from './native-periodic-wave-factory';\nexport * from './native-periodic-wave-factory-factory';\nexport * from './native-script-processor-node';\nexport * from './native-script-processor-node-factory';\nexport * from './native-script-processor-node-factory-factory';\nexport * from './native-stereo-panner-node';\nexport * from './native-stereo-panner-node-factory';\nexport * from './native-stereo-panner-node-factory-factory';\nexport * from './native-stereo-panner-node-faker-factory';\nexport * from './native-stereo-panner-node-faker-factory-factory';\nexport * from './native-wave-shaper-node';\nexport * from './native-wave-shaper-node-factory';\nexport * from './native-wave-shaper-node-factory-factory';\nexport * from './native-wave-shaper-node-faker-factory';\nexport * from './native-wave-shaper-node-faker-factory-factory';\nexport * from './not-supported-error-factory';\nexport * from './offline-audio-context-constructor-factory';\nexport * from './oscillator-node-constructor';\nexport * from './oscillator-node-constructor-factory';\nexport * from './oscillator-node-renderer';\nexport * from './oscillator-node-renderer-factory';\nexport * from './oscillator-node-renderer-factory-factory';\nexport * from './oscillator-type';\nexport * from './output-connection';\nexport * from './over-sample-type';\nexport * from './overwrite-accessors-function';\nexport * from './panner-node-constructor';\nexport * from './panner-node-constructor-factory';\nexport * from './panner-node-renderer-factory';\nexport * from './panner-node-renderer-factory-factory';\nexport * from './panning-model-type';\nexport * from './passive-audio-node-input-connection';\nexport * from './passive-audio-param-input-connection';\nexport * from './periodic-wave-constructor';\nexport * from './periodic-wave-constructor-factory';\nexport * from './render-automation-factory';\nexport * from './render-automation-function';\nexport * from './render-inputs-of-audio-node-factory';\nexport * from './render-inputs-of-audio-node-function';\nexport * from './render-inputs-of-audio-param-factory';\nexport * from './render-inputs-of-audio-param-function';\nexport * from './render-native-offline-audio-context-factory';\nexport * from './render-native-offline-audio-context-function';\nexport * from './start-rendering-factory';\nexport * from './start-rendering-function';\nexport * from './stereo-panner-node-constructor';\nexport * from './stereo-panner-node-constructor-factory';\nexport * from './stereo-panner-node-renderer-factory-factory';\nexport * from './stereo-panner-node-renderer-factory';\nexport * from './test-audio-buffer-copy-channel-methods-subarray-support-factory';\nexport * from './test-audio-buffer-constructor-support-factory';\nexport * from './test-audio-buffer-source-node-start-method-consecutive-calls-support-factory';\nexport * from './test-audio-buffer-source-node-start-method-duration-parameter-support-factory';\nexport * from './test-audio-buffer-source-node-start-method-offset-clamping-support-factory';\nexport * from './test-audio-buffer-source-node-stop-method-nullified-buffer-support-factory';\nexport * from './test-audio-context-close-method-support-factory';\nexport * from './test-audio-context-decode-audio-data-method-type-error-support-factory';\nexport * from './test-audio-context-options-support-factory';\nexport * from './test-audio-node-connect-method-support-factory';\nexport * from './test-audio-scheduled-source-node-start-method-consecutive-calls-support-factory';\nexport * from './test-audio-scheduled-source-node-stop-method-consecutive-calls-support-factory';\nexport * from './test-audio-scheduled-source-node-stop-method-negative-parameters-support-factory';\nexport * from './test-audio-worklet-processor-no-outputs-support-factory';\nexport * from './test-channel-merger-node-channel-count-support-factory';\nexport * from './test-constant-source-node-accurate-scheduling-support-factory';\nexport * from './test-convolver-node-buffer-reassignability-support-factory';\nexport * from './test-is-secure-context-support-factory';\nexport * from './test-media-stream-audio-source-node-media-stream-without-audio-track-support';\nexport * from './test-offline-audio-context-current-time-support-factory';\nexport * from './test-stereo-panner-node-default-value-support-factory';\nexport * from './typed-array';\nexport * from './unknown-error-factory';\nexport * from './unrendered-audio-worklet-node-store';\nexport * from './unrendered-audio-worklet-nodes';\nexport * from './wave-shaper-node-constructor';\nexport * from './wave-shaper-node-constructor-factory';\nexport * from './wave-shaper-node-renderer-factory-factory';\nexport * from './wave-shaper-node-renderer-factory';\nexport * from './window-factory';\nexport * from './wrap-audio-buffer-copy-channel-methods-factory';\nexport * from './wrap-audio-buffer-copy-channel-methods-function';\nexport * from './wrap-audio-buffer-copy-channel-methods-out-of-bounds-factory';\nexport * from './wrap-audio-buffer-copy-channel-methods-out-of-bounds-function';\nexport * from './wrap-audio-buffer-source-node-start-method-offset-clamping-function';\nexport * from './wrap-audio-buffer-source-node-stop-method-nullified-buffer-factory';\nexport * from './wrap-audio-buffer-source-node-stop-method-nullified-buffer-function';\nexport * from './wrap-audio-scheduled-source-node-stop-method-consecutive-calls-factory';\nexport * from './wrap-audio-scheduled-source-node-stop-method-consecutive-calls-function';\nexport * from './wrap-channel-merger-node-factory';\nexport * from './wrap-channel-merger-node-function';\nexport * from './wrap-event-listener-function';","export const createAbortError = () => {\n  try {\n    return new DOMException('', 'AbortError');\n  } catch (err) {\n    // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n    err.code = 20;\n    err.name = 'AbortError';\n    return err;\n  }\n};","export const createAddAudioNodeConnections = audioNodeConnectionsStore => {\n  return (audioNode, audioNodeRenderer, nativeAudioNode) => {\n    const activeInputs = [];\n\n    for (let i = 0; i < nativeAudioNode.numberOfInputs; i += 1) {\n      activeInputs.push(new Set());\n    }\n\n    audioNodeConnectionsStore.set(audioNode, {\n      activeInputs,\n      outputs: new Set(),\n      passiveInputs: new WeakMap(),\n      renderer: audioNodeRenderer\n    });\n  };\n};","export const createAddAudioParamConnections = audioParamConnectionsStore => {\n  return (audioParam, audioParamRenderer) => {\n    audioParamConnectionsStore.set(audioParam, {\n      activeInputs: new Set(),\n      passiveInputs: new WeakMap(),\n      renderer: audioParamRenderer\n    });\n  };\n};","export const createAddSilentConnection = createNativeGainNode => {\n  return (nativeContext, nativeAudioScheduledSourceNode) => {\n    const nativeGainNode = createNativeGainNode(nativeContext, {\n      channelCount: 1,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete',\n      gain: 0\n    });\n    nativeAudioScheduledSourceNode.connect(nativeGainNode)\n    /*\n     * Bug #50: Edge does not yet allow to create AudioNodes on a closed AudioContext. Therefore the context property is\n     * used here to make sure to connect the right destination.\n     */\n    .connect(nativeGainNode.context.destination);\n\n    const disconnect = () => {\n      nativeAudioScheduledSourceNode.removeEventListener('ended', disconnect);\n      nativeAudioScheduledSourceNode.disconnect(nativeGainNode);\n      nativeGainNode.disconnect();\n    };\n\n    nativeAudioScheduledSourceNode.addEventListener('ended', disconnect);\n  };\n};","export const createAddUnrenderedAudioWorkletNode = getUnrenderedAudioWorkletNodes => {\n  return (nativeContext, audioWorkletNode) => {\n    getUnrenderedAudioWorkletNodes(nativeContext).add(audioWorkletNode);\n  };\n};","const DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  fftSize: 2048,\n  maxDecibels: -30,\n  minDecibels: -100,\n  smoothingTimeConstant: 0.8\n};\nexport const createAnalyserNodeConstructor = (audionNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext) => {\n  return class AnalyserNode extends audionNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeAnalyserNode = createNativeAnalyserNode(nativeContext, mergedOptions);\n      const analyserNodeRenderer = isNativeOfflineAudioContext(nativeContext) ? createAnalyserNodeRenderer() : null;\n      super(context, false, nativeAnalyserNode, analyserNodeRenderer);\n      this._nativeAnalyserNode = nativeAnalyserNode;\n    }\n\n    get fftSize() {\n      return this._nativeAnalyserNode.fftSize;\n    }\n\n    set fftSize(value) {\n      this._nativeAnalyserNode.fftSize = value;\n    }\n\n    get frequencyBinCount() {\n      return this._nativeAnalyserNode.frequencyBinCount;\n    }\n\n    get maxDecibels() {\n      return this._nativeAnalyserNode.maxDecibels;\n    }\n\n    set maxDecibels(value) {\n      // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n      const maxDecibels = this._nativeAnalyserNode.maxDecibels;\n      this._nativeAnalyserNode.maxDecibels = value;\n\n      if (!(value > this._nativeAnalyserNode.minDecibels)) {\n        this._nativeAnalyserNode.maxDecibels = maxDecibels;\n        throw createIndexSizeError();\n      }\n    }\n\n    get minDecibels() {\n      return this._nativeAnalyserNode.minDecibels;\n    }\n\n    set minDecibels(value) {\n      // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n      const minDecibels = this._nativeAnalyserNode.minDecibels;\n      this._nativeAnalyserNode.minDecibels = value;\n\n      if (!(this._nativeAnalyserNode.maxDecibels > value)) {\n        this._nativeAnalyserNode.minDecibels = minDecibels;\n        throw createIndexSizeError();\n      }\n    }\n\n    get smoothingTimeConstant() {\n      return this._nativeAnalyserNode.smoothingTimeConstant;\n    }\n\n    set smoothingTimeConstant(value) {\n      this._nativeAnalyserNode.smoothingTimeConstant = value;\n    }\n\n    getByteFrequencyData(array) {\n      this._nativeAnalyserNode.getByteFrequencyData(array);\n    }\n\n    getByteTimeDomainData(array) {\n      this._nativeAnalyserNode.getByteTimeDomainData(array);\n    }\n\n    getFloatFrequencyData(array) {\n      this._nativeAnalyserNode.getFloatFrequencyData(array);\n    }\n\n    getFloatTimeDomainData(array) {\n      this._nativeAnalyserNode.getFloatTimeDomainData(array);\n    }\n\n  };\n};","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createAnalyserNodeRendererFactory = (createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeAnalyserNodes = new WeakMap();\n\n    const createAnalyserNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeAnalyserNode = getNativeAudioNode(proxy); // If the initially used nativeAnalyserNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeAnalyserNodeIsOwnedByContext = isOwnedByContext(nativeAnalyserNode, nativeOfflineAudioContext);\n\n      if (!nativeAnalyserNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeAnalyserNode.channelCount,\n          channelCountMode: nativeAnalyserNode.channelCountMode,\n          channelInterpretation: nativeAnalyserNode.channelInterpretation,\n          fftSize: nativeAnalyserNode.fftSize,\n          maxDecibels: nativeAnalyserNode.maxDecibels,\n          minDecibels: nativeAnalyserNode.minDecibels,\n          smoothingTimeConstant: nativeAnalyserNode.smoothingTimeConstant\n        };\n        nativeAnalyserNode = createNativeAnalyserNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeAnalyserNodes.set(nativeOfflineAudioContext, nativeAnalyserNode);\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAnalyserNode, trace);\n      return nativeAnalyserNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeAnalyserNode = renderedNativeAnalyserNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAnalyserNode !== undefined) {\n          return Promise.resolve(renderedNativeAnalyserNode);\n        }\n\n        return createAnalyserNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","import { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from '../helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nconst DEFAULT_OPTIONS = {\n  numberOfChannels: 1\n};\nexport const createAudioBufferConstructor = (audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, testNativeAudioBufferConstructorSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {\n  let nativeOfflineAudioContext = null;\n  return class AudioBuffer {\n    constructor(options) {\n      if (nativeOfflineAudioContextConstructor === null) {\n        throw new Error('Missing the native OfflineAudioContext constructor.');\n      }\n\n      const {\n        length,\n        numberOfChannels,\n        sampleRate\n      } = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n\n      if (nativeOfflineAudioContext === null) {\n        nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n      }\n      /*\n       * Bug #99: Firefox does not throw a NotSupportedError when the numberOfChannels is zero. But it only does it when using the\n       * factory function. But since Firefox also supports the constructor everything should be fine.\n       */\n\n\n      const audioBuffer = nativeAudioBufferConstructor !== null && cacheTestResult(testNativeAudioBufferConstructorSupport, testNativeAudioBufferConstructorSupport) ? new nativeAudioBufferConstructor({\n        length,\n        numberOfChannels,\n        sampleRate\n      }) : nativeOfflineAudioContext.createBuffer(numberOfChannels, length, sampleRate); // Bug #99: Safari does not throw an error when the numberOfChannels is zero.\n\n      if (audioBuffer.numberOfChannels === 0) {\n        throw createNotSupportedError();\n      } // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n      // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n\n\n      if (typeof audioBuffer.copyFromChannel !== 'function') {\n        wrapAudioBufferCopyChannelMethods(audioBuffer);\n        wrapAudioBufferGetChannelDataMethod(audioBuffer); // Bug #157: Only Chrome & Opera do allow the bufferOffset to be out-of-bounds.\n      } else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n        wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n      }\n\n      audioBufferStore.add(audioBuffer);\n      /*\n       * This does violate all good pratices but it is necessary to allow this AudioBuffer to be used with native\n       * (Offline)AudioContexts.\n       */\n\n      return audioBuffer;\n    }\n\n    static [Symbol.hasInstance](instance) {\n      return instance !== null && typeof instance === 'object' && Object.getPrototypeOf(instance) === AudioBuffer.prototype || audioBufferStore.has(instance);\n    }\n\n  };\n};","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nconst DEFAULT_OPTIONS = {\n  buffer: null,\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  // Bug #149: Safari does not yet support the detune AudioParam.\n  loop: false,\n  loopEnd: 0,\n  loopStart: 0,\n  playbackRate: 1\n};\nexport const createAudioBufferSourceNodeConstructor = (audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {\n  return class AudioBufferSourceNode extends audioNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const audioBufferSourceNodeRenderer = isOffline ? createAudioBufferSourceNodeRenderer() : null;\n      super(context, false, nativeAudioBufferSourceNode, audioBufferSourceNodeRenderer);\n      this._audioBufferSourceNodeRenderer = audioBufferSourceNodeRenderer;\n      this._isBufferNullified = false;\n      this._isBufferSet = options.buffer !== null && options.buffer !== undefined;\n      this._nativeAudioBufferSourceNode = nativeAudioBufferSourceNode;\n      this._onended = null; // Bug #73: Edge & Safari do not export the correct values for maxValue and minValue.\n\n      this._playbackRate = createAudioParam(this, isOffline, nativeAudioBufferSourceNode.playbackRate, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n    }\n\n    get buffer() {\n      if (this._isBufferNullified) {\n        return null;\n      }\n\n      return this._nativeAudioBufferSourceNode.buffer;\n    }\n\n    set buffer(value) {\n      // Bug #71: Edge does not allow to set the buffer to null.\n      try {\n        this._nativeAudioBufferSourceNode.buffer = value;\n      } catch (err) {\n        if (value !== null || err.code !== 17) {\n          throw err;\n        } // This will modify the buffer in place. Luckily that works in Edge and has the same effect as setting the buffer to null.\n\n\n        if (this._nativeAudioBufferSourceNode.buffer !== null) {\n          const buffer = this._nativeAudioBufferSourceNode.buffer;\n          const numberOfChannels = buffer.numberOfChannels;\n\n          for (let i = 0; i < numberOfChannels; i += 1) {\n            buffer.getChannelData(i).fill(0);\n          }\n\n          this._isBufferNullified = true;\n        }\n      } // Bug #72: Only Chrome, Edge & Opera do not allow to reassign the buffer yet.\n\n\n      if (value !== null) {\n        if (this._isBufferSet) {\n          throw createInvalidStateError();\n        }\n\n        this._isBufferSet = true;\n      }\n    }\n\n    get loop() {\n      return this._nativeAudioBufferSourceNode.loop;\n    }\n\n    set loop(value) {\n      this._nativeAudioBufferSourceNode.loop = value;\n    }\n\n    get loopEnd() {\n      return this._nativeAudioBufferSourceNode.loopEnd;\n    }\n\n    set loopEnd(value) {\n      this._nativeAudioBufferSourceNode.loopEnd = value;\n    }\n\n    get loopStart() {\n      return this._nativeAudioBufferSourceNode.loopStart;\n    }\n\n    set loopStart(value) {\n      this._nativeAudioBufferSourceNode.loopStart = value;\n    }\n\n    get onended() {\n      return this._onended;\n    }\n\n    set onended(value) {\n      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n      this._nativeAudioBufferSourceNode.onended = wrappedListener;\n      const nativeOnEnded = this._nativeAudioBufferSourceNode.onended;\n      this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n    }\n\n    get playbackRate() {\n      return this._playbackRate;\n    }\n\n    start(when = 0, offset = 0, duration) {\n      this._nativeAudioBufferSourceNode.start(when, offset, duration);\n\n      if (this._audioBufferSourceNodeRenderer !== null) {\n        this._audioBufferSourceNodeRenderer.start = duration === undefined ? [when, offset] : [when, offset, duration];\n      } else {\n        setInternalStateToActive(this);\n\n        const resetInternalStateToPassive = () => {\n          this._nativeAudioBufferSourceNode.removeEventListener('ended', resetInternalStateToPassive); // @todo Determine a meaningful delay instead of just using one second.\n\n\n          setTimeout(() => setInternalStateToPassive(this), 1000);\n        };\n\n        this._nativeAudioBufferSourceNode.addEventListener('ended', resetInternalStateToPassive);\n      }\n    }\n\n    stop(when = 0) {\n      this._nativeAudioBufferSourceNode.stop(when);\n\n      if (this._audioBufferSourceNodeRenderer !== null) {\n        this._audioBufferSourceNodeRenderer.stop = when;\n      }\n    }\n\n  };\n};","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createAudioBufferSourceNodeRendererFactory = (connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeAudioBufferSourceNodes = new WeakMap();\n    let start = null;\n    let stop = null;\n\n    const createAudioBufferSourceNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeAudioBufferSourceNode = getNativeAudioNode(proxy);\n      /*\n       * If the initially used nativeAudioBufferSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n       * again.\n       */\n\n      const nativeAudioBufferSourceNodeIsOwnedByContext = isOwnedByContext(nativeAudioBufferSourceNode, nativeOfflineAudioContext);\n\n      if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n        const options = {\n          buffer: nativeAudioBufferSourceNode.buffer,\n          channelCount: nativeAudioBufferSourceNode.channelCount,\n          channelCountMode: nativeAudioBufferSourceNode.channelCountMode,\n          channelInterpretation: nativeAudioBufferSourceNode.channelInterpretation,\n          // Bug #149: Safari does not yet support the detune AudioParam.\n          loop: nativeAudioBufferSourceNode.loop,\n          loopEnd: nativeAudioBufferSourceNode.loopEnd,\n          loopStart: nativeAudioBufferSourceNode.loopStart,\n          playbackRate: nativeAudioBufferSourceNode.playbackRate.value\n        };\n        nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, options);\n\n        if (start !== null) {\n          nativeAudioBufferSourceNode.start(...start);\n        }\n\n        if (stop !== null) {\n          nativeAudioBufferSourceNode.stop(stop);\n        }\n      }\n\n      renderedNativeAudioBufferSourceNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n\n      if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n        // Bug #149: Safari does not yet support the detune AudioParam.\n        await renderAutomation(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate, trace);\n      } else {\n        // Bug #149: Safari does not yet support the detune AudioParam.\n        await connectAudioParam(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate, trace);\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioBufferSourceNode, trace);\n      return nativeAudioBufferSourceNode;\n    };\n\n    return {\n      set start(value) {\n        start = value;\n      },\n\n      set stop(value) {\n        stop = value;\n      },\n\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeAudioBufferSourceNode = renderedNativeAudioBufferSourceNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAudioBufferSourceNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioBufferSourceNode);\n        }\n\n        return createAudioBufferSourceNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","import { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nexport const createAudioContextConstructor = (baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioDestinationNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor) => {\n  return class AudioContext extends baseAudioContextConstructor {\n    constructor(options = {}) {\n      if (nativeAudioContextConstructor === null) {\n        throw new Error('Missing the native AudioContext constructor.');\n      }\n\n      const nativeAudioContext = new nativeAudioContextConstructor(options); // Bug #131 Safari returns null when there are four other AudioContexts running already.\n\n      if (nativeAudioContext === null) {\n        throw createUnknownError();\n      } // Bug #51 Only Chrome and Opera throw an error if the given latencyHint is invalid.\n\n\n      if (!isValidLatencyHint(options.latencyHint)) {\n        throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);\n      } // Bug #150 Only Chrome, Firefox and Opera support setting the sampleRate.\n\n\n      if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n        throw createNotSupportedError();\n      }\n\n      super(nativeAudioContext, 2);\n      const {\n        latencyHint\n      } = options;\n      const {\n        sampleRate\n      } = nativeAudioContext; // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n\n      this._baseLatency = typeof nativeAudioContext.baseLatency === 'number' ? nativeAudioContext.baseLatency : latencyHint === 'balanced' ? 512 / sampleRate : latencyHint === 'interactive' || latencyHint === undefined ? 256 / sampleRate : latencyHint === 'playback' ? 1024 / sampleRate :\n      /*\n       * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n       * ScriptProcessorNode.\n       */\n      Math.max(2, Math.min(128, Math.round(latencyHint * sampleRate / 128))) * 128 / sampleRate;\n      this._nativeAudioContext = nativeAudioContext;\n      this._state = null;\n      /*\n       * Bug #34: Chrome and Opera pretend to be running right away, but fire an onstatechange event when the state actually changes\n       * to 'running'.\n       */\n\n      if (nativeAudioContext.state === 'running') {\n        this._state = 'suspended';\n\n        const revokeState = () => {\n          if (this._state === 'suspended') {\n            this._state = null;\n          }\n\n          nativeAudioContext.removeEventListener('statechange', revokeState);\n        };\n\n        nativeAudioContext.addEventListener('statechange', revokeState);\n      }\n    }\n\n    get baseLatency() {\n      return this._baseLatency;\n    }\n\n    get state() {\n      return this._state !== null ? this._state : this._nativeAudioContext.state;\n    }\n\n    close() {\n      // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n      if (this.state === 'closed') {\n        return this._nativeAudioContext.close().then(() => {\n          throw createInvalidStateError();\n        });\n      } // Bug #34: If the state was set to suspended before it should be revoked now.\n\n\n      if (this._state === 'suspended') {\n        this._state = null;\n      }\n\n      return this._nativeAudioContext.close();\n      /*\n       * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n       * ...then(() => deleteAudioGraph(this, this._nativeAudioContext));\n       */\n    }\n\n    createMediaElementSource(mediaElement) {\n      return new mediaElementAudioSourceNodeConstructor(this, {\n        mediaElement\n      });\n    }\n\n    createMediaStreamDestination() {\n      return new mediaStreamAudioDestinationNodeConstructor(this);\n    }\n\n    createMediaStreamSource(mediaStream) {\n      return new mediaStreamAudioSourceNodeConstructor(this, {\n        mediaStream\n      });\n    }\n\n    createMediaStreamTrackSource(mediaStreamTrack) {\n      return new mediaStreamTrackAudioSourceNodeConstructor(this, {\n        mediaStreamTrack\n      });\n    }\n\n    resume() {\n      if (this._state === 'suspended') {\n        return new Promise((resolve, reject) => {\n          const resolvePromise = () => {\n            this._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n\n            if (this._nativeAudioContext.state === 'running') {\n              resolve();\n            } else {\n              this.resume().then(resolve, reject);\n            }\n          };\n\n          this._nativeAudioContext.addEventListener('statechange', resolvePromise);\n        });\n      }\n\n      return this._nativeAudioContext.resume().catch(err => {\n        // Bug #55: Chrome, Edge and Opera do throw an InvalidAccessError instead of an InvalidStateError.\n        // Bug #56: Safari invokes the catch handler but without an error.\n        if (err === undefined || err.code === 15) {\n          throw createInvalidStateError();\n        }\n\n        throw err;\n      });\n    }\n\n    suspend() {\n      return this._nativeAudioContext.suspend().catch(err => {\n        // Bug #56: Safari invokes the catch handler but without an error.\n        if (err === undefined) {\n          throw createInvalidStateError();\n        }\n\n        throw err;\n      });\n    }\n\n  };\n};","export const createAudioDestinationNodeConstructor = (audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode) => {\n  return class AudioDestinationNode extends audioNodeConstructor {\n    constructor(context, channelCount) {\n      const nativeContext = getNativeContext(context);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const nativeAudioDestinationNode = createNativeAudioDestinationNode(nativeContext, channelCount, isOffline);\n      const audioDestinationNodeRenderer = isOffline ? createAudioDestinationNodeRenderer(renderInputsOfAudioNode) : null;\n      super(context, false, nativeAudioDestinationNode, audioDestinationNodeRenderer);\n      this._isNodeOfNativeOfflineAudioContext = isOffline;\n      this._nativeAudioDestinationNode = nativeAudioDestinationNode;\n    }\n\n    get channelCount() {\n      return this._nativeAudioDestinationNode.channelCount;\n    }\n\n    set channelCount(value) {\n      // Bug #52: Chrome, Edge, Opera & Safari do not throw an exception at all.\n      // Bug #54: Firefox does throw an IndexSizeError.\n      if (this._isNodeOfNativeOfflineAudioContext) {\n        throw createInvalidStateError();\n      } // Bug #47: The AudioDestinationNode in Edge and Safari do not initialize the maxChannelCount property correctly.\n\n\n      if (value > this._nativeAudioDestinationNode.maxChannelCount) {\n        throw createIndexSizeError();\n      }\n\n      this._nativeAudioDestinationNode.channelCount = value;\n    }\n\n    get channelCountMode() {\n      return this._nativeAudioDestinationNode.channelCountMode;\n    }\n\n    set channelCountMode(value) {\n      // Bug #53: No browser does throw an exception yet.\n      if (this._isNodeOfNativeOfflineAudioContext) {\n        throw createInvalidStateError();\n      }\n\n      this._nativeAudioDestinationNode.channelCountMode = value;\n    }\n\n    get maxChannelCount() {\n      return this._nativeAudioDestinationNode.maxChannelCount;\n    }\n\n  };\n};","export const createAudioDestinationNodeRenderer = renderInputsOfAudioNode => {\n  let nativeAudioDestinationNodePromise = null;\n\n  const createAudioDestinationNode = async (proxy, nativeOfflineAudioContext, trace) => {\n    const nativeAudioDestinationNode = nativeOfflineAudioContext.destination;\n    await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioDestinationNode, trace);\n    return nativeAudioDestinationNode;\n  };\n\n  return {\n    render(proxy, nativeOfflineAudioContext, trace) {\n      if (nativeAudioDestinationNodePromise === null) {\n        nativeAudioDestinationNodePromise = createAudioDestinationNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n      return nativeAudioDestinationNodePromise;\n    }\n\n  };\n};","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nexport const createAudioListenerFactory = (createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, isNativeOfflineAudioContext) => {\n  return (context, nativeContext) => {\n    const nativeListener = nativeContext.listener; // Bug #117: Only Chrome & Opera support the new interface already.\n\n    const createFakeAudioParams = () => {\n      const channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n        channelCount: 1,\n        channelCountMode: 'explicit',\n        channelInterpretation: 'speakers',\n        numberOfInputs: 9\n      });\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 9, 0);\n\n      const createFakeAudioParam = (input, value) => {\n        const constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n          channelCount: 1,\n          channelCountMode: 'explicit',\n          channelInterpretation: 'discrete',\n          offset: value\n        });\n        constantSourceNode.connect(channelMergerNode, 0, input); // @todo This should be stopped when the context is closed.\n\n        constantSourceNode.start();\n        Object.defineProperty(constantSourceNode.offset, 'defaultValue', {\n          get() {\n            return value;\n          }\n\n        });\n        /*\n         * Bug #62 & #74: Edge & Safari do not support ConstantSourceNodes and do not export the correct values for maxValue and\n         * minValue for GainNodes.\n         */\n\n        return createAudioParam({\n          context\n        }, isOffline, constantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      };\n\n      let lastOrientation = [0, 0, -1, 0, 1, 0];\n      let lastPosition = [0, 0, 0];\n\n      scriptProcessorNode.onaudioprocess = ({\n        inputBuffer\n      }) => {\n        const orientation = [inputBuffer.getChannelData(0)[0], inputBuffer.getChannelData(1)[0], inputBuffer.getChannelData(2)[0], inputBuffer.getChannelData(3)[0], inputBuffer.getChannelData(4)[0], inputBuffer.getChannelData(5)[0]];\n\n        if (orientation.some((value, index) => value !== lastOrientation[index])) {\n          nativeListener.setOrientation(...orientation); // tslint:disable-line:deprecation\n\n          lastOrientation = orientation;\n        }\n\n        const positon = [inputBuffer.getChannelData(6)[0], inputBuffer.getChannelData(7)[0], inputBuffer.getChannelData(8)[0]];\n\n        if (positon.some((value, index) => value !== lastPosition[index])) {\n          nativeListener.setPosition(...positon); // tslint:disable-line:deprecation\n\n          lastPosition = positon;\n        }\n      };\n\n      channelMergerNode.connect(scriptProcessorNode);\n      return {\n        forwardX: createFakeAudioParam(0, 0),\n        forwardY: createFakeAudioParam(1, 0),\n        forwardZ: createFakeAudioParam(2, -1),\n        positionX: createFakeAudioParam(6, 0),\n        positionY: createFakeAudioParam(7, 0),\n        positionZ: createFakeAudioParam(8, 0),\n        upX: createFakeAudioParam(3, 0),\n        upY: createFakeAudioParam(4, 1),\n        upZ: createFakeAudioParam(5, 0)\n      };\n    };\n\n    const {\n      forwardX,\n      forwardY,\n      forwardZ,\n      positionX,\n      positionY,\n      positionZ,\n      upX,\n      upY,\n      upZ\n    } = nativeListener.forwardX === undefined ? createFakeAudioParams() : nativeListener;\n    return {\n      get forwardX() {\n        return forwardX;\n      },\n\n      get forwardY() {\n        return forwardY;\n      },\n\n      get forwardZ() {\n        return forwardZ;\n      },\n\n      get positionX() {\n        return positionX;\n      },\n\n      get positionY() {\n        return positionY;\n      },\n\n      get positionZ() {\n        return positionZ;\n      },\n\n      get upX() {\n        return upX;\n      },\n\n      get upY() {\n        return upY;\n      },\n\n      get upZ() {\n        return upZ;\n      }\n\n    };\n  };\n};","import { AutomationEventList } from 'automation-events';\nexport const createAudioParamFactory = (addAudioParamConnections, audioParamAudioNodeStore, audioParamStore, createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor) => {\n  return (audioNode, isAudioParamOfOfflineAudioContext, nativeAudioParam, maxValue = null, minValue = null) => {\n    const automationEventList = new AutomationEventList(nativeAudioParam.defaultValue);\n    const audioParamRenderer = isAudioParamOfOfflineAudioContext ? createAudioParamRenderer(automationEventList) : null;\n    const audioParam = {\n      get defaultValue() {\n        return nativeAudioParam.defaultValue;\n      },\n\n      get maxValue() {\n        return maxValue === null ? nativeAudioParam.maxValue : maxValue;\n      },\n\n      get minValue() {\n        return minValue === null ? nativeAudioParam.minValue : minValue;\n      },\n\n      get value() {\n        return nativeAudioParam.value;\n      },\n\n      set value(value) {\n        nativeAudioParam.value = value; // Bug #98: Edge, Firefox & Safari do not yet treat the value setter like a call to setValueAtTime().\n\n        audioParam.setValueAtTime(value, audioNode.context.currentTime);\n      },\n\n      cancelAndHoldAtTime(cancelTime) {\n        // Bug #28: Edge, Firefox & Safari do not yet implement cancelAndHoldAtTime().\n        if (typeof nativeAudioParam.cancelAndHoldAtTime === 'function') {\n          if (audioParamRenderer === null) {\n            automationEventList.flush(audioNode.context.currentTime);\n          }\n\n          automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));\n          nativeAudioParam.cancelAndHoldAtTime(cancelTime);\n        } else {\n          const previousLastEvent = Array.from(automationEventList).pop();\n\n          if (audioParamRenderer === null) {\n            automationEventList.flush(audioNode.context.currentTime);\n          }\n\n          automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));\n          const currentLastEvent = Array.from(automationEventList).pop();\n          nativeAudioParam.cancelScheduledValues(cancelTime);\n\n          if (previousLastEvent !== currentLastEvent && currentLastEvent !== undefined) {\n            if (currentLastEvent.type === 'exponentialRampToValue') {\n              nativeAudioParam.exponentialRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);\n            } else if (currentLastEvent.type === 'linearRampToValue') {\n              nativeAudioParam.linearRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);\n            } else if (currentLastEvent.type === 'setValue') {\n              nativeAudioParam.setValueAtTime(currentLastEvent.value, currentLastEvent.startTime);\n            } else if (currentLastEvent.type === 'setValueCurve') {\n              nativeAudioParam.setValueCurveAtTime(currentLastEvent.values, currentLastEvent.startTime, currentLastEvent.duration);\n            }\n          }\n        }\n\n        return audioParam;\n      },\n\n      cancelScheduledValues(cancelTime) {\n        if (audioParamRenderer === null) {\n          automationEventList.flush(audioNode.context.currentTime);\n        }\n\n        automationEventList.add(createCancelScheduledValuesAutomationEvent(cancelTime));\n        nativeAudioParam.cancelScheduledValues(cancelTime);\n        return audioParam;\n      },\n\n      exponentialRampToValueAtTime(value, endTime) {\n        if (audioParamRenderer === null) {\n          automationEventList.flush(audioNode.context.currentTime);\n        }\n\n        automationEventList.add(createExponentialRampToValueAutomationEvent(value, endTime));\n        nativeAudioParam.exponentialRampToValueAtTime(value, endTime);\n        return audioParam;\n      },\n\n      linearRampToValueAtTime(value, endTime) {\n        if (audioParamRenderer === null) {\n          automationEventList.flush(audioNode.context.currentTime);\n        }\n\n        automationEventList.add(createLinearRampToValueAutomationEvent(value, endTime));\n        nativeAudioParam.linearRampToValueAtTime(value, endTime);\n        return audioParam;\n      },\n\n      setTargetAtTime(target, startTime, timeConstant) {\n        if (audioParamRenderer === null) {\n          automationEventList.flush(audioNode.context.currentTime);\n        }\n\n        automationEventList.add(createSetTargetAutomationEvent(target, startTime, timeConstant));\n        nativeAudioParam.setTargetAtTime(target, startTime, timeConstant);\n        return audioParam;\n      },\n\n      setValueAtTime(value, startTime) {\n        if (audioParamRenderer === null) {\n          automationEventList.flush(audioNode.context.currentTime);\n        }\n\n        automationEventList.add(createSetValueAutomationEvent(value, startTime));\n        nativeAudioParam.setValueAtTime(value, startTime);\n        return audioParam;\n      },\n\n      setValueCurveAtTime(values, startTime, duration) {\n        /*\n         * Bug #152: Safari does not correctly interpolate the values of the curve.\n         * @todo Unfortunately there is no way to test for this behavior in synchronous fashion which is why testing for the\n         * existence of the webkitAudioContext is used as a workaround here.\n         */\n        if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext') {\n          const endTime = startTime + duration;\n          const sampleRate = audioNode.context.sampleRate;\n          const firstSample = Math.ceil(startTime * sampleRate);\n          const lastSample = Math.floor(endTime * sampleRate);\n          const numberOfInterpolatedValues = lastSample - firstSample;\n          const interpolatedValues = new Float32Array(numberOfInterpolatedValues);\n\n          for (let i = 0; i < numberOfInterpolatedValues; i += 1) {\n            const theoreticIndex = (values.length - 1) / duration * ((firstSample + i) / sampleRate - startTime);\n            const lowerIndex = Math.floor(theoreticIndex);\n            const upperIndex = Math.ceil(theoreticIndex);\n            interpolatedValues[i] = lowerIndex === upperIndex ? values[lowerIndex] : (1 - (theoreticIndex - lowerIndex)) * values[lowerIndex] + (1 - (upperIndex - theoreticIndex)) * values[upperIndex];\n          }\n\n          if (audioParamRenderer === null) {\n            automationEventList.flush(audioNode.context.currentTime);\n          }\n\n          automationEventList.add(createSetValueCurveAutomationEvent(interpolatedValues, startTime, duration));\n          nativeAudioParam.setValueCurveAtTime(interpolatedValues, startTime, duration);\n          const timeOfLastSample = lastSample / sampleRate;\n\n          if (timeOfLastSample < endTime) {\n            audioParam.setValueAtTime(interpolatedValues[interpolatedValues.length - 1], timeOfLastSample);\n          }\n\n          audioParam.setValueAtTime(values[values.length - 1], endTime);\n        } else {\n          if (audioParamRenderer === null) {\n            automationEventList.flush(audioNode.context.currentTime);\n          }\n\n          automationEventList.add(createSetValueCurveAutomationEvent(values, startTime, duration));\n          nativeAudioParam.setValueCurveAtTime(values, startTime, duration);\n        }\n\n        return audioParam;\n      }\n\n    };\n    audioParamStore.set(audioParam, nativeAudioParam);\n    audioParamAudioNodeStore.set(audioParam, audioNode);\n    addAudioParamConnections(audioParam, audioParamRenderer);\n    return audioParam;\n  };\n};","export const createAudioParamRenderer = automationEventList => {\n  return {\n    replay(audioParam) {\n      for (const automationEvent of automationEventList) {\n        if (automationEvent.type === 'exponentialRampToValue') {\n          const {\n            endTime,\n            value\n          } = automationEvent;\n          audioParam.exponentialRampToValueAtTime(value, endTime);\n        } else if (automationEvent.type === 'linearRampToValue') {\n          const {\n            endTime,\n            value\n          } = automationEvent;\n          audioParam.linearRampToValueAtTime(value, endTime);\n        } else if (automationEvent.type === 'setTarget') {\n          const {\n            startTime,\n            target,\n            timeConstant\n          } = automationEvent;\n          audioParam.setTargetAtTime(target, startTime, timeConstant);\n        } else if (automationEvent.type === 'setValue') {\n          const {\n            startTime,\n            value\n          } = automationEvent;\n          audioParam.setValueAtTime(value, startTime);\n        } else if (automationEvent.type === 'setValueCurve') {\n          const {\n            duration,\n            startTime,\n            values\n          } = automationEvent;\n          audioParam.setValueCurveAtTime(values, startTime, duration);\n        } else {\n          throw new Error(\"Can't apply an unknown automation.\");\n        }\n      }\n    }\n\n  };\n};","import { NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS } from '../globals';\nimport { ReadOnlyMap } from '../read-only-map';\nconst DEFAULT_OPTIONS = {\n  channelCount: 2,\n  // Bug #61: The channelCountMode should be 'max' according to the spec but is set to 'explicit' to achieve consistent behavior.\n  channelCountMode: 'explicit',\n  channelInterpretation: 'speakers',\n  numberOfInputs: 1,\n  numberOfOutputs: 1,\n  outputChannelCount: undefined,\n  parameterData: {},\n  processorOptions: {}\n};\n\nconst createChannelCount = length => {\n  const channelCount = [];\n\n  for (let i = 0; i < length; i += 1) {\n    channelCount.push(1);\n  }\n\n  return channelCount;\n};\n\nconst sanitizedOptions = options => {\n  return { ...options,\n    outputChannelCount: options.outputChannelCount !== undefined ? options.outputChannelCount : options.numberOfInputs === 1 && options.numberOfOutputs === 1 ?\n    /*\n     * Bug #61: This should be the computedNumberOfChannels, but unfortunately that is almost impossible to fake. That's why\n     * the channelCountMode is required to be 'explicit' as long as there is not a native implementation in every browser. That\n     * makes sure the computedNumberOfChannels is equivilant to the channelCount which makes it much easier to compute.\n     */\n    [options.channelCount] : createChannelCount(options.numberOfOutputs)\n  };\n};\n\nexport const createAudioWorkletNodeConstructor = (addUnrenderedAudioWorkletNode, audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, wrapEventListener) => {\n  return class AudioWorkletNode extends audioNodeConstructor {\n    constructor(context, name, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const mergedOptions = sanitizedOptions({ ...DEFAULT_OPTIONS,\n        ...options\n      });\n      const nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);\n      const processorConstructor = nodeNameToProcessorConstructorMap === undefined ? undefined : nodeNameToProcessorConstructorMap.get(name);\n      const nativeAudioWorkletNode = createNativeAudioWorkletNode(nativeContext, isOffline ? null : context.baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, mergedOptions);\n      const audioWorkletNodeRenderer = isOffline ? createAudioWorkletNodeRenderer(name, mergedOptions, processorConstructor) : null;\n      /*\n       * @todo Add a mechanism to switch an AudioWorkletNode to passive once the process() function of the AudioWorkletProcessor\n       * returns false.\n       */\n\n      super(context, true, nativeAudioWorkletNode, audioWorkletNodeRenderer);\n      const parameters = [];\n      nativeAudioWorkletNode.parameters.forEach((nativeAudioParam, nm) => {\n        const audioParam = createAudioParam(this, isOffline, nativeAudioParam);\n        parameters.push([nm, audioParam]);\n      });\n      this._nativeAudioWorkletNode = nativeAudioWorkletNode;\n      this._onprocessorerror = null;\n      this._parameters = new ReadOnlyMap(parameters);\n      /*\n       * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to\n       * the destination.\n       */\n\n      if (isOffline) {\n        addUnrenderedAudioWorkletNode(nativeContext, this);\n      }\n    }\n\n    get onprocessorerror() {\n      return this._onprocessorerror;\n    }\n\n    set onprocessorerror(value) {\n      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n      this._nativeAudioWorkletNode.onprocessorerror = wrappedListener;\n      const nativeOnProcessorError = this._nativeAudioWorkletNode.onprocessorerror;\n      this._onprocessorerror = nativeOnProcessorError !== null && nativeOnProcessorError === wrappedListener ? value : nativeOnProcessorError;\n    }\n\n    get parameters() {\n      if (this._parameters === null) {\n        // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n        return this._nativeAudioWorkletNode.parameters;\n      }\n\n      return this._parameters;\n    }\n\n    get port() {\n      return this._nativeAudioWorkletNode.port;\n    }\n\n  };\n};","export const createBaseAudioContextConstructor = (addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor) => {\n  return class BaseAudioContext extends minimalBaseAudioContextConstructor {\n    constructor(_nativeContext, numberOfChannels) {\n      super(_nativeContext, numberOfChannels);\n      this._nativeContext = _nativeContext;\n      this._audioWorklet = addAudioWorkletModule === undefined ? undefined : {\n        addModule: (moduleURL, options) => {\n          return addAudioWorkletModule(this, moduleURL, options);\n        }\n      };\n    }\n\n    get audioWorklet() {\n      return this._audioWorklet;\n    }\n\n    createAnalyser() {\n      return new analyserNodeConstructor(this);\n    }\n\n    createBiquadFilter() {\n      return new biquadFilterNodeConstructor(this);\n    }\n\n    createBuffer(numberOfChannels, length, sampleRate) {\n      return new audioBufferConstructor({\n        length,\n        numberOfChannels,\n        sampleRate\n      });\n    }\n\n    createBufferSource() {\n      return new audioBufferSourceNodeConstructor(this);\n    }\n\n    createChannelMerger(numberOfInputs = 6) {\n      return new channelMergerNodeConstructor(this, {\n        numberOfInputs\n      });\n    }\n\n    createChannelSplitter(numberOfOutputs = 6) {\n      return new channelSplitterNodeConstructor(this, {\n        numberOfOutputs\n      });\n    }\n\n    createConstantSource() {\n      return new constantSourceNodeConstructor(this);\n    }\n\n    createConvolver() {\n      return new convolverNodeConstructor(this);\n    }\n\n    createDelay(maxDelayTime = 1) {\n      return new delayNodeConstructor(this, {\n        maxDelayTime\n      });\n    }\n\n    createDynamicsCompressor() {\n      return new dynamicsCompressorNodeConstructor(this);\n    }\n\n    createGain() {\n      return new gainNodeConstructor(this);\n    }\n\n    createIIRFilter(feedforward, feedback) {\n      return new iIRFilterNodeConstructor(this, {\n        feedback,\n        feedforward\n      });\n    }\n\n    createOscillator() {\n      return new oscillatorNodeConstructor(this);\n    }\n\n    createPanner() {\n      return new pannerNodeConstructor(this);\n    }\n\n    createPeriodicWave(real, imag, constraints = {\n      disableNormalization: false\n    }) {\n      return new periodicWaveConstructor(this, { ...constraints,\n        imag,\n        real\n      });\n    }\n\n    createStereoPanner() {\n      return new stereoPannerNodeConstructor(this);\n    }\n\n    createWaveShaper() {\n      return new waveShaperNodeConstructor(this);\n    }\n\n    decodeAudioData(audioData, successCallback, errorCallback) {\n      return decodeAudioData(this._nativeContext, audioData).then(audioBuffer => {\n        if (typeof successCallback === 'function') {\n          successCallback(audioBuffer);\n        }\n\n        return audioBuffer;\n      }).catch(err => {\n        if (typeof errorCallback === 'function') {\n          errorCallback(err);\n        }\n\n        throw err;\n      });\n    }\n\n  };\n};","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nconst DEFAULT_OPTIONS = {\n  Q: 1,\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  detune: 0,\n  frequency: 350,\n  gain: 0,\n  type: 'lowpass'\n};\nexport const createBiquadFilterNodeConstructor = (audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext) => {\n  return class BiquadFilterNode extends audioNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const biquadFilterNodeRenderer = isOffline ? createBiquadFilterNodeRenderer() : null;\n      super(context, false, nativeBiquadFilterNode, biquadFilterNodeRenderer); // Bug #80: Edge & Safari do not export the correct values for maxValue and minValue.\n\n      this._Q = createAudioParam(this, isOffline, nativeBiquadFilterNode.Q, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT); // Bug #78: Firefox, Opera & Safari do not export the correct values for maxValue and minValue.\n\n      this._detune = createAudioParam(this, isOffline, nativeBiquadFilterNode.detune, 1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT), -1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT));\n      /*\n       * Bug #77: Edge does not export the correct values for maxValue and minValue. Firefox & Safari do not export the correct value\n       * for minValue.\n       */\n\n      this._frequency = createAudioParam(this, isOffline, nativeBiquadFilterNode.frequency, context.sampleRate / 2, 0); // Bug #79: Firefox, Opera & Safari do not export the correct values for maxValue and minValue.\n\n      this._gain = createAudioParam(this, isOffline, nativeBiquadFilterNode.gain, 40 * Math.log10(MOST_POSITIVE_SINGLE_FLOAT), MOST_NEGATIVE_SINGLE_FLOAT);\n      this._nativeBiquadFilterNode = nativeBiquadFilterNode;\n    }\n\n    get detune() {\n      return this._detune;\n    }\n\n    get frequency() {\n      return this._frequency;\n    }\n\n    get gain() {\n      return this._gain;\n    }\n\n    get Q() {\n      return this._Q;\n    }\n\n    get type() {\n      return this._nativeBiquadFilterNode.type;\n    }\n\n    set type(value) {\n      this._nativeBiquadFilterNode.type = value;\n    }\n\n    getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n      this._nativeBiquadFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse); // Bug #68: Only Chrome, Firefox & Opera do throw an error if the parameters differ in their length.\n\n\n      if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n        throw createInvalidAccessError();\n      }\n    }\n\n  };\n};","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createBiquadFilterNodeRendererFactory = (connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeBiquadFilterNodes = new WeakMap();\n\n    const createBiquadFilterNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeBiquadFilterNode = getNativeAudioNode(proxy);\n      /*\n       * If the initially used nativeBiquadFilterNode was not constructed on the same OfflineAudioContext it needs to be created\n       * again.\n       */\n\n      const nativeBiquadFilterNodeIsOwnedByContext = isOwnedByContext(nativeBiquadFilterNode, nativeOfflineAudioContext);\n\n      if (!nativeBiquadFilterNodeIsOwnedByContext) {\n        const options = {\n          Q: nativeBiquadFilterNode.Q.value,\n          channelCount: nativeBiquadFilterNode.channelCount,\n          channelCountMode: nativeBiquadFilterNode.channelCountMode,\n          channelInterpretation: nativeBiquadFilterNode.channelInterpretation,\n          detune: nativeBiquadFilterNode.detune.value,\n          frequency: nativeBiquadFilterNode.frequency.value,\n          gain: nativeBiquadFilterNode.gain.value,\n          type: nativeBiquadFilterNode.type\n        };\n        nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);\n\n      if (!nativeBiquadFilterNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain, trace);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain, trace);\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode, trace);\n      return nativeBiquadFilterNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeBiquadFilterNode !== undefined) {\n          return Promise.resolve(renderedNativeBiquadFilterNode);\n        }\n\n        return createBiquadFilterNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","export const createCacheTestResult = (ongoingTests, testResults) => {\n  return (tester, test) => {\n    const cachedTestResult = testResults.get(tester);\n\n    if (cachedTestResult !== undefined) {\n      return cachedTestResult;\n    }\n\n    const ongoingTest = ongoingTests.get(tester);\n\n    if (ongoingTest !== undefined) {\n      return ongoingTest;\n    }\n\n    try {\n      const synchronousTestResult = test();\n\n      if (synchronousTestResult instanceof Promise) {\n        ongoingTests.set(tester, synchronousTestResult);\n        return synchronousTestResult.catch(() => false).then(finalTestResult => {\n          ongoingTests.delete(tester);\n          testResults.set(tester, finalTestResult);\n          return finalTestResult;\n        });\n      }\n\n      testResults.set(tester, synchronousTestResult);\n      return synchronousTestResult;\n    } catch {\n      testResults.set(tester, false);\n      return false;\n    }\n  };\n};","const DEFAULT_OPTIONS = {\n  channelCount: 1,\n  channelCountMode: 'explicit',\n  channelInterpretation: 'speakers',\n  numberOfInputs: 6\n};\nexport const createChannelMergerNodeConstructor = (audioNodeConstructor, createChannelMergerNodeRenderer, createNativeChannelMergerNode, getNativeContext, isNativeOfflineAudioContext) => {\n  return class ChannelMergerNode extends audioNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeChannelMergerNode = createNativeChannelMergerNode(nativeContext, mergedOptions);\n      const channelMergerNodeRenderer = isNativeOfflineAudioContext(nativeContext) ? createChannelMergerNodeRenderer() : null;\n      super(context, false, nativeChannelMergerNode, channelMergerNodeRenderer);\n    }\n\n  };\n};","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createChannelMergerNodeRendererFactory = (createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeAudioNodes = new WeakMap();\n\n    const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeAudioNode = getNativeAudioNode(proxy); // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n\n      if (!nativeAudioNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeAudioNode.channelCount,\n          channelCountMode: nativeAudioNode.channelCountMode,\n          channelInterpretation: nativeAudioNode.channelInterpretation,\n          numberOfInputs: nativeAudioNode.numberOfInputs\n        };\n        nativeAudioNode = createNativeChannelMergerNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode, trace);\n      return nativeAudioNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAudioNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioNode);\n        }\n\n        return createAudioNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","const DEFAULT_OPTIONS = {\n  channelCount: 6,\n  channelCountMode: 'explicit',\n  channelInterpretation: 'discrete',\n  numberOfOutputs: 6\n};\n\nconst sanitizedOptions = options => {\n  return { ...options,\n    channelCount: options.numberOfOutputs\n  };\n};\n\nexport const createChannelSplitterNodeConstructor = (audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext) => {\n  return class ChannelSplitterNode extends audioNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = sanitizedOptions({ ...DEFAULT_OPTIONS,\n        ...options\n      });\n      const nativeChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, mergedOptions);\n      const channelSplitterNodeRenderer = isNativeOfflineAudioContext(nativeContext) ? createChannelSplitterNodeRenderer() : null;\n      super(context, false, nativeChannelSplitterNode, channelSplitterNodeRenderer);\n    }\n\n  };\n};","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createChannelSplitterNodeRendererFactory = (createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeAudioNodes = new WeakMap();\n\n    const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeAudioNode = getNativeAudioNode(proxy); // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n\n      if (!nativeAudioNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeAudioNode.channelCount,\n          channelCountMode: nativeAudioNode.channelCountMode,\n          channelInterpretation: nativeAudioNode.channelInterpretation,\n          numberOfOutputs: nativeAudioNode.numberOfOutputs\n        };\n        nativeAudioNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode, trace);\n      return nativeAudioNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAudioNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioNode);\n        }\n\n        return createAudioNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","export const createConnectAudioParam = renderInputsOfAudioParam => {\n  return (nativeOfflineAudioContext, audioParam, nativeAudioParam, trace) => {\n    return renderInputsOfAudioParam(audioParam, nativeOfflineAudioContext, nativeAudioParam, trace);\n  };\n};","import { isNativeAudioNode } from '../guards/native-audio-node';\nexport const createConnectMultipleOutputs = createIndexSizeError => {\n  return (outputAudioNodes, destination, output = 0, input = 0) => {\n    const outputAudioNode = outputAudioNodes[output];\n\n    if (outputAudioNode === undefined) {\n      throw createIndexSizeError();\n    }\n\n    if (isNativeAudioNode(destination)) {\n      return outputAudioNode.connect(destination, 0, input);\n    }\n\n    return outputAudioNode.connect(destination, 0);\n  };\n};","export const createConnectedNativeAudioBufferSourceNodeFactory = createNativeAudioBufferSourceNode => {\n  return (nativeContext, nativeAudioNode) => {\n    const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext);\n    const nativeAudioBuffer = nativeContext.createBuffer(1, 2, nativeContext.sampleRate);\n    nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;\n    nativeAudioBufferSourceNode.loop = true;\n    nativeAudioBufferSourceNode.connect(nativeAudioNode);\n    nativeAudioBufferSourceNode.start();\n    return () => {\n      nativeAudioBufferSourceNode.stop();\n      nativeAudioBufferSourceNode.disconnect(nativeAudioNode);\n    };\n  };\n};","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nconst DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  offset: 1\n};\nexport const createConstantSourceNodeConstructor = (audioNodeConstructor, createAudioParam, createConstantSourceNodeRendererFactory, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {\n  return class ConstantSourceNode extends audioNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeConstantSourceNode = createNativeConstantSourceNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const constantSourceNodeRenderer = isOffline ? createConstantSourceNodeRendererFactory() : null;\n      super(context, false, nativeConstantSourceNode, constantSourceNodeRenderer);\n      this._constantSourceNodeRenderer = constantSourceNodeRenderer;\n      this._nativeConstantSourceNode = nativeConstantSourceNode;\n      /*\n       * Bug #62 & #74: Edge & Safari do not support ConstantSourceNodes and do not export the correct values for maxValue and\n       * minValue for GainNodes.\n       */\n\n      this._offset = createAudioParam(this, isOffline, nativeConstantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._onended = null;\n    }\n\n    get offset() {\n      return this._offset;\n    }\n\n    get onended() {\n      return this._onended;\n    }\n\n    set onended(value) {\n      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n      this._nativeConstantSourceNode.onended = wrappedListener;\n      const nativeOnEnded = this._nativeConstantSourceNode.onended;\n      this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n    }\n\n    start(when = 0) {\n      this._nativeConstantSourceNode.start(when);\n\n      if (this._constantSourceNodeRenderer !== null) {\n        this._constantSourceNodeRenderer.start = when;\n      } else {\n        setInternalStateToActive(this);\n\n        const resetInternalStateToPassive = () => {\n          this._nativeConstantSourceNode.removeEventListener('ended', resetInternalStateToPassive); // @todo Determine a meaningful delay instead of just using one second.\n\n\n          setTimeout(() => setInternalStateToPassive(this), 1000);\n        };\n\n        this._nativeConstantSourceNode.addEventListener('ended', resetInternalStateToPassive);\n      }\n    }\n\n    stop(when = 0) {\n      this._nativeConstantSourceNode.stop(when);\n\n      if (this._constantSourceNodeRenderer !== null) {\n        this._constantSourceNodeRenderer.stop = when;\n      }\n    }\n\n  };\n};","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createConstantSourceNodeRendererFactory = (connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeConstantSourceNodes = new WeakMap();\n    let start = null;\n    let stop = null;\n\n    const createConstantSourceNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeConstantSourceNode = getNativeAudioNode(proxy);\n      /*\n       * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n       * again.\n       */\n\n      const nativeConstantSourceNodeIsOwnedByContext = isOwnedByContext(nativeConstantSourceNode, nativeOfflineAudioContext);\n\n      if (!nativeConstantSourceNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeConstantSourceNode.channelCount,\n          channelCountMode: nativeConstantSourceNode.channelCountMode,\n          channelInterpretation: nativeConstantSourceNode.channelInterpretation,\n          offset: nativeConstantSourceNode.offset.value\n        };\n        nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);\n\n        if (start !== null) {\n          nativeConstantSourceNode.start(start);\n        }\n\n        if (stop !== null) {\n          nativeConstantSourceNode.stop(stop);\n        }\n      }\n\n      renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);\n\n      if (!nativeConstantSourceNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset, trace);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset, trace);\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode, trace);\n      return nativeConstantSourceNode;\n    };\n\n    return {\n      set start(value) {\n        start = value;\n      },\n\n      set stop(value) {\n        stop = value;\n      },\n\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeConstantSourceNode !== undefined) {\n          return Promise.resolve(renderedNativeConstantSourceNode);\n        }\n\n        return createConstantSourceNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","export const createConvertNumberToUnsignedLong = unit32Array => {\n  return value => {\n    unit32Array[0] = value;\n    return unit32Array[0];\n  };\n};","const DEFAULT_OPTIONS = {\n  buffer: null,\n  channelCount: 2,\n  channelCountMode: 'clamped-max',\n  channelInterpretation: 'speakers',\n  disableNormalization: false\n};\nexport const createConvolverNodeConstructor = (audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext) => {\n  return class ConvolverNode extends audioNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeConvolverNode = createNativeConvolverNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const convolverNodeRenderer = isOffline ? createConvolverNodeRenderer() : null;\n      super(context, false, nativeConvolverNode, convolverNodeRenderer);\n      this._isBufferNullified = false;\n      this._nativeConvolverNode = nativeConvolverNode;\n    }\n\n    get buffer() {\n      if (this._isBufferNullified) {\n        return null;\n      }\n\n      return this._nativeConvolverNode.buffer;\n    }\n\n    set buffer(value) {\n      this._nativeConvolverNode.buffer = value; // Bug #115: Safari does not allow to set the buffer to null.\n\n      if (value === null && this._nativeConvolverNode.buffer !== null) {\n        const nativeContext = this._nativeConvolverNode.context;\n        this._nativeConvolverNode.buffer = nativeContext.createBuffer(1, 1, nativeContext.sampleRate);\n        this._isBufferNullified = true;\n      } else {\n        this._isBufferNullified = false;\n      }\n    }\n\n    get normalize() {\n      return this._nativeConvolverNode.normalize;\n    }\n\n    set normalize(value) {\n      this._nativeConvolverNode.normalize = value;\n    }\n\n  };\n};","import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createConvolverNodeRendererFactory = (createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeConvolverNodes = new WeakMap();\n\n    const createConvolverNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeConvolverNode = getNativeAudioNode(proxy); // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeConvolverNodeIsOwnedByContext = isOwnedByContext(nativeConvolverNode, nativeOfflineAudioContext);\n\n      if (!nativeConvolverNodeIsOwnedByContext) {\n        const options = {\n          buffer: nativeConvolverNode.buffer,\n          channelCount: nativeConvolverNode.channelCount,\n          channelCountMode: nativeConvolverNode.channelCountMode,\n          channelInterpretation: nativeConvolverNode.channelInterpretation,\n          disableNormalization: !nativeConvolverNode.normalize\n        };\n        nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);\n\n      if (isNativeAudioNodeFaker(nativeConvolverNode)) {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode.inputs[0], trace);\n      } else {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode, trace);\n      }\n\n      return nativeConvolverNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeConvolverNode !== undefined) {\n          return Promise.resolve(renderedNativeConvolverNode);\n        }\n\n        return createConvolverNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","export const createCreateNativeOfflineAudioContext = (createNotSupportedError, nativeOfflineAudioContextConstructor) => {\n  return (numberOfChannels, length, sampleRate) => {\n    if (nativeOfflineAudioContextConstructor === null) {\n      throw new Error('Missing the native OfflineAudioContext constructor.');\n    }\n\n    try {\n      return new nativeOfflineAudioContextConstructor(numberOfChannels, length, sampleRate);\n    } catch (err) {\n      // Bug #143, #144 & #146: Safari throws a SyntaxError when numberOfChannels, length or sampleRate are invalid.\n      // Bug #143: Edge throws a SyntaxError when numberOfChannels or length are invalid.\n      // Bug #145: Edge throws an IndexSizeError when sampleRate is zero.\n      if (err.name === 'IndexSizeError' || err.name === 'SyntaxError') {\n        throw createNotSupportedError();\n      }\n\n      throw err;\n    }\n  };\n};","export const createDataCloneError = () => {\n  try {\n    return new DOMException('', 'DataCloneError');\n  } catch (err) {\n    // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n    err.code = 25;\n    err.name = 'DataCloneError';\n    return err;\n  }\n};","import { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nexport const createDecrementCycleCounter = (connectNativeAudioNodeToNativeAudioNode, cycleCounters, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext) => {\n  return (audioNode, count) => {\n    const cycleCounter = cycleCounters.get(audioNode);\n\n    if (cycleCounter === undefined) {\n      throw new Error('Missing the expected cycle count.');\n    }\n\n    const nativeContext = getNativeContext(audioNode.context);\n    const isOffline = isNativeOfflineAudioContext(nativeContext);\n\n    if (cycleCounter === count) {\n      cycleCounters.delete(audioNode);\n\n      if (!isOffline && isActiveAudioNode(audioNode)) {\n        const nativeSourceAudioNode = getNativeAudioNode(audioNode);\n        const {\n          outputs\n        } = getAudioNodeConnections(audioNode);\n\n        for (const output of outputs) {\n          if (isAudioNodeOutputConnection(output)) {\n            const nativeDestinationAudioNode = getNativeAudioNode(output[0]);\n            connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);\n          } else {\n            const nativeDestinationAudioParam = getNativeAudioParam(output[0]);\n            nativeSourceAudioNode.connect(nativeDestinationAudioParam, output[1]);\n          }\n        }\n      }\n    } else {\n      cycleCounters.set(audioNode, cycleCounter - count);\n    }\n  };\n};","const DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  delayTime: 0,\n  maxDelayTime: 1\n};\nexport const createDelayNodeConstructor = (audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext) => {\n  return class DelayNode extends audioNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeDelayNode = createNativeDelayNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const delayNodeRenderer = isOffline ? createDelayNodeRenderer(mergedOptions.maxDelayTime) : null;\n      super(context, false, nativeDelayNode, delayNodeRenderer); // Bug #161: Edge does not export the correct values for maxValue and minValue.\n\n      this._delayTime = createAudioParam(this, isOffline, nativeDelayNode.delayTime, mergedOptions.maxDelayTime, 0);\n    }\n\n    get delayTime() {\n      return this._delayTime;\n    }\n\n  };\n};","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDelayNodeRendererFactory = (connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return maxDelayTime => {\n    const renderedNativeDelayNodes = new WeakMap();\n\n    const createDelayNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeDelayNode = getNativeAudioNode(proxy); // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeDelayNodeIsOwnedByContext = isOwnedByContext(nativeDelayNode, nativeOfflineAudioContext);\n\n      if (!nativeDelayNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeDelayNode.channelCount,\n          channelCountMode: nativeDelayNode.channelCountMode,\n          channelInterpretation: nativeDelayNode.channelInterpretation,\n          delayTime: nativeDelayNode.delayTime.value,\n          maxDelayTime\n        };\n        nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);\n\n      if (!nativeDelayNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime, trace);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime, trace);\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode, trace);\n      return nativeDelayNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeDelayNode !== undefined) {\n          return Promise.resolve(renderedNativeDelayNode);\n        }\n\n        return createDelayNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","export const createDeleteUnrenderedAudioWorkletNode = getUnrenderedAudioWorkletNodes => {\n  return (nativeContext, audioWorkletNode) => {\n    getUnrenderedAudioWorkletNodes(nativeContext).delete(audioWorkletNode);\n  };\n};","import { isNativeAudioNode } from '../guards/native-audio-node';\n\nconst getOutputAudioNodeAtIndex = (createIndexSizeError, outputAudioNodes, output) => {\n  const outputAudioNode = outputAudioNodes[output];\n\n  if (outputAudioNode === undefined) {\n    throw createIndexSizeError();\n  }\n\n  return outputAudioNode;\n};\n\nexport const createDisconnectMultipleOutputs = createIndexSizeError => {\n  return (outputAudioNodes, destinationOrOutput = undefined, output = undefined, input = 0) => {\n    if (destinationOrOutput === undefined) {\n      return outputAudioNodes.forEach(outputAudioNode => outputAudioNode.disconnect());\n    }\n\n    if (typeof destinationOrOutput === 'number') {\n      return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, destinationOrOutput).disconnect();\n    }\n\n    if (isNativeAudioNode(destinationOrOutput)) {\n      if (output === undefined) {\n        return outputAudioNodes.forEach(outputAudioNode => outputAudioNode.disconnect(destinationOrOutput));\n      }\n\n      if (input === undefined) {\n        return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0);\n      }\n\n      return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0, input);\n    }\n\n    if (output === undefined) {\n      return outputAudioNodes.forEach(outputAudioNode => outputAudioNode.disconnect(destinationOrOutput));\n    }\n\n    return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0);\n  };\n};","const DEFAULT_OPTIONS = {\n  attack: 0.003,\n  channelCount: 2,\n  channelCountMode: 'clamped-max',\n  channelInterpretation: 'speakers',\n  knee: 30,\n  ratio: 12,\n  release: 0.25,\n  threshold: -24\n};\nexport const createDynamicsCompressorNodeConstructor = (audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext) => {\n  return class DynamicsCompressorNode extends audioNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const dynamicsCompressorNodeRenderer = isOffline ? createDynamicsCompressorNodeRenderer() : null;\n      super(context, false, nativeDynamicsCompressorNode, dynamicsCompressorNodeRenderer); // Bug #110: Edge does not export the correct values for maxValue and minValue.\n\n      this._attack = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.attack, 1, 0);\n      this._knee = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.knee, 40, 0);\n      this._nativeDynamicsCompressorNode = nativeDynamicsCompressorNode;\n      this._ratio = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.ratio, 20, 1);\n      this._release = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.release, 1, 0);\n      this._threshold = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.threshold, 0, -100);\n    }\n\n    get attack() {\n      return this._attack;\n    }\n    /*\n     * Bug #108: Only Chrome, Firefox and Opera disallow a channelCount of three and above yet which is why the getter and setter needs\n     * to be overwritten here.\n     */\n\n\n    get channelCount() {\n      return this._nativeDynamicsCompressorNode.channelCount;\n    }\n\n    set channelCount(value) {\n      const previousChannelCount = this._nativeDynamicsCompressorNode.channelCount;\n      this._nativeDynamicsCompressorNode.channelCount = value;\n\n      if (value > 2) {\n        this._nativeDynamicsCompressorNode.channelCount = previousChannelCount;\n        throw createNotSupportedError();\n      }\n    }\n    /*\n     * Bug #109: Only Chrome, Firefox and Opera disallow a channelCountMode of 'max' yet which is why the getter and setter needs to be\n     * overwritten here.\n     */\n\n\n    get channelCountMode() {\n      return this._nativeDynamicsCompressorNode.channelCountMode;\n    }\n\n    set channelCountMode(value) {\n      const previousChannelCount = this._nativeDynamicsCompressorNode.channelCountMode;\n      this._nativeDynamicsCompressorNode.channelCountMode = value;\n\n      if (value === 'max') {\n        this._nativeDynamicsCompressorNode.channelCountMode = previousChannelCount;\n        throw createNotSupportedError();\n      }\n    }\n\n    get knee() {\n      return this._knee;\n    }\n\n    get ratio() {\n      return this._ratio;\n    }\n\n    get reduction() {\n      // Bug #111: Safari returns an AudioParam instead of a number.\n      if (typeof this._nativeDynamicsCompressorNode.reduction.value === 'number') {\n        return this._nativeDynamicsCompressorNode.reduction.value;\n      }\n\n      return this._nativeDynamicsCompressorNode.reduction;\n    }\n\n    get release() {\n      return this._release;\n    }\n\n    get threshold() {\n      return this._threshold;\n    }\n\n  };\n};","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDynamicsCompressorNodeRendererFactory = (connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeDynamicsCompressorNodes = new WeakMap();\n\n    const createDynamicsCompressorNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeDynamicsCompressorNode = getNativeAudioNode(proxy);\n      /*\n       * If the initially used nativeDynamicsCompressorNode was not constructed on the same OfflineAudioContext it needs to be\n       * created again.\n       */\n\n      const nativeDynamicsCompressorNodeIsOwnedByContext = isOwnedByContext(nativeDynamicsCompressorNode, nativeOfflineAudioContext);\n\n      if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n        const options = {\n          attack: nativeDynamicsCompressorNode.attack.value,\n          channelCount: nativeDynamicsCompressorNode.channelCount,\n          channelCountMode: nativeDynamicsCompressorNode.channelCountMode,\n          channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,\n          knee: nativeDynamicsCompressorNode.knee.value,\n          ratio: nativeDynamicsCompressorNode.ratio.value,\n          release: nativeDynamicsCompressorNode.release.value,\n          threshold: nativeDynamicsCompressorNode.threshold.value\n        };\n        nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n\n      if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold, trace);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold, trace);\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode, trace);\n      return nativeDynamicsCompressorNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeDynamicsCompressorNode !== undefined) {\n          return Promise.resolve(renderedNativeDynamicsCompressorNode);\n        }\n\n        return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","export const createEncodingError = () => {\n  try {\n    return new DOMException('', 'EncodingError');\n  } catch (err) {\n    // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n    err.code = 0;\n    err.name = 'EncodingError';\n    return err;\n  }\n};","export const createEvaluateSource = window => {\n  return source => new Promise((resolve, reject) => {\n    if (window === null) {\n      reject(new SyntaxError());\n      return;\n    }\n\n    const head = window.document.head;\n\n    if (head === null) {\n      reject(new SyntaxError());\n    } else {\n      const script = window.document.createElement('script'); // @todo Safari doesn't like URLs with a type of 'application/javascript; charset=utf-8'.\n\n      const blob = new Blob([source], {\n        type: 'application/javascript'\n      });\n      const url = URL.createObjectURL(blob);\n      const originalOnErrorHandler = window.onerror;\n\n      const removeErrorEventListenerAndRevokeUrl = () => {\n        window.onerror = originalOnErrorHandler;\n        URL.revokeObjectURL(url);\n      };\n\n      window.onerror = (message, src, lineno, colno, error) => {\n        // @todo Edge thinks the source is the one of the html document.\n        if (src === url || src === window.location.href && lineno === 1 && colno === 1) {\n          removeErrorEventListenerAndRevokeUrl();\n          reject(error);\n          return false;\n        }\n\n        if (originalOnErrorHandler !== null) {\n          return originalOnErrorHandler(message, src, lineno, colno, error);\n        }\n      };\n\n      script.onerror = () => {\n        removeErrorEventListenerAndRevokeUrl();\n        reject(new SyntaxError());\n      };\n\n      script.onload = () => {\n        removeErrorEventListenerAndRevokeUrl();\n        resolve();\n      };\n\n      script.src = url;\n      script.type = 'module';\n      head.appendChild(script);\n    }\n  });\n};","export const createEventTargetConstructor = wrapEventListener => {\n  return class EventTarget {\n    constructor(_nativeEventTarget) {\n      this._nativeEventTarget = _nativeEventTarget;\n      this._listeners = new WeakMap();\n    }\n\n    addEventListener(type, listener, options) {\n      if (listener !== null) {\n        let wrappedEventListener = this._listeners.get(listener);\n\n        if (wrappedEventListener === undefined) {\n          wrappedEventListener = wrapEventListener(this, listener);\n\n          if (typeof listener === 'function') {\n            this._listeners.set(listener, wrappedEventListener);\n          }\n        }\n\n        this._nativeEventTarget.addEventListener(type, wrappedEventListener, options);\n      }\n    }\n\n    dispatchEvent(event) {\n      return this._nativeEventTarget.dispatchEvent(event);\n    }\n\n    removeEventListener(type, listener, options) {\n      const wrappedEventListener = listener === null ? undefined : this._listeners.get(listener);\n\n      this._nativeEventTarget.removeEventListener(type, wrappedEventListener === undefined ? null : wrappedEventListener, options);\n    }\n\n  };\n};","export const createExposeCurrentFrameAndCurrentTime = window => {\n  return (currentTime, sampleRate, fn) => {\n    Object.defineProperties(window, {\n      currentFrame: {\n        configurable: true,\n\n        get() {\n          return Math.round(currentTime * sampleRate);\n        }\n\n      },\n      currentTime: {\n        configurable: true,\n\n        get() {\n          return currentTime;\n        }\n\n      }\n    });\n\n    try {\n      return fn();\n    } finally {\n      if (window !== null) {\n        delete window.currentFrame;\n        delete window.currentTime;\n      }\n    }\n  };\n};","export const createFetchSource = createAbortError => {\n  return async url => {\n    try {\n      const response = await fetch(url);\n\n      if (response.ok) {\n        return response.text();\n      }\n    } catch {}\n    /* Ignore errors. */\n    // tslint:disable-line:no-empty\n\n\n    throw createAbortError();\n  };\n};","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nconst DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  gain: 1\n};\nexport const createGainNodeConstructor = (audioNodeConstructor, createAudioParam, createGainNodeRenderer, createNativeGainNode, getNativeContext, isNativeOfflineAudioContext) => {\n  return class GainNode extends audioNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeGainNode = createNativeGainNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const gainNodeRenderer = isOffline ? createGainNodeRenderer() : null;\n      super(context, false, nativeGainNode, gainNodeRenderer); // Bug #74: Edge & Safari do not export the correct values for maxValue and minValue.\n\n      this._gain = createAudioParam(this, isOffline, nativeGainNode.gain, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n    }\n\n    get gain() {\n      return this._gain;\n    }\n\n  };\n};","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createGainNodeRendererFactory = (connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeGainNodes = new WeakMap();\n\n    const createGainNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeGainNode = getNativeAudioNode(proxy); // If the initially used nativeGainNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeGainNodeIsOwnedByContext = isOwnedByContext(nativeGainNode, nativeOfflineAudioContext);\n\n      if (!nativeGainNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeGainNode.channelCount,\n          channelCountMode: nativeGainNode.channelCountMode,\n          channelInterpretation: nativeGainNode.channelInterpretation,\n          gain: nativeGainNode.gain.value\n        };\n        nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeGainNodes.set(nativeOfflineAudioContext, nativeGainNode);\n\n      if (!nativeGainNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain, trace);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain, trace);\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeGainNode, trace);\n      return nativeGainNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeGainNode = renderedNativeGainNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeGainNode !== undefined) {\n          return Promise.resolve(renderedNativeGainNode);\n        }\n\n        return createGainNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","export const createGetAudioNodeRenderer = getAudioNodeConnections => {\n  return audioNode => {\n    const audioNodeConnections = getAudioNodeConnections(audioNode);\n\n    if (audioNodeConnections.renderer === null) {\n      throw new Error('Missing the renderer of the given AudioNode in the audio graph.');\n    }\n\n    return audioNodeConnections.renderer;\n  };\n};","export const createGetAudioParamRenderer = getAudioParamConnections => {\n  return audioParam => {\n    const audioParamConnections = getAudioParamConnections(audioParam);\n\n    if (audioParamConnections.renderer === null) {\n      throw new Error('Missing the renderer of the given AudioParam in the audio graph.');\n    }\n\n    return audioParamConnections.renderer;\n  };\n};","import { BACKUP_NATIVE_CONTEXT_STORE } from '../globals';\nexport const createGetBackupNativeContext = (isNativeOfflineAudioContext, nativeAudioContextConstructor, nativeOfflineAudioContextConstructor) => {\n  return nativeContext => {\n    /*\n     * Bug #50: Only Edge does currently not allow to create AudioNodes on a closed context yet which is why there needs to be no\n     * backupNativeContext in that case.\n     */\n    if (nativeContext.state === 'closed' && nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name !== 'webkitAudioContext') {\n      if (isNativeOfflineAudioContext(nativeContext)) {\n        const backupNativeContext = BACKUP_NATIVE_CONTEXT_STORE.get(nativeContext);\n\n        if (backupNativeContext !== undefined) {\n          return backupNativeContext;\n        }\n\n        if (nativeOfflineAudioContextConstructor !== null) {\n          // @todo Copy the attached AudioWorkletProcessors and other settings.\n          const bckpNtveCntxt = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n          BACKUP_NATIVE_CONTEXT_STORE.set(nativeContext, bckpNtveCntxt);\n          return bckpNtveCntxt;\n        }\n      } else {\n        const backupNativeContext = BACKUP_NATIVE_CONTEXT_STORE.get(nativeContext);\n\n        if (backupNativeContext !== undefined) {\n          return backupNativeContext;\n        } // @todo Copy the attached AudioWorkletProcessors and other settings.\n\n\n        const bckpNtveCntxt = new nativeAudioContextConstructor();\n        BACKUP_NATIVE_CONTEXT_STORE.set(nativeContext, bckpNtveCntxt);\n        return bckpNtveCntxt;\n      }\n    }\n\n    return null;\n  };\n};","import { createInvalidStateError } from './invalid-state-error';\nexport const createGetNativeContext = contextStore => {\n  return context => {\n    const nativeContext = contextStore.get(context);\n\n    if (nativeContext === undefined) {\n      throw createInvalidStateError();\n    }\n\n    return nativeContext;\n  };\n};","export const createGetUnrenderedAudioWorkletNodes = unrenderedAudioWorkletNodeStore => {\n  return nativeContext => {\n    const unrenderedAudioWorkletNodes = unrenderedAudioWorkletNodeStore.get(nativeContext);\n\n    if (unrenderedAudioWorkletNodes === undefined) {\n      throw new Error('The context has no set of AudioWorkletNodes.');\n    }\n\n    return unrenderedAudioWorkletNodes;\n  };\n};","import { filterBuffer } from '../helpers/filter-buffer';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\n\nconst filterFullBuffer = (renderedBuffer, nativeOfflineAudioContext, feedback, feedforward) => {\n  const feedbackLength = feedback.length;\n  const feedforwardLength = feedforward.length;\n  const minLength = Math.min(feedbackLength, feedforwardLength);\n\n  if (feedback[0] !== 1) {\n    for (let i = 0; i < feedbackLength; i += 1) {\n      feedforward[i] /= feedback[0];\n    }\n\n    for (let i = 1; i < feedforwardLength; i += 1) {\n      feedback[i] /= feedback[0];\n    }\n  }\n\n  const bufferLength = 32;\n  const xBuffer = new Float32Array(bufferLength);\n  const yBuffer = new Float32Array(bufferLength);\n  const filteredBuffer = nativeOfflineAudioContext.createBuffer(renderedBuffer.numberOfChannels, renderedBuffer.length, renderedBuffer.sampleRate);\n  const numberOfChannels = renderedBuffer.numberOfChannels;\n\n  for (let i = 0; i < numberOfChannels; i += 1) {\n    const input = renderedBuffer.getChannelData(i);\n    const output = filteredBuffer.getChannelData(i);\n    xBuffer.fill(0);\n    yBuffer.fill(0);\n    filterBuffer(feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffer, yBuffer, 0, bufferLength, input, output);\n  }\n\n  return filteredBuffer;\n};\n\nexport const createIIRFilterNodeRendererFactory = (createNativeAudioBufferSourceNode, createNativeAudioNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {\n  return (feedback, feedforward) => {\n    const renderedNativeAudioNodes = new WeakMap();\n    let filteredBufferPromise = null;\n\n    const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeAudioBufferSourceNode = null;\n      let nativeIIRFilterNode = getNativeAudioNode(proxy); // If the initially used nativeIIRFilterNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeIIRFilterNodeIsOwnedByContext = isOwnedByContext(nativeIIRFilterNode, nativeOfflineAudioContext); // Bug #9: Safari does not support IIRFilterNodes.\n\n      if (nativeOfflineAudioContext.createIIRFilter === undefined) {\n        nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext);\n      } else if (!nativeIIRFilterNodeIsOwnedByContext) {\n        nativeIIRFilterNode = createNativeAudioNode(nativeOfflineAudioContext, ntvCntxt => {\n          return ntvCntxt.createIIRFilter(feedforward, feedback);\n        });\n      }\n\n      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode === null ? nativeIIRFilterNode : nativeAudioBufferSourceNode);\n\n      if (nativeAudioBufferSourceNode !== null) {\n        if (filteredBufferPromise === null) {\n          if (nativeOfflineAudioContextConstructor === null) {\n            throw new Error('Missing the native OfflineAudioContext constructor.');\n          }\n\n          const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor( // Bug #47: The AudioDestinationNode in Edge and Safari gets not initialized correctly.\n          proxy.context.destination.channelCount, // Bug #17: Safari does not yet expose the length.\n          proxy.context.length, nativeOfflineAudioContext.sampleRate);\n\n          filteredBufferPromise = (async () => {\n            await renderInputsOfAudioNode(proxy, partialOfflineAudioContext, partialOfflineAudioContext.destination, trace);\n            const renderedBuffer = await renderNativeOfflineAudioContext(partialOfflineAudioContext);\n            return filterFullBuffer(renderedBuffer, nativeOfflineAudioContext, feedback, feedforward);\n          })();\n        }\n\n        const filteredBuffer = await filteredBufferPromise;\n        nativeAudioBufferSourceNode.buffer = filteredBuffer;\n        nativeAudioBufferSourceNode.start(0);\n        return nativeAudioBufferSourceNode;\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeIIRFilterNode, trace);\n      return nativeIIRFilterNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAudioNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioNode);\n        }\n\n        return createAudioNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","import { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nexport const createIncrementCycleCounterFactory = (cycleCounters, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, isActiveAudioNode) => {\n  return isOffline => {\n    return (audioNode, count) => {\n      const cycleCounter = cycleCounters.get(audioNode);\n\n      if (cycleCounter === undefined) {\n        if (!isOffline && isActiveAudioNode(audioNode)) {\n          const nativeSourceAudioNode = getNativeAudioNode(audioNode);\n          const {\n            outputs\n          } = getAudioNodeConnections(audioNode);\n\n          for (const output of outputs) {\n            if (isAudioNodeOutputConnection(output)) {\n              const nativeDestinationAudioNode = getNativeAudioNode(output[0]);\n              disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);\n            } else {\n              const nativeDestinationAudioParam = getNativeAudioParam(output[0]);\n              nativeSourceAudioNode.disconnect(nativeDestinationAudioParam, output[1]);\n            }\n          }\n        }\n\n        cycleCounters.set(audioNode, count);\n      } else {\n        cycleCounters.set(audioNode, cycleCounter + count);\n      }\n    };\n  };\n};","export const createIsAnyAudioContext = (contextStore, isNativeAudioContext) => {\n  return anything => {\n    const nativeContext = contextStore.get(anything);\n    return isNativeAudioContext(nativeContext) || isNativeAudioContext(anything);\n  };\n};","export const createIsAnyAudioNode = (audioNodeStore, isNativeAudioNode) => {\n  return anything => audioNodeStore.has(anything) || isNativeAudioNode(anything);\n};","export const createIsAnyAudioParam = (audioParamStore, isNativeAudioParam) => {\n  return anything => audioParamStore.has(anything) || isNativeAudioParam(anything);\n};","export const createIsAnyOfflineAudioContext = (contextStore, isNativeOfflineAudioContext) => {\n  return anything => {\n    const nativeContext = contextStore.get(anything);\n    return isNativeOfflineAudioContext(nativeContext) || isNativeOfflineAudioContext(anything);\n  };\n};","export const createIsNativeAudioContext = nativeAudioContextConstructor => {\n  return anything => {\n    return nativeAudioContextConstructor !== null && anything instanceof nativeAudioContextConstructor;\n  };\n};","export const createIsNativeAudioNode = window => {\n  return anything => {\n    return window !== null && typeof window.AudioNode === 'function' && anything instanceof window.AudioNode;\n  };\n};","export const createIsNativeAudioParam = window => {\n  return anything => {\n    return window !== null && typeof window.AudioParam === 'function' && anything instanceof window.AudioParam;\n  };\n};","export const createIsNativeContext = (isNativeAudioContext, isNativeOfflineAudioContext) => {\n  return anything => {\n    return isNativeAudioContext(anything) || isNativeOfflineAudioContext(anything);\n  };\n};","export const createIsNativeOfflineAudioContext = nativeOfflineAudioContextConstructor => {\n  return anything => {\n    return nativeOfflineAudioContextConstructor !== null && anything instanceof nativeOfflineAudioContextConstructor;\n  };\n};","export const createIsSecureContext = window => window !== null && window.isSecureContext;","export const createIsSupportedPromise = async (cacheTestResult, testAudioBufferCopyChannelMethodsSubarraySupport, testAudioContextCloseMethodSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextOptionsSupport, testAudioNodeConnectMethodSupport, testAudioWorkletProcessorNoOutputsSupport, testChannelMergerNodeChannelCountSupport, testConstantSourceNodeAccurateSchedulingSupport, testConvolverNodeBufferReassignabilitySupport, testIsSecureContextSupport, testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport, testStereoPannerNodeDefaultValueSupport, testTransferablesSupport) => {\n  if (cacheTestResult(testAudioBufferCopyChannelMethodsSubarraySupport, testAudioBufferCopyChannelMethodsSubarraySupport) && cacheTestResult(testAudioContextCloseMethodSupport, testAudioContextCloseMethodSupport) && cacheTestResult(testAudioContextOptionsSupport, testAudioContextOptionsSupport) && cacheTestResult(testAudioNodeConnectMethodSupport, testAudioNodeConnectMethodSupport) && cacheTestResult(testChannelMergerNodeChannelCountSupport, testChannelMergerNodeChannelCountSupport) && cacheTestResult(testConstantSourceNodeAccurateSchedulingSupport, testConstantSourceNodeAccurateSchedulingSupport) && cacheTestResult(testConvolverNodeBufferReassignabilitySupport, testConvolverNodeBufferReassignabilitySupport) && cacheTestResult(testIsSecureContextSupport, testIsSecureContextSupport) && cacheTestResult(testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport, testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport)) {\n    const results = await Promise.all([cacheTestResult(testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport), cacheTestResult(testAudioWorkletProcessorNoOutputsSupport, testAudioWorkletProcessorNoOutputsSupport), cacheTestResult(testStereoPannerNodeDefaultValueSupport, testStereoPannerNodeDefaultValueSupport), cacheTestResult(testTransferablesSupport, testTransferablesSupport)]);\n    return results.every(result => result);\n  }\n\n  return false;\n};","export const createMediaElementAudioSourceNodeConstructor = (audioNodeConstructor, createNativeMediaElementAudioSourceNode, getNativeContext, isNativeOfflineAudioContext) => {\n  return class MediaElementAudioSourceNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const nativeMediaElementAudioSourceNode = createNativeMediaElementAudioSourceNode(nativeContext, options); // Bug #171: Safari allows to create a MediaElementAudioSourceNode with an OfflineAudioContext.\n\n      if (isNativeOfflineAudioContext(nativeContext)) {\n        throw TypeError();\n      }\n\n      super(context, true, nativeMediaElementAudioSourceNode, null); // Bug #63: Edge does not expose the mediaElement yet.\n\n      this._mediaElement = options.mediaElement;\n      this._nativeMediaElementAudioSourceNode = nativeMediaElementAudioSourceNode;\n    }\n\n    get mediaElement() {\n      return this._nativeMediaElementAudioSourceNode.mediaElement === undefined ? this._mediaElement : this._nativeMediaElementAudioSourceNode.mediaElement;\n    }\n\n  };\n};","const DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'explicit',\n  channelInterpretation: 'speakers'\n};\nexport const createMediaStreamAudioDestinationNodeConstructor = (audioNodeConstructor, createNativeMediaStreamAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext) => {\n  return class MediaStreamAudioDestinationNode extends audioNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context); // Bug #173: Safari allows to create a MediaStreamAudioDestinationNode with an OfflineAudioContext.\n\n      if (isNativeOfflineAudioContext(nativeContext)) {\n        throw new TypeError();\n      }\n\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeMediaStreamAudioDestinationNode = createNativeMediaStreamAudioDestinationNode(nativeContext, mergedOptions);\n      super(context, false, nativeMediaStreamAudioDestinationNode, null);\n      this._nativeMediaStreamAudioDestinationNode = nativeMediaStreamAudioDestinationNode;\n    }\n\n    get stream() {\n      return this._nativeMediaStreamAudioDestinationNode.stream;\n    }\n\n  };\n};","export const createMediaStreamAudioSourceNodeConstructor = (audioNodeConstructor, createNativeMediaStreamAudioSourceNode, getNativeContext, isNativeOfflineAudioContext) => {\n  return class MediaStreamAudioSourceNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const nativeMediaStreamAudioSourceNode = createNativeMediaStreamAudioSourceNode(nativeContext, options); // Bug #172: Safari allows to create a MediaStreamAudioSourceNode with an OfflineAudioContext.\n\n      if (isNativeOfflineAudioContext(nativeContext)) {\n        throw new TypeError();\n      }\n\n      super(context, true, nativeMediaStreamAudioSourceNode, null);\n      this._nativeMediaStreamAudioSourceNode = nativeMediaStreamAudioSourceNode;\n    }\n\n    get mediaStream() {\n      return this._nativeMediaStreamAudioSourceNode.mediaStream;\n    }\n\n  };\n};","export const createMediaStreamTrackAudioSourceNodeConstructor = (audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, getNativeContext) => {\n  return class MediaStreamTrackAudioSourceNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const nativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNode(nativeContext, options);\n      super(context, true, nativeMediaStreamTrackAudioSourceNode, null);\n    }\n\n  };\n};","import { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nexport const createMinimalAudioContextConstructor = (createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor) => {\n  return class MinimalAudioContext extends minimalBaseAudioContextConstructor {\n    constructor(options = {}) {\n      if (nativeAudioContextConstructor === null) {\n        throw new Error('Missing the native AudioContext constructor.');\n      }\n\n      const nativeAudioContext = new nativeAudioContextConstructor(options); // Bug #131 Safari returns null when there are four other AudioContexts running already.\n\n      if (nativeAudioContext === null) {\n        throw createUnknownError();\n      } // Bug #51 Only Chrome and Opera throw an error if the given latencyHint is invalid.\n\n\n      if (!isValidLatencyHint(options.latencyHint)) {\n        throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);\n      } // Bug #150 Only Chrome, Firefox and Opera support setting the sampleRate.\n\n\n      if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n        throw createNotSupportedError();\n      }\n\n      super(nativeAudioContext, 2);\n      const {\n        latencyHint\n      } = options;\n      const {\n        sampleRate\n      } = nativeAudioContext; // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n\n      this._baseLatency = typeof nativeAudioContext.baseLatency === 'number' ? nativeAudioContext.baseLatency : latencyHint === 'balanced' ? 512 / sampleRate : latencyHint === 'interactive' || latencyHint === undefined ? 256 / sampleRate : latencyHint === 'playback' ? 1024 / sampleRate :\n      /*\n       * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n       * ScriptProcessorNode.\n       */\n      Math.max(2, Math.min(128, Math.round(latencyHint * sampleRate / 128))) * 128 / sampleRate;\n      this._nativeAudioContext = nativeAudioContext;\n      this._state = null;\n      /*\n       * Bug #34: Chrome and Opera pretend to be running right away, but fire an onstatechange event when the state actually\n       * changes to 'running'.\n       */\n\n      if (nativeAudioContext.state === 'running') {\n        this._state = 'suspended';\n\n        const revokeState = () => {\n          if (this._state === 'suspended') {\n            this._state = null;\n          }\n\n          nativeAudioContext.removeEventListener('statechange', revokeState);\n        };\n\n        nativeAudioContext.addEventListener('statechange', revokeState);\n      }\n    }\n\n    get baseLatency() {\n      return this._baseLatency;\n    }\n\n    get state() {\n      return this._state !== null ? this._state : this._nativeAudioContext.state;\n    }\n\n    close() {\n      // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n      if (this.state === 'closed') {\n        return this._nativeAudioContext.close().then(() => {\n          throw createInvalidStateError();\n        });\n      } // Bug #34: If the state was set to suspended before it should be revoked now.\n\n\n      if (this._state === 'suspended') {\n        this._state = null;\n      }\n\n      return this._nativeAudioContext.close();\n      /*\n       * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n       * ...then(() => deleteAudioGraph(this, this._nativeAudioContext));\n       */\n    }\n\n    resume() {\n      if (this._state === 'suspended') {\n        return new Promise((resolve, reject) => {\n          const resolvePromise = () => {\n            this._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n\n            if (this._nativeAudioContext.state === 'running') {\n              resolve();\n            } else {\n              this.resume().then(resolve, reject);\n            }\n          };\n\n          this._nativeAudioContext.addEventListener('statechange', resolvePromise);\n        });\n      }\n\n      return this._nativeAudioContext.resume().catch(err => {\n        // Bug #55: Chrome, Edge and Opera do throw an InvalidAccessError instead of an InvalidStateError.\n        // Bug #56: Safari invokes the catch handler but without an error.\n        if (err === undefined || err.code === 15) {\n          throw createInvalidStateError();\n        }\n\n        throw err;\n      });\n    }\n\n    suspend() {\n      return this._nativeAudioContext.suspend().catch(err => {\n        // Bug #56: Safari invokes the catch handler but without an error.\n        if (err === undefined) {\n          throw createInvalidStateError();\n        }\n\n        throw err;\n      });\n    }\n\n  };\n};","import { CONTEXT_STORE } from '../globals';\nexport const createMinimalBaseAudioContextConstructor = (audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, isNativeOfflineAudioContext, unrenderedAudioWorkletNodeStore, wrapEventListener) => {\n  return class MinimalBaseAudioContext extends eventTargetConstructor {\n    constructor(_nativeContext, numberOfChannels) {\n      super(_nativeContext);\n      this._nativeContext = _nativeContext;\n      CONTEXT_STORE.set(this, _nativeContext); // Bug #93: Edge will set the sampleRate of an AudioContext to zero when it is closed.\n\n      const sampleRate = _nativeContext.sampleRate;\n      Object.defineProperty(_nativeContext, 'sampleRate', {\n        get: () => sampleRate\n      });\n\n      if (isNativeOfflineAudioContext(_nativeContext)) {\n        unrenderedAudioWorkletNodeStore.set(_nativeContext, new Set());\n      }\n\n      this._destination = new audioDestinationNodeConstructor(this, numberOfChannels);\n      this._listener = createAudioListener(this, _nativeContext);\n      this._onstatechange = null;\n    }\n\n    get currentTime() {\n      return this._nativeContext.currentTime;\n    }\n\n    get destination() {\n      return this._destination;\n    }\n\n    get listener() {\n      return this._listener;\n    }\n\n    get onstatechange() {\n      return this._onstatechange;\n    }\n\n    set onstatechange(value) {\n      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n      this._nativeContext.onstatechange = wrappedListener;\n      const nativeOnStateChange = this._nativeContext.onstatechange;\n      this._onstatechange = nativeOnStateChange !== null && nativeOnStateChange === wrappedListener ? value : nativeOnStateChange;\n    }\n\n    get sampleRate() {\n      return this._nativeContext.sampleRate;\n    }\n\n    get state() {\n      return this._nativeContext.state;\n    }\n\n  };\n};","import { testPromiseSupport } from '../helpers/test-promise-support';\nconst DEFAULT_OPTIONS = {\n  numberOfChannels: 1\n};\nexport const createMinimalOfflineAudioContextConstructor = (cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering) => {\n  return class MinimalOfflineAudioContext extends minimalBaseAudioContextConstructor {\n    constructor(options) {\n      const {\n        length,\n        numberOfChannels,\n        sampleRate\n      } = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate); // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.\n\n      if (!cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n        nativeOfflineAudioContext.addEventListener('statechange', (() => {\n          let i = 0;\n\n          const delayStateChangeEvent = event => {\n            if (this._state === 'running') {\n              if (i > 0) {\n                nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);\n                event.stopImmediatePropagation();\n\n                this._waitForThePromiseToSettle(event);\n              } else {\n                i += 1;\n              }\n            }\n          };\n\n          return delayStateChangeEvent;\n        })());\n      }\n\n      super(nativeOfflineAudioContext, numberOfChannels);\n      this._length = length;\n      this._nativeOfflineAudioContext = nativeOfflineAudioContext;\n      this._state = null;\n    }\n\n    get length() {\n      // Bug #17: Safari does not yet expose the length.\n      if (this._nativeOfflineAudioContext.length === undefined) {\n        return this._length;\n      }\n\n      return this._nativeOfflineAudioContext.length;\n    }\n\n    get state() {\n      return this._state === null ? this._nativeOfflineAudioContext.state : this._state;\n    }\n\n    startRendering() {\n      /*\n       * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore\n       * the state of the nativeOfflineAudioContext might no transition to running immediately.\n       */\n      if (this._state === 'running') {\n        return Promise.reject(createInvalidStateError());\n      }\n\n      this._state = 'running';\n      return startRendering(this.destination, this._nativeOfflineAudioContext).then(audioBuffer => {\n        this._state = null;\n        /*\n         * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n         * deleteAudioGraph(this, this._nativeOfflineAudioContext);\n         */\n\n        return audioBuffer;\n      }) // @todo This could be written more elegantly when Promise.finally() becomes avalaible.\n      .catch(err => {\n        this._state = null;\n        /*\n         * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n         * deleteAudioGraph(this, this._nativeOfflineAudioContext);\n         */\n\n        throw err;\n      });\n    }\n\n    _waitForThePromiseToSettle(event) {\n      if (this._state === null) {\n        this._nativeOfflineAudioContext.dispatchEvent(event);\n      } else {\n        setTimeout(() => this._waitForThePromiseToSettle(event));\n      }\n    }\n\n  };\n};","export const createMonitorConnections = (insertElementInSet, isNativeAudioNode) => {\n  return (nativeAudioNode, whenConnected, whenDisconnected) => {\n    const connections = new Set();\n\n    nativeAudioNode.connect = (connect => {\n      return (destination, output = 0, input = 0) => {\n        const wasDisconnected = connections.size === 0;\n\n        if (isNativeAudioNode(destination)) {\n          // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n          connect.call(nativeAudioNode, destination, output, input);\n          insertElementInSet(connections, [destination, output, input], connection => connection[0] === destination && connection[1] === output && connection[2] === input, true);\n\n          if (wasDisconnected) {\n            whenConnected();\n          }\n\n          return destination;\n        }\n\n        connect.call(nativeAudioNode, destination, output);\n        insertElementInSet(connections, [destination, output], connection => connection[0] === destination && connection[1] === output, true);\n\n        if (wasDisconnected) {\n          whenConnected();\n        }\n\n        return;\n      };\n    })(nativeAudioNode.connect);\n\n    nativeAudioNode.disconnect = (disconnect => {\n      return (destinationOrOutput, output, input) => {\n        const wasConnected = connections.size > 0;\n\n        if (destinationOrOutput === undefined) {\n          disconnect.apply(nativeAudioNode);\n          connections.clear();\n        } else if (typeof destinationOrOutput === 'number') {\n          // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.\n          disconnect.call(nativeAudioNode, destinationOrOutput);\n\n          for (const connection of connections) {\n            if (connection[1] === destinationOrOutput) {\n              connections.delete(connection);\n            }\n          }\n        } else {\n          if (isNativeAudioNode(destinationOrOutput)) {\n            // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n            disconnect.call(nativeAudioNode, destinationOrOutput, output, input);\n          } else {\n            // @todo TypeScript cannot infer the overloaded signature with 2 arguments yet.\n            disconnect.call(nativeAudioNode, destinationOrOutput, output);\n          }\n\n          for (const connection of connections) {\n            if (connection[0] === destinationOrOutput && (output === undefined || connection[1] === output) && (input === undefined || connection[2] === input)) {\n              connections.delete(connection);\n            }\n          }\n        }\n\n        const isDisconnected = connections.size === 0;\n\n        if (wasConnected && isDisconnected) {\n          whenDisconnected();\n        }\n      };\n    })(nativeAudioNode.disconnect);\n\n    return nativeAudioNode;\n  };\n};","export const createNativeAudioBufferConstructor = window => {\n  if (window === null) {\n    return null;\n  }\n\n  if (window.hasOwnProperty('AudioBuffer')) {\n    return window.AudioBuffer;\n  }\n\n  return null;\n};","export const createNativeAudioContextConstructor = window => {\n  if (window === null) {\n    return null;\n  }\n\n  if (window.hasOwnProperty('AudioContext')) {\n    return window.AudioContext;\n  }\n\n  return window.hasOwnProperty('webkitAudioContext') ? window.webkitAudioContext : null;\n};","export const createNativeAudioDestinationNodeFactory = (createNativeGainNode, overwriteAccessors) => {\n  return (nativeContext, channelCount, isNodeOfNativeOfflineAudioContext) => {\n    const nativeAudioDestinationNode = nativeContext.destination; // Bug #132: Edge & Safari do not have the correct channelCount.\n\n    if (nativeAudioDestinationNode.channelCount !== channelCount) {\n      try {\n        nativeAudioDestinationNode.channelCount = channelCount;\n      } catch {// Bug #169: Safari throws an error on each attempt to change the channelCount.\n      }\n    } // Bug #83: Edge & Safari do not have the correct channelCountMode.\n\n\n    if (isNodeOfNativeOfflineAudioContext && nativeAudioDestinationNode.channelCountMode !== 'explicit') {\n      nativeAudioDestinationNode.channelCountMode = 'explicit';\n    } // Bug #47: The AudioDestinationNode in Edge and Safari does not initialize the maxChannelCount property correctly.\n\n\n    if (nativeAudioDestinationNode.maxChannelCount === 0) {\n      Object.defineProperty(nativeAudioDestinationNode, 'maxChannelCount', {\n        value: channelCount\n      });\n    } // Bug #168: No browser does yet have an AudioDestinationNode with an output.\n\n\n    const gainNode = createNativeGainNode(nativeContext, {\n      channelCount,\n      channelCountMode: nativeAudioDestinationNode.channelCountMode,\n      channelInterpretation: nativeAudioDestinationNode.channelInterpretation,\n      gain: 1\n    });\n    overwriteAccessors(gainNode, 'channelCount', get => () => get.call(gainNode), set => value => {\n      set.call(gainNode, value);\n\n      try {\n        nativeAudioDestinationNode.channelCount = value;\n      } catch (err) {\n        // Bug #169: Safari throws an error on each attempt to change the channelCount.\n        if (value > nativeAudioDestinationNode.maxChannelCount) {\n          throw err;\n        }\n      }\n    });\n    overwriteAccessors(gainNode, 'channelCountMode', get => () => get.call(gainNode), set => value => {\n      set.call(gainNode, value);\n      nativeAudioDestinationNode.channelCountMode = value;\n    });\n    overwriteAccessors(gainNode, 'channelInterpretation', get => () => get.call(gainNode), set => value => {\n      set.call(gainNode, value);\n      nativeAudioDestinationNode.channelInterpretation = value;\n    });\n    Object.defineProperty(gainNode, 'maxChannelCount', {\n      get: () => nativeAudioDestinationNode.maxChannelCount\n    }); // @todo This should be disconnected when the context is closed.\n\n    gainNode.connect(nativeAudioDestinationNode);\n    return gainNode;\n  };\n};","export const createNativeAudioNodeFactory = getBackupNativeContext => {\n  return (nativeContext, factoryFunction) => {\n    // Bug #50: Only Edge does currently not allow to create AudioNodes on a closed context yet.\n    const backupNativeContext = getBackupNativeContext(nativeContext);\n\n    if (backupNativeContext !== null) {\n      return factoryFunction(backupNativeContext);\n    }\n\n    return factoryFunction(nativeContext);\n  };\n};","export const createNativeAudioWorkletNodeConstructor = window => {\n  if (window === null) {\n    return null;\n  }\n\n  return window.hasOwnProperty('AudioWorkletNode') ? window.AudioWorkletNode : null;\n};","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeBiquadFilterNodeFactory = createNativeAudioNode => {\n  return (nativeContext, options) => {\n    const nativeBiquadFilterNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createBiquadFilter());\n    assignNativeAudioNodeOptions(nativeBiquadFilterNode, options);\n    assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'Q');\n    assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'detune');\n    assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'frequency');\n    assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'gain');\n    assignNativeAudioNodeOption(nativeBiquadFilterNode, options, 'type');\n    return nativeBiquadFilterNode;\n  };\n};","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeChannelMergerNodeFactory = (createNativeAudioNode, wrapChannelMergerNode) => {\n  return (nativeContext, options) => {\n    const nativeChannelMergerNode = createNativeAudioNode(nativeContext, ntvCntxt => {\n      return ntvCntxt.createChannelMerger(options.numberOfInputs);\n    }); // Bug #15: Safari does not return the default properties.\n\n    if (nativeChannelMergerNode.channelCount !== 1 && nativeChannelMergerNode.channelCountMode !== 'explicit') {\n      wrapChannelMergerNode(nativeContext, nativeChannelMergerNode);\n    }\n\n    assignNativeAudioNodeOptions(nativeChannelMergerNode, options);\n    return nativeChannelMergerNode;\n  };\n};","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeConstantSourceNodeFactory = (addSilentConnection, cacheTestResult, createNativeAudioNode, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport) => {\n  return (nativeContext, options) => {\n    // Bug #62: Edge & Safari do not support ConstantSourceNodes.\n    if (nativeContext.createConstantSource === undefined) {\n      return createNativeConstantSourceNodeFaker(nativeContext, options);\n    }\n\n    const nativeConstantSourceNode = createNativeAudioNode(nativeContext, ntvCntxt => {\n      return ntvCntxt.createConstantSource();\n    });\n    assignNativeAudioNodeOptions(nativeConstantSourceNode, options);\n    assignNativeAudioNodeAudioParamValue(nativeConstantSourceNode, options, 'offset'); // Bug #44: Only Chrome, Firefox & Opera throw a RangeError yet.\n\n    if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n      wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeConstantSourceNode);\n    } // Bug #44: Only Firefox does not throw a RangeError yet.\n\n\n    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n      wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeConstantSourceNode);\n    } // Bug #175: Safari will not fire an ended event if the ConstantSourceNode is unconnected.\n\n\n    addSilentConnection(nativeContext, nativeConstantSourceNode);\n    return nativeConstantSourceNode;\n  };\n};","import { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeConstantSourceNodeFakerFactory = (addSilentConnection, createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections) => {\n  return (nativeContext, {\n    offset,\n    ...audioNodeOptions\n  }) => {\n    const audioBuffer = nativeContext.createBuffer(1, 2, nativeContext.sampleRate);\n    const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext);\n    const gainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions,\n      gain: offset\n    }); // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n\n    const channelData = audioBuffer.getChannelData(0); // Bug #95: Safari does not play or loop one sample buffers.\n\n    channelData[0] = 1;\n    channelData[1] = 1;\n    audioBufferSourceNode.buffer = audioBuffer;\n    audioBufferSourceNode.loop = true;\n    const nativeConstantSourceNodeFaker = {\n      get bufferSize() {\n        return undefined;\n      },\n\n      get channelCount() {\n        return gainNode.channelCount;\n      },\n\n      set channelCount(value) {\n        gainNode.channelCount = value;\n      },\n\n      get channelCountMode() {\n        return gainNode.channelCountMode;\n      },\n\n      set channelCountMode(value) {\n        gainNode.channelCountMode = value;\n      },\n\n      get channelInterpretation() {\n        return gainNode.channelInterpretation;\n      },\n\n      set channelInterpretation(value) {\n        gainNode.channelInterpretation = value;\n      },\n\n      get context() {\n        return gainNode.context;\n      },\n\n      get inputs() {\n        return [];\n      },\n\n      get numberOfInputs() {\n        return audioBufferSourceNode.numberOfInputs;\n      },\n\n      get numberOfOutputs() {\n        return gainNode.numberOfOutputs;\n      },\n\n      get offset() {\n        return gainNode.gain;\n      },\n\n      get onended() {\n        return audioBufferSourceNode.onended;\n      },\n\n      set onended(value) {\n        audioBufferSourceNode.onended = value;\n      },\n\n      addEventListener(...args) {\n        return audioBufferSourceNode.addEventListener(args[0], args[1], args[2]);\n      },\n\n      dispatchEvent(...args) {\n        return audioBufferSourceNode.dispatchEvent(args[0]);\n      },\n\n      removeEventListener(...args) {\n        return audioBufferSourceNode.removeEventListener(args[0], args[1], args[2]);\n      },\n\n      start(when = 0) {\n        audioBufferSourceNode.start.call(audioBufferSourceNode, when);\n      },\n\n      stop(when = 0) {\n        audioBufferSourceNode.stop.call(audioBufferSourceNode, when);\n      }\n\n    };\n\n    const whenConnected = () => audioBufferSourceNode.connect(gainNode);\n\n    const whenDisconnected = () => audioBufferSourceNode.disconnect(gainNode); // Bug #175: Safari will not fire an ended event if the AudioBufferSourceNode is unconnected.\n\n\n    addSilentConnection(nativeContext, audioBufferSourceNode);\n    return monitorConnections(interceptConnections(nativeConstantSourceNodeFaker, gainNode), whenConnected, whenDisconnected);\n  };\n};","import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeConvolverNodeFactory = (createNativeAudioNode, createNativeConvolverNodeFaker, createNotSupportedError, overwriteAccessors) => {\n  return (nativeContext, options) => {\n    const nativeConvolverNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createConvolver());\n\n    try {\n      // Bug #166: Opera does not allow yet to set the channelCount to 1.\n      nativeConvolverNode.channelCount = 1;\n    } catch (err) {\n      return createNativeConvolverNodeFaker(nativeContext, options);\n    }\n\n    assignNativeAudioNodeOptions(nativeConvolverNode, options); // The normalize property needs to be set before setting the buffer.\n\n    if (options.disableNormalization === nativeConvolverNode.normalize) {\n      nativeConvolverNode.normalize = !options.disableNormalization;\n    }\n\n    assignNativeAudioNodeOption(nativeConvolverNode, options, 'buffer'); // Bug #113: Edge & Safari allow to set the channelCount to a value larger than 2.\n\n    if (options.channelCount > 2) {\n      throw createNotSupportedError();\n    }\n\n    overwriteAccessors(nativeConvolverNode, 'channelCount', get => () => get.call(nativeConvolverNode), set => value => {\n      if (value > 2) {\n        throw createNotSupportedError();\n      }\n\n      return set.call(nativeConvolverNode, value);\n    }); // Bug #114: Edge & Safari allow to set the channelCountMode to 'max'.\n\n    if (options.channelCountMode === 'max') {\n      throw createNotSupportedError();\n    }\n\n    overwriteAccessors(nativeConvolverNode, 'channelCountMode', get => () => get.call(nativeConvolverNode), set => value => {\n      if (value === 'max') {\n        throw createNotSupportedError();\n      }\n\n      return set.call(nativeConvolverNode, value);\n    });\n    return nativeConvolverNode;\n  };\n};","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeConvolverNodeFakerFactory = (createNativeAudioNode, createNativeGainNode, monitorConnections) => {\n  return (nativeContext, {\n    buffer,\n    channelCount,\n    channelCountMode,\n    channelInterpretation,\n    disableNormalization\n  }) => {\n    const convolverNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createConvolver());\n    assignNativeAudioNodeOptions(convolverNode, {\n      // Bug #166: Opera does not allow yet to set the channelCount to 1.\n      channelCount: Math.max(channelCount, 2),\n      // Bug #167: Opera does not allow yet to set the channelCountMode to 'explicit'.\n      channelCountMode: channelCountMode === 'max' ? channelCountMode : 'clamped-max',\n      channelInterpretation\n    });\n    const gainNode = createNativeGainNode(nativeContext, {\n      channelCount,\n      channelCountMode,\n      channelInterpretation,\n      gain: 1\n    });\n    const nativeConvolverNodeFaker = {\n      get buffer() {\n        return convolverNode.buffer;\n      },\n\n      set buffer(value) {\n        convolverNode.buffer = value;\n      },\n\n      get bufferSize() {\n        return undefined;\n      },\n\n      get channelCount() {\n        return gainNode.channelCount;\n      },\n\n      set channelCount(value) {\n        // Bug #166: Opera does not allow yet to set the channelCount to 1.\n        if (value > 2) {\n          convolverNode.channelCount = value;\n        }\n\n        gainNode.channelCount = value;\n      },\n\n      get channelCountMode() {\n        return gainNode.channelCountMode;\n      },\n\n      set channelCountMode(value) {\n        // Bug #167: Opera does not allow yet to set the channelCountMode to 'explicit'.\n        if (value === 'max') {\n          convolverNode.channelCountMode = value;\n        }\n\n        gainNode.channelCountMode = value;\n      },\n\n      get channelInterpretation() {\n        return convolverNode.channelInterpretation;\n      },\n\n      set channelInterpretation(value) {\n        convolverNode.channelInterpretation = value;\n        gainNode.channelInterpretation = value;\n      },\n\n      get context() {\n        return convolverNode.context;\n      },\n\n      get inputs() {\n        return [convolverNode];\n      },\n\n      get numberOfInputs() {\n        return convolverNode.numberOfInputs;\n      },\n\n      get numberOfOutputs() {\n        return convolverNode.numberOfOutputs;\n      },\n\n      get normalize() {\n        return convolverNode.normalize;\n      },\n\n      set normalize(value) {\n        convolverNode.normalize = value;\n      },\n\n      addEventListener(...args) {\n        return convolverNode.addEventListener(args[0], args[1], args[2]);\n      },\n\n      dispatchEvent(...args) {\n        return convolverNode.dispatchEvent(args[0]);\n      },\n\n      removeEventListener(...args) {\n        return convolverNode.removeEventListener(args[0], args[1], args[2]);\n      }\n\n    }; // The normalize property needs to be set before setting the buffer.\n\n    if (disableNormalization === nativeConvolverNodeFaker.normalize) {\n      nativeConvolverNodeFaker.normalize = !disableNormalization;\n    }\n\n    if (buffer !== nativeConvolverNodeFaker.buffer) {\n      nativeConvolverNodeFaker.buffer = buffer;\n    }\n\n    const whenConnected = () => convolverNode.connect(gainNode);\n\n    const whenDisconnected = () => convolverNode.disconnect(gainNode);\n\n    return monitorConnections(interceptConnections(nativeConvolverNodeFaker, gainNode), whenConnected, whenDisconnected);\n  };\n};","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeDelayNodeFactory = createNativeAudioNode => {\n  return (nativeContext, options) => {\n    const nativeDelayNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createDelay(options.maxDelayTime));\n    assignNativeAudioNodeOptions(nativeDelayNode, options);\n    assignNativeAudioNodeAudioParamValue(nativeDelayNode, options, 'delayTime');\n    return nativeDelayNode;\n  };\n};","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeDynamicsCompressorNodeFactory = (createNativeAudioNode, createNotSupportedError) => {\n  return (nativeContext, options) => {\n    const nativeDynamicsCompressorNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createDynamicsCompressor());\n    assignNativeAudioNodeOptions(nativeDynamicsCompressorNode, options); // Bug #108: Only Chrome, Firefox and Opera disallow a channelCount of three and above yet.\n\n    if (options.channelCount > 2) {\n      throw createNotSupportedError();\n    } // Bug #109: Only Chrome, Firefox and Opera disallow a channelCountMode of 'max'.\n\n\n    if (options.channelCountMode === 'max') {\n      throw createNotSupportedError();\n    }\n\n    assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'attack');\n    assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'knee');\n    assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'ratio');\n    assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'release');\n    assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'threshold');\n    return nativeDynamicsCompressorNode;\n  };\n};","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeGainNodeFactory = createNativeAudioNode => {\n  return (nativeContext, options) => {\n    const nativeGainNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createGain());\n    assignNativeAudioNodeOptions(nativeGainNode, options);\n    assignNativeAudioNodeAudioParamValue(nativeGainNode, options, 'gain');\n    return nativeGainNode;\n  };\n};","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeIIRFilterNodeFactory = (createNativeAudioNode, createNativeIIRFilterNodeFaker) => {\n  return (nativeContext, baseLatency, options) => {\n    // Bug #9: Safari does not support IIRFilterNodes.\n    if (nativeContext.createIIRFilter === undefined) {\n      return createNativeIIRFilterNodeFaker(nativeContext, baseLatency, options);\n    }\n\n    const nativeIIRFilterNode = createNativeAudioNode(nativeContext, ntvCntxt => {\n      return ntvCntxt.createIIRFilter(options.feedforward, options.feedback);\n    });\n    assignNativeAudioNodeOptions(nativeIIRFilterNode, options);\n    return nativeIIRFilterNode;\n  };\n};","import { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { filterBuffer } from '../helpers/filter-buffer';\nimport { interceptConnections } from '../helpers/intercept-connections';\n\nfunction divide(a, b) {\n  const denominator = b[0] * b[0] + b[1] * b[1];\n  return [(a[0] * b[0] + a[1] * b[1]) / denominator, (a[1] * b[0] - a[0] * b[1]) / denominator];\n}\n\nfunction multiply(a, b) {\n  return [a[0] * b[0] - a[1] * b[1], a[0] * b[1] + a[1] * b[0]];\n}\n\nfunction evaluatePolynomial(coefficient, z) {\n  let result = [0, 0];\n\n  for (let i = coefficient.length - 1; i >= 0; i -= 1) {\n    result = multiply(result, z);\n    result[0] += coefficient[i];\n  }\n\n  return result;\n}\n\nexport const createNativeIIRFilterNodeFakerFactory = (createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError) => {\n  return (nativeContext, baseLatency, {\n    channelCount,\n    channelCountMode,\n    channelInterpretation,\n    feedback,\n    feedforward\n  }) => {\n    const bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n    const feedbackLength = feedback.length;\n    const feedforwardLength = feedforward.length;\n    const minLength = Math.min(feedbackLength, feedforwardLength);\n\n    if (feedback.length === 0 || feedback.length > 20) {\n      throw createNotSupportedError();\n    }\n\n    if (feedback[0] === 0) {\n      throw createInvalidStateError();\n    }\n\n    if (feedforward.length === 0 || feedforward.length > 20) {\n      throw createNotSupportedError();\n    }\n\n    if (feedforward[0] === 0) {\n      throw createInvalidStateError();\n    }\n\n    if (feedback[0] !== 1) {\n      for (let i = 0; i < feedforwardLength; i += 1) {\n        feedforward[i] /= feedback[0];\n      }\n\n      for (let i = 1; i < feedbackLength; i += 1) {\n        feedback[i] /= feedback[0];\n      }\n    }\n\n    const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, channelCount, channelCount);\n    scriptProcessorNode.channelCount = channelCount;\n    scriptProcessorNode.channelCountMode = channelCountMode;\n    scriptProcessorNode.channelInterpretation = channelInterpretation;\n    const bufferLength = 32;\n    const bufferIndexes = [];\n    const xBuffers = [];\n    const yBuffers = [];\n\n    for (let i = 0; i < channelCount; i += 1) {\n      bufferIndexes.push(0);\n      const xBuffer = new Float32Array(bufferLength);\n      const yBuffer = new Float32Array(bufferLength);\n      xBuffer.fill(0);\n      yBuffer.fill(0);\n      xBuffers.push(xBuffer);\n      yBuffers.push(yBuffer);\n    }\n\n    scriptProcessorNode.onaudioprocess = event => {\n      const inputBuffer = event.inputBuffer;\n      const outputBuffer = event.outputBuffer;\n      const numberOfChannels = inputBuffer.numberOfChannels;\n\n      for (let i = 0; i < numberOfChannels; i += 1) {\n        const input = inputBuffer.getChannelData(i);\n        const output = outputBuffer.getChannelData(i);\n        bufferIndexes[i] = filterBuffer(feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffers[i], yBuffers[i], bufferIndexes[i], bufferLength, input, output);\n      }\n    };\n\n    const nyquist = nativeContext.sampleRate / 2;\n    const nativeIIRFilterNodeFaker = {\n      get bufferSize() {\n        return bufferSize;\n      },\n\n      get channelCount() {\n        return scriptProcessorNode.channelCount;\n      },\n\n      set channelCount(value) {\n        scriptProcessorNode.channelCount = value;\n      },\n\n      get channelCountMode() {\n        return scriptProcessorNode.channelCountMode;\n      },\n\n      set channelCountMode(value) {\n        scriptProcessorNode.channelCountMode = value;\n      },\n\n      get channelInterpretation() {\n        return scriptProcessorNode.channelInterpretation;\n      },\n\n      set channelInterpretation(value) {\n        scriptProcessorNode.channelInterpretation = value;\n      },\n\n      get context() {\n        return scriptProcessorNode.context;\n      },\n\n      get inputs() {\n        return [scriptProcessorNode];\n      },\n\n      get numberOfInputs() {\n        return scriptProcessorNode.numberOfInputs;\n      },\n\n      get numberOfOutputs() {\n        return scriptProcessorNode.numberOfOutputs;\n      },\n\n      addEventListener(...args) {\n        // @todo Dissallow adding an audioprocess listener.\n        return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);\n      },\n\n      dispatchEvent(...args) {\n        return scriptProcessorNode.dispatchEvent(args[0]);\n      },\n\n      getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n        if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n          throw createInvalidAccessError();\n        }\n\n        const length = frequencyHz.length;\n\n        for (let i = 0; i < length; i += 1) {\n          const omega = -Math.PI * (frequencyHz[i] / nyquist);\n          const z = [Math.cos(omega), Math.sin(omega)];\n          const numerator = evaluatePolynomial(feedforward, z);\n          const denominator = evaluatePolynomial(feedback, z);\n          const response = divide(numerator, denominator);\n          magResponse[i] = Math.sqrt(response[0] * response[0] + response[1] * response[1]);\n          phaseResponse[i] = Math.atan2(response[1], response[0]);\n        }\n      },\n\n      removeEventListener(...args) {\n        return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);\n      }\n\n    };\n    return interceptConnections(nativeIIRFilterNodeFaker, scriptProcessorNode);\n  };\n};","export const createNativeMediaElementAudioSourceNodeFactory = createNativeAudioNode => {\n  return (nativeAudioContext, options) => createNativeAudioNode(nativeAudioContext, ntvDCntxt => {\n    return ntvDCntxt.createMediaElementSource(options.mediaElement);\n  });\n};","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeMediaStreamAudioDestinationNodeFactory = (createNativeAudioNode, createNotSupportedError) => {\n  return (nativeAudioContext, options) => {\n    // Bug #64: Edge does not support MediaStreamAudioDestinationNodes.\n    if (nativeAudioContext.createMediaStreamDestination === undefined) {\n      throw createNotSupportedError();\n    }\n\n    const nativeMediaStreamAudioDestinationNode = createNativeAudioNode(nativeAudioContext, ntvDCntxt => {\n      return ntvDCntxt.createMediaStreamDestination();\n    });\n    assignNativeAudioNodeOptions(nativeMediaStreamAudioDestinationNode, options); // Bug #174: Safari does expose a wrong numberOfOutputs.\n\n    if (nativeMediaStreamAudioDestinationNode.numberOfOutputs === 1) {\n      Object.defineProperty(nativeMediaStreamAudioDestinationNode, 'numberOfOutputs', {\n        get: () => 0\n      });\n    }\n\n    return nativeMediaStreamAudioDestinationNode;\n  };\n};","export const createNativeMediaStreamAudioSourceNodeFactory = createNativeAudioNode => {\n  return (nativeAudioContext, {\n    mediaStream\n  }) => {\n    const audioStreamTracks = mediaStream.getAudioTracks();\n    const nativeMediaStreamAudioSourceNode = createNativeAudioNode(nativeAudioContext, ntvDCntxt => {\n      /*\n       * Bug #151: Safari does not use the audio track as input anymore if it gets removed from the mediaStream after construction.\n       * Bug #159: Safari picks the first audio track if the MediaStream has more than one audio track.\n       */\n      const filteredAudioStreamTracks = audioStreamTracks.sort((a, b) => a.id < b.id ? -1 : a.id > b.id ? 1 : 0).slice(0, 1);\n      return ntvDCntxt.createMediaStreamSource(new MediaStream(filteredAudioStreamTracks));\n    }); // Bug #63: Edge does not expose the mediaStream yet.\n\n    Object.defineProperty(nativeMediaStreamAudioSourceNode, 'mediaStream', {\n      value: mediaStream\n    });\n    return nativeMediaStreamAudioSourceNode;\n  };\n};","export const createNativeMediaStreamTrackAudioSourceNodeFactory = (createInvalidStateError, createNativeAudioNode, isNativeOfflineAudioContext) => {\n  return (nativeAudioContext, {\n    mediaStreamTrack\n  }) => {\n    if (typeof nativeAudioContext.createMediaStreamTrackSource === 'function') {\n      return createNativeAudioNode(nativeAudioContext, ntvDCntxt => ntvDCntxt.createMediaStreamTrackSource(mediaStreamTrack));\n    } // Bug #121: Only Firefox does yet support the MediaStreamTrackAudioSourceNode.\n\n\n    return createNativeAudioNode(nativeAudioContext, ntvDCntxt => {\n      const mediaStream = new MediaStream([mediaStreamTrack]);\n      const nativeMediaStreamAudioSourceNode = ntvDCntxt.createMediaStreamSource(mediaStream); // Bug #120: Firefox does not throw an error if the mediaStream has no audio track.\n\n      if (mediaStreamTrack.kind !== 'audio') {\n        throw createInvalidStateError();\n      } // Bug #172: Safari allows to create a MediaStreamAudioSourceNode with an OfflineAudioContext.\n\n\n      if (isNativeOfflineAudioContext(ntvDCntxt)) {\n        throw new TypeError();\n      }\n\n      return nativeMediaStreamAudioSourceNode;\n    });\n  };\n};","export const createNativeOfflineAudioContextConstructor = window => {\n  if (window === null) {\n    return null;\n  }\n\n  if (window.hasOwnProperty('OfflineAudioContext')) {\n    return window.OfflineAudioContext;\n  }\n\n  return window.hasOwnProperty('webkitOfflineAudioContext') ? window.webkitOfflineAudioContext : null;\n};","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeOscillatorNodeFactory = (addSilentConnection, cacheTestResult, createNativeAudioNode, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) => {\n  return (nativeContext, options) => {\n    const nativeOscillatorNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createOscillator());\n    assignNativeAudioNodeOptions(nativeOscillatorNode, options);\n    assignNativeAudioNodeAudioParamValue(nativeOscillatorNode, options, 'detune');\n    assignNativeAudioNodeAudioParamValue(nativeOscillatorNode, options, 'frequency');\n\n    if (options.periodicWave !== undefined) {\n      nativeOscillatorNode.setPeriodicWave(options.periodicWave);\n    } else {\n      assignNativeAudioNodeOption(nativeOscillatorNode, options, 'type');\n    } // Bug #44: Only Chrome & Opera throw a RangeError yet.\n\n\n    if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n      wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeOscillatorNode);\n    } // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.\n\n\n    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () => testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext))) {\n      wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeOscillatorNode, nativeContext);\n    } // Bug #44: Only Firefox does not throw a RangeError yet.\n\n\n    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n      wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeOscillatorNode);\n    } // Bug #175: Safari will not fire an ended event if the OscillatorNode is unconnected.\n\n\n    addSilentConnection(nativeContext, nativeOscillatorNode);\n    return nativeOscillatorNode;\n  };\n};","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativePannerNodeFactory = (createNativeAudioNode, createNativePannerNodeFaker) => {\n  return (nativeContext, options) => {\n    const nativePannerNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createPanner()); // Bug #124: Edge & Safari do not support modifying the orientation and the position with AudioParams.\n\n    if (nativePannerNode.orientationX === undefined) {\n      return createNativePannerNodeFaker(nativeContext, options);\n    }\n\n    assignNativeAudioNodeOptions(nativePannerNode, options);\n    assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'orientationX');\n    assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'orientationY');\n    assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'orientationZ');\n    assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'positionX');\n    assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'positionY');\n    assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'positionZ');\n    assignNativeAudioNodeOption(nativePannerNode, options, 'coneInnerAngle');\n    assignNativeAudioNodeOption(nativePannerNode, options, 'coneOuterAngle');\n    assignNativeAudioNodeOption(nativePannerNode, options, 'coneOuterGain');\n    assignNativeAudioNodeOption(nativePannerNode, options, 'distanceModel');\n    assignNativeAudioNodeOption(nativePannerNode, options, 'maxDistance');\n    assignNativeAudioNodeOption(nativePannerNode, options, 'panningModel');\n    assignNativeAudioNodeOption(nativePannerNode, options, 'refDistance');\n    assignNativeAudioNodeOption(nativePannerNode, options, 'rolloffFactor');\n    return nativePannerNode;\n  };\n};","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativePannerNodeFakerFactory = (connectNativeAudioNodeToNativeAudioNode, createInvalidStateError, createNativeAudioNode, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError, disconnectNativeAudioNodeFromNativeAudioNode, monitorConnections) => {\n  return (nativeContext, {\n    coneInnerAngle,\n    coneOuterAngle,\n    coneOuterGain,\n    distanceModel,\n    maxDistance,\n    orientationX,\n    orientationY,\n    orientationZ,\n    panningModel,\n    positionX,\n    positionY,\n    positionZ,\n    refDistance,\n    rolloffFactor,\n    ...audioNodeOptions\n  }) => {\n    const pannerNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createPanner()); // Bug #125: Safari does not throw an error yet.\n\n    if (audioNodeOptions.channelCount > 2) {\n      throw createNotSupportedError();\n    } // Bug #126: Safari does not throw an error yet.\n\n\n    if (audioNodeOptions.channelCountMode === 'max') {\n      throw createNotSupportedError();\n    }\n\n    assignNativeAudioNodeOptions(pannerNode, audioNodeOptions);\n    const SINGLE_CHANNEL_OPTIONS = {\n      channelCount: 1,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete'\n    };\n    const channelMergerNode = createNativeChannelMergerNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      channelInterpretation: 'speakers',\n      numberOfInputs: 6\n    });\n    const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions,\n      gain: 1\n    });\n    const orientationXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      gain: 1\n    });\n    const orientationYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    const orientationZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    const positionXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    const positionYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    const positionZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 6, 1);\n    const waveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      curve: new Float32Array([1, 1]),\n      oversample: 'none'\n    });\n    let lastOrientation = [orientationX, orientationY, orientationZ];\n    let lastPosition = [positionX, positionY, positionZ];\n\n    scriptProcessorNode.onaudioprocess = ({\n      inputBuffer\n    }) => {\n      const orientation = [inputBuffer.getChannelData(0)[0], inputBuffer.getChannelData(1)[0], inputBuffer.getChannelData(2)[0]];\n\n      if (orientation.some((value, index) => value !== lastOrientation[index])) {\n        pannerNode.setOrientation(...orientation); // tslint:disable-line:deprecation\n\n        lastOrientation = orientation;\n      }\n\n      const positon = [inputBuffer.getChannelData(3)[0], inputBuffer.getChannelData(4)[0], inputBuffer.getChannelData(5)[0]];\n\n      if (positon.some((value, index) => value !== lastPosition[index])) {\n        pannerNode.setPosition(...positon); // tslint:disable-line:deprecation\n\n        lastPosition = positon;\n      }\n    };\n\n    Object.defineProperty(orientationYGainNode.gain, 'defaultValue', {\n      get: () => 0\n    });\n    Object.defineProperty(orientationZGainNode.gain, 'defaultValue', {\n      get: () => 0\n    });\n    Object.defineProperty(positionXGainNode.gain, 'defaultValue', {\n      get: () => 0\n    });\n    Object.defineProperty(positionYGainNode.gain, 'defaultValue', {\n      get: () => 0\n    });\n    Object.defineProperty(positionZGainNode.gain, 'defaultValue', {\n      get: () => 0\n    });\n    const nativePannerNodeFaker = {\n      get bufferSize() {\n        return undefined;\n      },\n\n      get channelCount() {\n        return pannerNode.channelCount;\n      },\n\n      set channelCount(value) {\n        // Bug #125: Safari does not throw an error yet.\n        if (value > 2) {\n          throw createNotSupportedError();\n        }\n\n        inputGainNode.channelCount = value;\n        pannerNode.channelCount = value;\n      },\n\n      get channelCountMode() {\n        return pannerNode.channelCountMode;\n      },\n\n      set channelCountMode(value) {\n        // Bug #126: Safari does not throw an error yet.\n        if (value === 'max') {\n          throw createNotSupportedError();\n        }\n\n        inputGainNode.channelCountMode = value;\n        pannerNode.channelCountMode = value;\n      },\n\n      get channelInterpretation() {\n        return pannerNode.channelInterpretation;\n      },\n\n      set channelInterpretation(value) {\n        inputGainNode.channelInterpretation = value;\n        pannerNode.channelInterpretation = value;\n      },\n\n      get coneInnerAngle() {\n        return pannerNode.coneInnerAngle;\n      },\n\n      set coneInnerAngle(value) {\n        pannerNode.coneInnerAngle = value;\n      },\n\n      get coneOuterAngle() {\n        return pannerNode.coneOuterAngle;\n      },\n\n      set coneOuterAngle(value) {\n        pannerNode.coneOuterAngle = value;\n      },\n\n      get coneOuterGain() {\n        return pannerNode.coneOuterGain;\n      },\n\n      set coneOuterGain(value) {\n        // Bug #127: Edge & Safari do not throw an InvalidStateError yet.\n        if (value < 0 || value > 1) {\n          throw createInvalidStateError();\n        }\n\n        pannerNode.coneOuterGain = value;\n      },\n\n      get context() {\n        return pannerNode.context;\n      },\n\n      get distanceModel() {\n        return pannerNode.distanceModel;\n      },\n\n      set distanceModel(value) {\n        pannerNode.distanceModel = value;\n      },\n\n      get inputs() {\n        return [inputGainNode];\n      },\n\n      get maxDistance() {\n        return pannerNode.maxDistance;\n      },\n\n      set maxDistance(value) {\n        // Bug #128: Edge & Safari do not throw an error yet.\n        if (value < 0) {\n          throw new RangeError();\n        }\n\n        pannerNode.maxDistance = value;\n      },\n\n      get numberOfInputs() {\n        return pannerNode.numberOfInputs;\n      },\n\n      get numberOfOutputs() {\n        return pannerNode.numberOfOutputs;\n      },\n\n      get orientationX() {\n        return orientationXGainNode.gain;\n      },\n\n      get orientationY() {\n        return orientationYGainNode.gain;\n      },\n\n      get orientationZ() {\n        return orientationZGainNode.gain;\n      },\n\n      get panningModel() {\n        return pannerNode.panningModel;\n      },\n\n      set panningModel(value) {\n        pannerNode.panningModel = value; // Bug #123: Edge does not support HRTF as panningModel.\n\n        if (pannerNode.panningModel !== value && value === 'HRTF') {\n          throw createNotSupportedError();\n        }\n      },\n\n      get positionX() {\n        return positionXGainNode.gain;\n      },\n\n      get positionY() {\n        return positionYGainNode.gain;\n      },\n\n      get positionZ() {\n        return positionZGainNode.gain;\n      },\n\n      get refDistance() {\n        return pannerNode.refDistance;\n      },\n\n      set refDistance(value) {\n        // Bug #129: Edge & Safari do not throw an error yet.\n        if (value < 0) {\n          throw new RangeError();\n        }\n\n        pannerNode.refDistance = value;\n      },\n\n      get rolloffFactor() {\n        return pannerNode.rolloffFactor;\n      },\n\n      set rolloffFactor(value) {\n        // Bug #130: Edge & Safari do not throw an error yet.\n        if (value < 0) {\n          throw new RangeError();\n        }\n\n        pannerNode.rolloffFactor = value;\n      },\n\n      addEventListener(...args) {\n        return inputGainNode.addEventListener(args[0], args[1], args[2]);\n      },\n\n      dispatchEvent(...args) {\n        return inputGainNode.dispatchEvent(args[0]);\n      },\n\n      removeEventListener(...args) {\n        return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n      }\n\n    };\n\n    if (coneInnerAngle !== nativePannerNodeFaker.coneInnerAngle) {\n      nativePannerNodeFaker.coneInnerAngle = coneInnerAngle;\n    }\n\n    if (coneOuterAngle !== nativePannerNodeFaker.coneOuterAngle) {\n      nativePannerNodeFaker.coneOuterAngle = coneOuterAngle;\n    }\n\n    if (coneOuterGain !== nativePannerNodeFaker.coneOuterGain) {\n      nativePannerNodeFaker.coneOuterGain = coneOuterGain;\n    }\n\n    if (distanceModel !== nativePannerNodeFaker.distanceModel) {\n      nativePannerNodeFaker.distanceModel = distanceModel;\n    }\n\n    if (maxDistance !== nativePannerNodeFaker.maxDistance) {\n      nativePannerNodeFaker.maxDistance = maxDistance;\n    }\n\n    if (orientationX !== nativePannerNodeFaker.orientationX.value) {\n      nativePannerNodeFaker.orientationX.value = orientationX;\n    }\n\n    if (orientationY !== nativePannerNodeFaker.orientationY.value) {\n      nativePannerNodeFaker.orientationY.value = orientationY;\n    }\n\n    if (orientationZ !== nativePannerNodeFaker.orientationZ.value) {\n      nativePannerNodeFaker.orientationZ.value = orientationZ;\n    }\n\n    if (panningModel !== nativePannerNodeFaker.panningModel) {\n      nativePannerNodeFaker.panningModel = panningModel;\n    }\n\n    if (positionX !== nativePannerNodeFaker.positionX.value) {\n      nativePannerNodeFaker.positionX.value = positionX;\n    }\n\n    if (positionY !== nativePannerNodeFaker.positionY.value) {\n      nativePannerNodeFaker.positionY.value = positionY;\n    }\n\n    if (positionZ !== nativePannerNodeFaker.positionZ.value) {\n      nativePannerNodeFaker.positionZ.value = positionZ;\n    }\n\n    if (refDistance !== nativePannerNodeFaker.refDistance) {\n      nativePannerNodeFaker.refDistance = refDistance;\n    }\n\n    if (rolloffFactor !== nativePannerNodeFaker.rolloffFactor) {\n      nativePannerNodeFaker.rolloffFactor = rolloffFactor;\n    }\n\n    if (lastOrientation[0] !== 1 || lastOrientation[1] !== 0 || lastOrientation[2] !== 0) {\n      pannerNode.setOrientation(...lastOrientation); // tslint:disable-line:deprecation\n    }\n\n    if (lastPosition[0] !== 0 || lastPosition[1] !== 0 || lastPosition[2] !== 0) {\n      pannerNode.setPosition(...lastPosition); // tslint:disable-line:deprecation\n    }\n\n    const whenConnected = () => {\n      inputGainNode.connect(pannerNode); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n      connectNativeAudioNodeToNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);\n      waveShaperNode.connect(orientationXGainNode).connect(channelMergerNode, 0, 0);\n      waveShaperNode.connect(orientationYGainNode).connect(channelMergerNode, 0, 1);\n      waveShaperNode.connect(orientationZGainNode).connect(channelMergerNode, 0, 2);\n      waveShaperNode.connect(positionXGainNode).connect(channelMergerNode, 0, 3);\n      waveShaperNode.connect(positionYGainNode).connect(channelMergerNode, 0, 4);\n      waveShaperNode.connect(positionZGainNode).connect(channelMergerNode, 0, 5);\n      channelMergerNode.connect(scriptProcessorNode).connect(nativeContext.destination);\n    };\n\n    const whenDisconnected = () => {\n      inputGainNode.disconnect(pannerNode); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n      disconnectNativeAudioNodeFromNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);\n      waveShaperNode.disconnect(orientationXGainNode);\n      orientationXGainNode.disconnect(channelMergerNode);\n      waveShaperNode.disconnect(orientationYGainNode);\n      orientationYGainNode.disconnect(channelMergerNode);\n      waveShaperNode.disconnect(orientationZGainNode);\n      orientationZGainNode.disconnect(channelMergerNode);\n      waveShaperNode.disconnect(positionXGainNode);\n      positionXGainNode.disconnect(channelMergerNode);\n      waveShaperNode.disconnect(positionYGainNode);\n      positionYGainNode.disconnect(channelMergerNode);\n      waveShaperNode.disconnect(positionZGainNode);\n      positionZGainNode.disconnect(channelMergerNode);\n      channelMergerNode.disconnect(scriptProcessorNode);\n      scriptProcessorNode.disconnect(nativeContext.destination);\n    };\n\n    return monitorConnections(interceptConnections(nativePannerNodeFaker, pannerNode), whenConnected, whenDisconnected);\n  };\n};","export const createNativePeriodicWaveFactory = getBackupNativeContext => {\n  return (nativeContext, {\n    disableNormalization,\n    imag,\n    real\n  }) => {\n    // Bug #50: Only Edge does currently not allow to create AudioNodes (and other objects) on a closed context yet.\n    const backupNativeContext = getBackupNativeContext(nativeContext); // @todo Edge, Firefox & Safari do only accept Float32Arrays.\n\n    const wrappedImag = new Float32Array(imag);\n    const wrappedReal = new Float32Array(real);\n\n    if (backupNativeContext !== null) {\n      return backupNativeContext.createPeriodicWave(wrappedReal, wrappedImag, {\n        disableNormalization\n      });\n    }\n\n    return nativeContext.createPeriodicWave(wrappedReal, wrappedImag, {\n      disableNormalization\n    });\n  };\n};","export const createNativeScriptProcessorNodeFactory = createNativeAudioNode => {\n  return (nativeContext, bufferSize, numberOfInputChannels, numberOfOutputChannels) => {\n    return createNativeAudioNode(nativeContext, ntvCntxt => {\n      return ntvCntxt.createScriptProcessor(bufferSize, numberOfInputChannels, numberOfOutputChannels);\n    });\n  };\n};","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeStereoPannerNodeFactory = (createNativeAudioNode, createNativeStereoPannerNodeFaker, createNotSupportedError) => {\n  return (nativeContext, options) => createNativeAudioNode(nativeContext, ntvCntxt => {\n    const channelCountMode = options.channelCountMode;\n    /*\n     * Bug #105: The channelCountMode of 'clamped-max' should be supported. However it is not possible to write a polyfill for Safari\n     * which supports it and therefore it can't be supported at all.\n     */\n\n    if (channelCountMode === 'clamped-max') {\n      throw createNotSupportedError();\n    } // Bug #105: Safari does not support the StereoPannerNode.\n\n\n    if (nativeContext.createStereoPanner === undefined) {\n      return createNativeStereoPannerNodeFaker(nativeContext, options);\n    }\n\n    const nativeStereoPannerNode = ntvCntxt.createStereoPanner();\n    assignNativeAudioNodeOptions(nativeStereoPannerNode, options);\n    assignNativeAudioNodeAudioParamValue(nativeStereoPannerNode, options, 'pan');\n    /*\n     * Bug #105: The channelCountMode of 'clamped-max' should be supported. However it is not possible to write a polyfill for Safari\n     * which supports it and therefore it can't be supported at all.\n     */\n\n    Object.defineProperty(nativeStereoPannerNode, 'channelCountMode', {\n      get: () => channelCountMode,\n      set: value => {\n        if (value !== channelCountMode) {\n          throw createNotSupportedError();\n        }\n      }\n    });\n    return nativeStereoPannerNode;\n  });\n};","import { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeStereoPannerNodeFakerFactory = (createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError, monitorConnections) => {\n  // The curve has a size of 14bit plus 1 value to have an exact representation for zero. This value has been determined experimentally.\n  const CURVE_SIZE = 16385;\n  const DC_CURVE = new Float32Array([1, 1]);\n  const HALF_PI = Math.PI / 2;\n  const SINGLE_CHANNEL_OPTIONS = {\n    channelCount: 1,\n    channelCountMode: 'explicit',\n    channelInterpretation: 'discrete'\n  };\n  const SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS = { ...SINGLE_CHANNEL_OPTIONS,\n    oversample: 'none'\n  };\n\n  const buildInternalGraphForMono = (nativeContext, inputGainNode, panGainNode, channelMergerNode) => {\n    const leftWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    const rightWaveShaperCurve = new Float32Array(CURVE_SIZE);\n\n    for (let i = 0; i < CURVE_SIZE; i += 1) {\n      const x = i / (CURVE_SIZE - 1) * HALF_PI;\n      leftWaveShaperCurve[i] = Math.cos(x);\n      rightWaveShaperCurve[i] = Math.sin(x);\n    }\n\n    const leftGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    }); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    const leftWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n      curve: leftWaveShaperCurve\n    }); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    const panWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n      curve: DC_CURVE\n    });\n    const rightGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    }); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    const rightWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n      curve: rightWaveShaperCurve\n    });\n    return {\n      connectGraph() {\n        inputGainNode.connect(leftGainNode);\n        inputGainNode.connect(panWaveShaperNode.inputs[0]);\n        inputGainNode.connect(rightGainNode);\n        panWaveShaperNode.connect(panGainNode);\n        panGainNode.connect(leftWaveShaperNode.inputs[0]);\n        panGainNode.connect(rightWaveShaperNode.inputs[0]);\n        leftWaveShaperNode.connect(leftGainNode.gain);\n        rightWaveShaperNode.connect(rightGainNode.gain);\n        leftGainNode.connect(channelMergerNode, 0, 0);\n        rightGainNode.connect(channelMergerNode, 0, 1);\n      },\n\n      disconnectGraph() {\n        inputGainNode.disconnect(leftGainNode);\n        inputGainNode.disconnect(panWaveShaperNode.inputs[0]);\n        inputGainNode.disconnect(rightGainNode);\n        panWaveShaperNode.disconnect(panGainNode);\n        panGainNode.disconnect(leftWaveShaperNode.inputs[0]);\n        panGainNode.disconnect(rightWaveShaperNode.inputs[0]);\n        leftWaveShaperNode.disconnect(leftGainNode.gain);\n        rightWaveShaperNode.disconnect(rightGainNode.gain);\n        leftGainNode.disconnect(channelMergerNode, 0, 0);\n        rightGainNode.disconnect(channelMergerNode, 0, 1);\n      }\n\n    };\n  };\n\n  const buildInternalGraphForStereo = (nativeContext, inputGainNode, panGainNode, channelMergerNode) => {\n    const leftInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    const leftInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    const rightInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    const rightInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    const centerIndex = Math.floor(CURVE_SIZE / 2);\n\n    for (let i = 0; i < CURVE_SIZE; i += 1) {\n      if (i > centerIndex) {\n        const x = (i - centerIndex) / (CURVE_SIZE - 1 - centerIndex) * HALF_PI;\n        leftInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);\n        leftInputForRightOutputWaveShaperCurve[i] = Math.sin(x);\n        rightInputForLeftOutputWaveShaperCurve[i] = 0;\n        rightInputForRightOutputWaveShaperCurve[i] = 1;\n      } else {\n        const x = i / (CURVE_SIZE - 1 - centerIndex) * HALF_PI;\n        leftInputForLeftOutputWaveShaperCurve[i] = 1;\n        leftInputForRightOutputWaveShaperCurve[i] = 0;\n        rightInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);\n        rightInputForRightOutputWaveShaperCurve[i] = Math.sin(x);\n      }\n    }\n\n    const channelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n      channelCount: 2,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete',\n      numberOfOutputs: 2\n    });\n    const leftInputForLeftOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    }); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    const leftInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n      curve: leftInputForLeftOutputWaveShaperCurve\n    });\n    const leftInputForRightOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    }); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    const leftInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n      curve: leftInputForRightOutputWaveShaperCurve\n    }); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    const panWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n      curve: DC_CURVE\n    });\n    const rightInputForLeftOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    }); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    const rightInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n      curve: rightInputForLeftOutputWaveShaperCurve\n    });\n    const rightInputForRightOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    }); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    const rightInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n      curve: rightInputForRightOutputWaveShaperCurve\n    });\n    return {\n      connectGraph() {\n        inputGainNode.connect(channelSplitterNode);\n        inputGainNode.connect(panWaveShaperNode.inputs[0]);\n        channelSplitterNode.connect(leftInputForLeftOutputGainNode, 1);\n        channelSplitterNode.connect(leftInputForRightOutputGainNode, 1);\n        channelSplitterNode.connect(rightInputForLeftOutputGainNode, 1);\n        channelSplitterNode.connect(rightInputForRightOutputGainNode, 1);\n        panWaveShaperNode.connect(panGainNode);\n        panGainNode.connect(leftInputForLeftOutputWaveShaperNode.inputs[0]);\n        panGainNode.connect(leftInputForRightOutputWaveShaperNode.inputs[0]);\n        panGainNode.connect(rightInputForLeftOutputWaveShaperNode.inputs[0]);\n        panGainNode.connect(rightInputForRightOutputWaveShaperNode.inputs[0]);\n        leftInputForLeftOutputWaveShaperNode.connect(leftInputForLeftOutputGainNode.gain);\n        leftInputForRightOutputWaveShaperNode.connect(leftInputForRightOutputGainNode.gain);\n        rightInputForLeftOutputWaveShaperNode.connect(rightInputForLeftOutputGainNode.gain);\n        rightInputForRightOutputWaveShaperNode.connect(rightInputForRightOutputGainNode.gain);\n        leftInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n        rightInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n        leftInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n        rightInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n      },\n\n      disconnectGraph() {\n        inputGainNode.disconnect(channelSplitterNode);\n        inputGainNode.disconnect(panWaveShaperNode.inputs[0]);\n        channelSplitterNode.disconnect(leftInputForLeftOutputGainNode, 1);\n        channelSplitterNode.disconnect(leftInputForRightOutputGainNode, 1);\n        channelSplitterNode.disconnect(rightInputForLeftOutputGainNode, 1);\n        channelSplitterNode.disconnect(rightInputForRightOutputGainNode, 1);\n        panWaveShaperNode.disconnect(panGainNode);\n        panGainNode.disconnect(leftInputForLeftOutputWaveShaperNode.inputs[0]);\n        panGainNode.disconnect(leftInputForRightOutputWaveShaperNode.inputs[0]);\n        panGainNode.disconnect(rightInputForLeftOutputWaveShaperNode.inputs[0]);\n        panGainNode.disconnect(rightInputForRightOutputWaveShaperNode.inputs[0]);\n        leftInputForLeftOutputWaveShaperNode.disconnect(leftInputForLeftOutputGainNode.gain);\n        leftInputForRightOutputWaveShaperNode.disconnect(leftInputForRightOutputGainNode.gain);\n        rightInputForLeftOutputWaveShaperNode.disconnect(rightInputForLeftOutputGainNode.gain);\n        rightInputForRightOutputWaveShaperNode.disconnect(rightInputForRightOutputGainNode.gain);\n        leftInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);\n        rightInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);\n        leftInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);\n        rightInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);\n      }\n\n    };\n  };\n\n  const buildInternalGraph = (nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode) => {\n    if (channelCount === 1) {\n      return buildInternalGraphForMono(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n    }\n\n    if (channelCount === 2) {\n      return buildInternalGraphForStereo(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n    }\n\n    throw createNotSupportedError();\n  };\n\n  return (nativeContext, {\n    channelCount,\n    channelCountMode,\n    pan,\n    ...audioNodeOptions\n  }) => {\n    if (channelCountMode === 'max') {\n      throw createNotSupportedError();\n    }\n\n    const channelMergerNode = createNativeChannelMergerNode(nativeContext, { ...audioNodeOptions,\n      channelCount: 1,\n      channelCountMode,\n      numberOfInputs: 2\n    });\n    const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions,\n      channelCount,\n      channelCountMode,\n      gain: 1\n    });\n    const panGainNode = createNativeGainNode(nativeContext, {\n      channelCount: 1,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete',\n      gain: pan\n    });\n    let {\n      connectGraph,\n      disconnectGraph\n    } = buildInternalGraph(nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode);\n    Object.defineProperty(panGainNode.gain, 'defaultValue', {\n      get: () => 0\n    });\n    const nativeStereoPannerNodeFakerFactory = {\n      get bufferSize() {\n        return undefined;\n      },\n\n      get channelCount() {\n        return inputGainNode.channelCount;\n      },\n\n      set channelCount(value) {\n        if (inputGainNode.channelCount !== value) {\n          if (isConnected) {\n            disconnectGraph();\n          }\n\n          ({\n            connectGraph,\n            disconnectGraph\n          } = buildInternalGraph(nativeContext, value, inputGainNode, panGainNode, channelMergerNode));\n\n          if (isConnected) {\n            connectGraph();\n          }\n        }\n\n        inputGainNode.channelCount = value;\n      },\n\n      get channelCountMode() {\n        return inputGainNode.channelCountMode;\n      },\n\n      set channelCountMode(value) {\n        if (value === 'clamped-max' || value === 'max') {\n          throw createNotSupportedError();\n        }\n\n        inputGainNode.channelCountMode = value;\n      },\n\n      get channelInterpretation() {\n        return inputGainNode.channelInterpretation;\n      },\n\n      set channelInterpretation(value) {\n        inputGainNode.channelInterpretation = value;\n      },\n\n      get context() {\n        return inputGainNode.context;\n      },\n\n      get inputs() {\n        return [inputGainNode];\n      },\n\n      get numberOfInputs() {\n        return inputGainNode.numberOfInputs;\n      },\n\n      get numberOfOutputs() {\n        return inputGainNode.numberOfOutputs;\n      },\n\n      get pan() {\n        return panGainNode.gain;\n      },\n\n      addEventListener(...args) {\n        return inputGainNode.addEventListener(args[0], args[1], args[2]);\n      },\n\n      dispatchEvent(...args) {\n        return inputGainNode.dispatchEvent(args[0]);\n      },\n\n      removeEventListener(...args) {\n        return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n      }\n\n    };\n    let isConnected = false;\n\n    const whenConnected = () => {\n      connectGraph();\n      isConnected = true;\n    };\n\n    const whenDisconnected = () => {\n      disconnectGraph();\n      isConnected = false;\n    };\n\n    return monitorConnections(interceptConnections(nativeStereoPannerNodeFakerFactory, channelMergerNode), whenConnected, whenDisconnected);\n  };\n};","import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeWaveShaperNodeFactory = (createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeAudioNode, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, overwriteAccessors) => {\n  return (nativeContext, options) => {\n    const nativeWaveShaperNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createWaveShaper());\n\n    try {\n      // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n      // Bug #119: Safari does not correctly map the values. Bug #102 is only used to detect Safari in this case.\n      nativeWaveShaperNode.curve = new Float32Array([1]);\n      return createNativeWaveShaperNodeFaker(nativeContext, options);\n    } catch {\n      /* Ignore errors. */\n    }\n\n    assignNativeAudioNodeOptions(nativeWaveShaperNode, options);\n    const curve = options.curve; // Bug #104: Chrome will throw an InvalidAccessError when the curve has less than two samples.\n\n    if (curve !== null && curve.length < 2) {\n      throw createInvalidStateError();\n    }\n\n    assignNativeAudioNodeOption(nativeWaveShaperNode, options, 'curve');\n    assignNativeAudioNodeOption(nativeWaveShaperNode, options, 'oversample');\n    let disconnectNativeAudioBufferSourceNode = null;\n    let isConnected = false;\n    overwriteAccessors(nativeWaveShaperNode, 'curve', get => () => get.call(nativeWaveShaperNode), set => value => {\n      set.call(nativeWaveShaperNode, value);\n\n      if (isConnected) {\n        if (isDCCurve(value) && disconnectNativeAudioBufferSourceNode === null) {\n          disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);\n        } else if (!isDCCurve(value) && disconnectNativeAudioBufferSourceNode !== null) {\n          disconnectNativeAudioBufferSourceNode();\n          disconnectNativeAudioBufferSourceNode = null;\n        }\n      }\n\n      return value;\n    });\n\n    const whenConnected = () => {\n      isConnected = true;\n\n      if (isDCCurve(nativeWaveShaperNode.curve)) {\n        disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);\n      }\n    };\n\n    const whenDisconnected = () => {\n      isConnected = false;\n\n      if (disconnectNativeAudioBufferSourceNode !== null) {\n        disconnectNativeAudioBufferSourceNode();\n        disconnectNativeAudioBufferSourceNode = null;\n      }\n    };\n\n    return monitorConnections(nativeWaveShaperNode, whenConnected, whenDisconnected);\n  };\n};","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeWaveShaperNodeFakerFactory = (createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeAudioNode, createNativeGainNode, isDCCurve, monitorConnections) => {\n  return (nativeContext, {\n    curve,\n    oversample,\n    ...audioNodeOptions\n  }) => {\n    const negativeWaveShaperNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createWaveShaper());\n    const positiveWaveShaperNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createWaveShaper());\n    assignNativeAudioNodeOptions(negativeWaveShaperNode, audioNodeOptions);\n    assignNativeAudioNodeOptions(positiveWaveShaperNode, audioNodeOptions);\n    const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions,\n      gain: 1\n    });\n    const invertGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions,\n      gain: -1\n    });\n    const outputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions,\n      gain: 1\n    });\n    const revertGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions,\n      gain: -1\n    });\n    let disconnectNativeAudioBufferSourceNode = null;\n    let isConnected = false;\n    let unmodifiedCurve = null;\n    const nativeWaveShaperNodeFaker = {\n      get bufferSize() {\n        return undefined;\n      },\n\n      get channelCount() {\n        return negativeWaveShaperNode.channelCount;\n      },\n\n      set channelCount(value) {\n        inputGainNode.channelCount = value;\n        invertGainNode.channelCount = value;\n        negativeWaveShaperNode.channelCount = value;\n        outputGainNode.channelCount = value;\n        positiveWaveShaperNode.channelCount = value;\n        revertGainNode.channelCount = value;\n      },\n\n      get channelCountMode() {\n        return negativeWaveShaperNode.channelCountMode;\n      },\n\n      set channelCountMode(value) {\n        inputGainNode.channelCountMode = value;\n        invertGainNode.channelCountMode = value;\n        negativeWaveShaperNode.channelCountMode = value;\n        outputGainNode.channelCountMode = value;\n        positiveWaveShaperNode.channelCountMode = value;\n        revertGainNode.channelCountMode = value;\n      },\n\n      get channelInterpretation() {\n        return negativeWaveShaperNode.channelInterpretation;\n      },\n\n      set channelInterpretation(value) {\n        inputGainNode.channelInterpretation = value;\n        invertGainNode.channelInterpretation = value;\n        negativeWaveShaperNode.channelInterpretation = value;\n        outputGainNode.channelInterpretation = value;\n        positiveWaveShaperNode.channelInterpretation = value;\n        revertGainNode.channelInterpretation = value;\n      },\n\n      get context() {\n        return negativeWaveShaperNode.context;\n      },\n\n      get curve() {\n        return unmodifiedCurve;\n      },\n\n      set curve(value) {\n        // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n        if (curve !== null && curve.length < 2) {\n          throw createInvalidStateError();\n        }\n\n        if (value === null) {\n          negativeWaveShaperNode.curve = value;\n          positiveWaveShaperNode.curve = value;\n        } else {\n          const curveLength = value.length;\n          const negativeCurve = new Float32Array(curveLength + 2 - curveLength % 2);\n          const positiveCurve = new Float32Array(curveLength + 2 - curveLength % 2);\n          negativeCurve[0] = value[0];\n          positiveCurve[0] = -value[curveLength - 1];\n          const length = Math.ceil((curveLength + 1) / 2);\n          const centerIndex = (curveLength + 1) / 2 - 1;\n\n          for (let i = 1; i < length; i += 1) {\n            const theoreticIndex = i / length * centerIndex;\n            const lowerIndex = Math.floor(theoreticIndex);\n            const upperIndex = Math.ceil(theoreticIndex);\n            negativeCurve[i] = lowerIndex === upperIndex ? value[lowerIndex] : (1 - (theoreticIndex - lowerIndex)) * value[lowerIndex] + (1 - (upperIndex - theoreticIndex)) * value[upperIndex];\n            positiveCurve[i] = lowerIndex === upperIndex ? -value[curveLength - 1 - lowerIndex] : -((1 - (theoreticIndex - lowerIndex)) * value[curveLength - 1 - lowerIndex]) - (1 - (upperIndex - theoreticIndex)) * value[curveLength - 1 - upperIndex];\n          }\n\n          negativeCurve[length] = curveLength % 2 === 1 ? value[length - 1] : (value[length - 2] + value[length - 1]) / 2;\n          negativeWaveShaperNode.curve = negativeCurve;\n          positiveWaveShaperNode.curve = positiveCurve;\n        }\n\n        unmodifiedCurve = value;\n\n        if (isConnected) {\n          if (isDCCurve(unmodifiedCurve) && disconnectNativeAudioBufferSourceNode === null) {\n            disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, inputGainNode);\n          } else if (disconnectNativeAudioBufferSourceNode !== null) {\n            disconnectNativeAudioBufferSourceNode();\n            disconnectNativeAudioBufferSourceNode = null;\n          }\n        }\n      },\n\n      get inputs() {\n        return [inputGainNode];\n      },\n\n      get numberOfInputs() {\n        return negativeWaveShaperNode.numberOfInputs;\n      },\n\n      get numberOfOutputs() {\n        return negativeWaveShaperNode.numberOfOutputs;\n      },\n\n      get oversample() {\n        return negativeWaveShaperNode.oversample;\n      },\n\n      set oversample(value) {\n        negativeWaveShaperNode.oversample = value;\n        positiveWaveShaperNode.oversample = value;\n      },\n\n      addEventListener(...args) {\n        return inputGainNode.addEventListener(args[0], args[1], args[2]);\n      },\n\n      dispatchEvent(...args) {\n        return inputGainNode.dispatchEvent(args[0]);\n      },\n\n      removeEventListener(...args) {\n        return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n      }\n\n    };\n\n    if (curve !== nativeWaveShaperNodeFaker.curve) {\n      nativeWaveShaperNodeFaker.curve = curve;\n    }\n\n    if (oversample !== nativeWaveShaperNodeFaker.oversample) {\n      nativeWaveShaperNodeFaker.oversample = oversample;\n    }\n\n    const whenConnected = () => {\n      inputGainNode.connect(negativeWaveShaperNode).connect(outputGainNode);\n      inputGainNode.connect(invertGainNode).connect(positiveWaveShaperNode).connect(revertGainNode).connect(outputGainNode);\n      isConnected = true;\n\n      if (isDCCurve(unmodifiedCurve)) {\n        disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, inputGainNode);\n      }\n    };\n\n    const whenDisconnected = () => {\n      inputGainNode.disconnect(negativeWaveShaperNode);\n      negativeWaveShaperNode.disconnect(outputGainNode);\n      inputGainNode.disconnect(invertGainNode);\n      invertGainNode.disconnect(positiveWaveShaperNode);\n      positiveWaveShaperNode.disconnect(revertGainNode);\n      revertGainNode.disconnect(outputGainNode);\n      isConnected = false;\n\n      if (disconnectNativeAudioBufferSourceNode !== null) {\n        disconnectNativeAudioBufferSourceNode();\n        disconnectNativeAudioBufferSourceNode = null;\n      }\n    };\n\n    return monitorConnections(interceptConnections(nativeWaveShaperNodeFaker, outputGainNode), whenConnected, whenDisconnected);\n  };\n};","import { testPromiseSupport } from '../helpers/test-promise-support';\nconst DEFAULT_OPTIONS = {\n  numberOfChannels: 1\n};\nexport const createOfflineAudioContextConstructor = (baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering) => {\n  return class OfflineAudioContext extends baseAudioContextConstructor {\n    constructor(a, b, c) {\n      let options;\n\n      if (typeof a === 'number' && b !== undefined && c !== undefined) {\n        options = {\n          length: b,\n          numberOfChannels: a,\n          sampleRate: c\n        };\n      } else if (typeof a === 'object') {\n        options = a;\n      } else {\n        throw new Error('The given parameters are not valid.');\n      }\n\n      const {\n        length,\n        numberOfChannels,\n        sampleRate\n      } = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate); // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.\n\n      if (!cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n        nativeOfflineAudioContext.addEventListener('statechange', (() => {\n          let i = 0;\n\n          const delayStateChangeEvent = event => {\n            if (this._state === 'running') {\n              if (i > 0) {\n                nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);\n                event.stopImmediatePropagation();\n\n                this._waitForThePromiseToSettle(event);\n              } else {\n                i += 1;\n              }\n            }\n          };\n\n          return delayStateChangeEvent;\n        })());\n      }\n\n      super(nativeOfflineAudioContext, numberOfChannels);\n      this._length = length;\n      this._nativeOfflineAudioContext = nativeOfflineAudioContext;\n      this._state = null;\n    }\n\n    get length() {\n      // Bug #17: Safari does not yet expose the length.\n      if (this._nativeOfflineAudioContext.length === undefined) {\n        return this._length;\n      }\n\n      return this._nativeOfflineAudioContext.length;\n    }\n\n    get state() {\n      return this._state === null ? this._nativeOfflineAudioContext.state : this._state;\n    }\n\n    startRendering() {\n      /*\n       * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore\n       * the state of the nativeOfflineAudioContext might no transition to running immediately.\n       */\n      if (this._state === 'running') {\n        return Promise.reject(createInvalidStateError());\n      }\n\n      this._state = 'running';\n      return startRendering(this.destination, this._nativeOfflineAudioContext).then(audioBuffer => {\n        this._state = null;\n        /*\n         * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n         * deleteAudioGraph(this, this._nativeOfflineAudioContext);\n         */\n\n        return audioBuffer;\n      }) // @todo This could be written more elegantly when Promise.finally() becomes avalaible.\n      .catch(err => {\n        this._state = null;\n        /*\n         * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n         * deleteAudioGraph(this, this._nativeOfflineAudioContext);\n         */\n\n        throw err;\n      });\n    }\n\n    _waitForThePromiseToSettle(event) {\n      if (this._state === null) {\n        this._nativeOfflineAudioContext.dispatchEvent(event);\n      } else {\n        setTimeout(() => this._waitForThePromiseToSettle(event));\n      }\n    }\n\n  };\n};","import { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nconst DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  detune: 0,\n  frequency: 440,\n  type: 'sine'\n};\nexport const createOscillatorNodeConstructor = (audioNodeConstructor, createAudioParam, createInvalidStateError, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {\n  return class OscillatorNode extends audioNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeOscillatorNode = createNativeOscillatorNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const oscillatorNodeRenderer = isOffline ? createOscillatorNodeRenderer() : null;\n      const nyquist = context.sampleRate / 2;\n      super(context, false, nativeOscillatorNode, oscillatorNodeRenderer); // Bug #81: Edge, Firefox & Safari do not export the correct values for maxValue and minValue.\n\n      this._detune = createAudioParam(this, isOffline, nativeOscillatorNode.detune, 153600, -153600); // Bug #76: Edge & Safari do not export the correct values for maxValue and minValue.\n\n      this._frequency = createAudioParam(this, isOffline, nativeOscillatorNode.frequency, nyquist, -nyquist);\n      this._nativeOscillatorNode = nativeOscillatorNode;\n      this._onended = null;\n      this._oscillatorNodeRenderer = oscillatorNodeRenderer;\n\n      if (this._oscillatorNodeRenderer !== null && mergedOptions.periodicWave !== undefined) {\n        this._oscillatorNodeRenderer.periodicWave = mergedOptions.periodicWave;\n      }\n    }\n\n    get detune() {\n      return this._detune;\n    }\n\n    get frequency() {\n      return this._frequency;\n    }\n\n    get onended() {\n      return this._onended;\n    }\n\n    set onended(value) {\n      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n      this._nativeOscillatorNode.onended = wrappedListener;\n      const nativeOnEnded = this._nativeOscillatorNode.onended;\n      this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n    }\n\n    get type() {\n      return this._nativeOscillatorNode.type;\n    }\n\n    set type(value) {\n      this._nativeOscillatorNode.type = value; // Bug #57: Edge will not throw an error when assigning the type to 'custom'. But it still will change the value.\n\n      if (value === 'custom') {\n        throw createInvalidStateError();\n      }\n\n      if (this._oscillatorNodeRenderer !== null) {\n        this._oscillatorNodeRenderer.periodicWave = null;\n      }\n    }\n\n    setPeriodicWave(periodicWave) {\n      this._nativeOscillatorNode.setPeriodicWave(periodicWave);\n\n      if (this._oscillatorNodeRenderer !== null) {\n        this._oscillatorNodeRenderer.periodicWave = periodicWave;\n      }\n    }\n\n    start(when = 0) {\n      this._nativeOscillatorNode.start(when);\n\n      if (this._oscillatorNodeRenderer !== null) {\n        this._oscillatorNodeRenderer.start = when;\n      } else {\n        setInternalStateToActive(this);\n\n        const resetInternalStateToPassive = () => {\n          this._nativeOscillatorNode.removeEventListener('ended', resetInternalStateToPassive); // @todo Determine a meaningful delay instead of just using one second.\n\n\n          setTimeout(() => setInternalStateToPassive(this), 1000);\n        };\n\n        this._nativeOscillatorNode.addEventListener('ended', resetInternalStateToPassive);\n      }\n    }\n\n    stop(when = 0) {\n      this._nativeOscillatorNode.stop(when);\n\n      if (this._oscillatorNodeRenderer !== null) {\n        this._oscillatorNodeRenderer.stop = when;\n      }\n    }\n\n  };\n};","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createOscillatorNodeRendererFactory = (connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeOscillatorNodes = new WeakMap();\n    let periodicWave = null;\n    let start = null;\n    let stop = null;\n\n    const createOscillatorNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeOscillatorNode = getNativeAudioNode(proxy); // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeOscillatorNodeIsOwnedByContext = isOwnedByContext(nativeOscillatorNode, nativeOfflineAudioContext);\n\n      if (!nativeOscillatorNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeOscillatorNode.channelCount,\n          channelCountMode: nativeOscillatorNode.channelCountMode,\n          channelInterpretation: nativeOscillatorNode.channelInterpretation,\n          detune: nativeOscillatorNode.detune.value,\n          frequency: nativeOscillatorNode.frequency.value,\n          periodicWave: periodicWave === null ? undefined : periodicWave,\n          type: nativeOscillatorNode.type\n        };\n        nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);\n\n        if (start !== null) {\n          nativeOscillatorNode.start(start);\n        }\n\n        if (stop !== null) {\n          nativeOscillatorNode.stop(stop);\n        }\n      }\n\n      renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);\n\n      if (!nativeOscillatorNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency, trace);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency, trace);\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode, trace);\n      return nativeOscillatorNode;\n    };\n\n    return {\n      set periodicWave(value) {\n        periodicWave = value;\n      },\n\n      set start(value) {\n        start = value;\n      },\n\n      set stop(value) {\n        stop = value;\n      },\n\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeOscillatorNode !== undefined) {\n          return Promise.resolve(renderedNativeOscillatorNode);\n        }\n\n        return createOscillatorNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nconst DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'clamped-max',\n  channelInterpretation: 'speakers',\n  coneInnerAngle: 360,\n  coneOuterAngle: 360,\n  coneOuterGain: 0,\n  distanceModel: 'inverse',\n  maxDistance: 10000,\n  orientationX: 1,\n  orientationY: 0,\n  orientationZ: 0,\n  panningModel: 'equalpower',\n  positionX: 0,\n  positionY: 0,\n  positionZ: 0,\n  refDistance: 1,\n  rolloffFactor: 1\n};\nexport const createPannerNodeConstructor = (audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext) => {\n  return class PannerNode extends audioNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativePannerNode = createNativePannerNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const pannerNodeRenderer = isOffline ? createPannerNodeRenderer() : null;\n      super(context, false, nativePannerNode, pannerNodeRenderer);\n      this._nativePannerNode = nativePannerNode; // Bug #74: Edge & Safari do not export the correct values for maxValue and minValue for GainNodes.\n\n      this._orientationX = createAudioParam(this, isOffline, nativePannerNode.orientationX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._orientationY = createAudioParam(this, isOffline, nativePannerNode.orientationY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._orientationZ = createAudioParam(this, isOffline, nativePannerNode.orientationZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._positionX = createAudioParam(this, isOffline, nativePannerNode.positionX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._positionY = createAudioParam(this, isOffline, nativePannerNode.positionY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._positionZ = createAudioParam(this, isOffline, nativePannerNode.positionZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n    }\n\n    get coneInnerAngle() {\n      return this._nativePannerNode.coneInnerAngle;\n    }\n\n    set coneInnerAngle(value) {\n      this._nativePannerNode.coneInnerAngle = value;\n    }\n\n    get coneOuterAngle() {\n      return this._nativePannerNode.coneOuterAngle;\n    }\n\n    set coneOuterAngle(value) {\n      this._nativePannerNode.coneOuterAngle = value;\n    }\n\n    get coneOuterGain() {\n      return this._nativePannerNode.coneOuterGain;\n    }\n\n    set coneOuterGain(value) {\n      this._nativePannerNode.coneOuterGain = value;\n    }\n\n    get distanceModel() {\n      return this._nativePannerNode.distanceModel;\n    }\n\n    set distanceModel(value) {\n      this._nativePannerNode.distanceModel = value;\n    }\n\n    get maxDistance() {\n      return this._nativePannerNode.maxDistance;\n    }\n\n    set maxDistance(value) {\n      this._nativePannerNode.maxDistance = value;\n    }\n\n    get orientationX() {\n      return this._orientationX;\n    }\n\n    get orientationY() {\n      return this._orientationY;\n    }\n\n    get orientationZ() {\n      return this._orientationZ;\n    }\n\n    get panningModel() {\n      return this._nativePannerNode.panningModel;\n    }\n\n    set panningModel(value) {\n      this._nativePannerNode.panningModel = value;\n    }\n\n    get positionX() {\n      return this._positionX;\n    }\n\n    get positionY() {\n      return this._positionY;\n    }\n\n    get positionZ() {\n      return this._positionZ;\n    }\n\n    get refDistance() {\n      return this._nativePannerNode.refDistance;\n    }\n\n    set refDistance(value) {\n      this._nativePannerNode.refDistance = value;\n    }\n\n    get rolloffFactor() {\n      return this._nativePannerNode.rolloffFactor;\n    }\n\n    set rolloffFactor(value) {\n      this._nativePannerNode.rolloffFactor = value;\n    }\n\n  };\n};","import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createPannerNodeRendererFactory = (connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {\n  return () => {\n    const renderedNativeAudioNodes = new WeakMap();\n    let renderedBufferPromise = null;\n\n    const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeGainNode = null;\n      let nativePannerNode = getNativeAudioNode(proxy);\n      const commonAudioNodeOptions = {\n        channelCount: nativePannerNode.channelCount,\n        channelCountMode: nativePannerNode.channelCountMode,\n        channelInterpretation: nativePannerNode.channelInterpretation\n      };\n      const commonNativePannerNodeOptions = { ...commonAudioNodeOptions,\n        coneInnerAngle: nativePannerNode.coneInnerAngle,\n        coneOuterAngle: nativePannerNode.coneOuterAngle,\n        coneOuterGain: nativePannerNode.coneOuterGain,\n        distanceModel: nativePannerNode.distanceModel,\n        maxDistance: nativePannerNode.maxDistance,\n        panningModel: nativePannerNode.panningModel,\n        refDistance: nativePannerNode.refDistance,\n        rolloffFactor: nativePannerNode.rolloffFactor\n      }; // If the initially used nativePannerNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativePannerNodeIsOwnedByContext = isOwnedByContext(nativePannerNode, nativeOfflineAudioContext); // Bug #124: Edge & Safari do not support modifying the orientation and the position with AudioParams.\n\n      if ('bufferSize' in nativePannerNode) {\n        nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions,\n          gain: 1\n        });\n      } else if (!nativePannerNodeIsOwnedByContext) {\n        const options = { ...commonNativePannerNodeOptions,\n          orientationX: nativePannerNode.orientationX.value,\n          orientationY: nativePannerNode.orientationY.value,\n          orientationZ: nativePannerNode.orientationZ.value,\n          positionX: nativePannerNode.positionX.value,\n          positionY: nativePannerNode.positionY.value,\n          positionZ: nativePannerNode.positionZ.value\n        };\n        nativePannerNode = createNativePannerNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeGainNode === null ? nativePannerNode : nativeGainNode);\n\n      if (nativeGainNode !== null) {\n        if (renderedBufferPromise === null) {\n          if (nativeOfflineAudioContextConstructor === null) {\n            throw new Error('Missing the native OfflineAudioContext constructor.');\n          }\n\n          const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(6, // Bug #17: Safari does not yet expose the length.\n          proxy.context.length, nativeOfflineAudioContext.sampleRate);\n          const nativeChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'speakers',\n            numberOfInputs: 6\n          });\n          nativeChannelMergerNode.connect(partialOfflineAudioContext.destination);\n\n          renderedBufferPromise = (async () => {\n            const nativeConstantSourceNodes = await Promise.all([proxy.orientationX, proxy.orientationY, proxy.orientationZ, proxy.positionX, proxy.positionY, proxy.positionZ].map(async (audioParam, index) => {\n              const nativeConstantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'discrete',\n                offset: index === 0 ? 1 : 0\n              });\n              await renderAutomation(partialOfflineAudioContext, audioParam, nativeConstantSourceNode.offset, trace);\n              return nativeConstantSourceNode;\n            }));\n\n            for (let i = 0; i < 6; i += 1) {\n              nativeConstantSourceNodes[i].connect(nativeChannelMergerNode, 0, i);\n              nativeConstantSourceNodes[i].start(0);\n            }\n\n            return renderNativeOfflineAudioContext(partialOfflineAudioContext);\n          })();\n        }\n\n        const renderedBuffer = await renderedBufferPromise;\n        const inputGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions,\n          gain: 1\n        });\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, inputGainNode, trace);\n        const channelDatas = [];\n\n        for (let i = 0; i < renderedBuffer.numberOfChannels; i += 1) {\n          channelDatas.push(renderedBuffer.getChannelData(i));\n        }\n\n        let lastOrientation = [channelDatas[0][0], channelDatas[1][0], channelDatas[2][0]];\n        let lastPosition = [channelDatas[3][0], channelDatas[4][0], channelDatas[5][0]];\n        let gateGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions,\n          gain: 1\n        });\n        let partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, { ...commonNativePannerNodeOptions,\n          orientationX: lastOrientation[0],\n          orientationY: lastOrientation[1],\n          orientationZ: lastOrientation[2],\n          positionX: lastPosition[0],\n          positionY: lastPosition[1],\n          positionZ: lastPosition[2]\n        });\n        inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);\n        partialPannerNode.connect(nativeGainNode);\n\n        for (let i = 128; i < renderedBuffer.length; i += 128) {\n          const orientation = [channelDatas[0][i], channelDatas[1][i], channelDatas[2][i]];\n          const positon = [channelDatas[3][i], channelDatas[4][i], channelDatas[5][i]];\n\n          if (orientation.some((value, index) => value !== lastOrientation[index]) || positon.some((value, index) => value !== lastPosition[index])) {\n            lastOrientation = orientation;\n            lastPosition = positon;\n            const currentTime = i / nativeOfflineAudioContext.sampleRate;\n            gateGainNode.gain.setValueAtTime(0, currentTime);\n            gateGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions,\n              gain: 0\n            });\n            partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, { ...commonNativePannerNodeOptions,\n              orientationX: lastOrientation[0],\n              orientationY: lastOrientation[1],\n              orientationZ: lastOrientation[2],\n              positionX: lastPosition[0],\n              positionY: lastPosition[1],\n              positionZ: lastPosition[2]\n            });\n            gateGainNode.gain.setValueAtTime(1, currentTime);\n            inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);\n            partialPannerNode.connect(nativeGainNode);\n          }\n        }\n\n        return nativeGainNode;\n      }\n\n      if (!nativePannerNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ, trace);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ, trace);\n      }\n\n      if (isNativeAudioNodeFaker(nativePannerNode)) {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode.inputs[0], trace);\n      } else {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode, trace);\n      }\n\n      return nativePannerNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeGainNodeOrNativePannerNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeGainNodeOrNativePannerNode !== undefined) {\n          return Promise.resolve(renderedNativeGainNodeOrNativePannerNode);\n        }\n\n        return createAudioNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","const DEFAULT_OPTIONS = {\n  disableNormalization: false\n};\nexport const createPeriodicWaveConstructor = (createNativePeriodicWave, getNativeContext, periodicWaveStore) => {\n  return class PeriodicWave {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const periodicWave = createNativePeriodicWave(nativeContext, mergedOptions);\n      periodicWaveStore.add(periodicWave); // This does violate all good pratices but it is used here to simplify the handling of periodic waves.\n\n      return periodicWave;\n    }\n\n    static [Symbol.hasInstance](instance) {\n      return instance !== null && typeof instance === 'object' && Object.getPrototypeOf(instance) === PeriodicWave.prototype || periodicWaveStore.has(instance);\n    }\n\n  };\n};","export const createRenderAutomation = (getAudioParamRenderer, renderInputsOfAudioParam) => {\n  return (nativeOfflineAudioContext, audioParam, nativeAudioParam, trace) => {\n    const audioParamRenderer = getAudioParamRenderer(audioParam);\n    audioParamRenderer.replay(nativeAudioParam);\n    return renderInputsOfAudioParam(audioParam, nativeOfflineAudioContext, nativeAudioParam, trace);\n  };\n};","export const createRenderInputsOfAudioNode = (getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle) => {\n  return async (audioNode, nativeOfflineAudioContext, nativeAudioNode, trace) => {\n    const audioNodeConnections = getAudioNodeConnections(audioNode);\n    const nextTrace = [...trace, audioNode];\n    await Promise.all(audioNodeConnections.activeInputs.map((connections, input) => Array.from(connections).filter(([source]) => !nextTrace.includes(source)).map(async ([source, output]) => {\n      const audioNodeRenderer = getAudioNodeRenderer(source);\n      const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext, nextTrace);\n      const destination = audioNode.context.destination;\n\n      if (!isPartOfACycle(source) && (audioNode !== destination || !isPartOfACycle(audioNode))) {\n        renderedNativeAudioNode.connect(nativeAudioNode, output, input);\n      }\n    })).reduce((allRenderingPromises, renderingPromises) => [...allRenderingPromises, ...renderingPromises], []));\n  };\n};","export const createRenderInputsOfAudioParam = (getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle) => {\n  return async (audioParam, nativeOfflineAudioContext, nativeAudioParam, trace) => {\n    const audioParamConnections = getAudioParamConnections(audioParam);\n    await Promise.all(Array.from(audioParamConnections.activeInputs).map(async ([source, output]) => {\n      const audioNodeRenderer = getAudioNodeRenderer(source);\n      const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext, trace);\n\n      if (!isPartOfACycle(source)) {\n        renderedNativeAudioNode.connect(nativeAudioParam, output);\n      }\n    }));\n  };\n};","import { testPromiseSupport } from '../helpers/test-promise-support';\nexport const createRenderNativeOfflineAudioContext = (cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, testOfflineAudioContextCurrentTimeSupport) => {\n  return nativeOfflineAudioContext => {\n    // Bug #21: Safari does not support promises yet.\n    if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n      // Bug #158: Edge does not advance currentTime if it is not accessed while rendering the audio.\n      return Promise.resolve(cacheTestResult(testOfflineAudioContextCurrentTimeSupport, testOfflineAudioContextCurrentTimeSupport)).then(isOfflineAudioContextCurrentTimeSupported => {\n        if (!isOfflineAudioContextCurrentTimeSupported) {\n          const scriptProcessorNode = createNativeScriptProcessorNode(nativeOfflineAudioContext, 512, 0, 1);\n\n          nativeOfflineAudioContext.oncomplete = () => {\n            scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n\n            scriptProcessorNode.disconnect();\n          };\n\n          scriptProcessorNode.onaudioprocess = () => nativeOfflineAudioContext.currentTime; // tslint:disable-line:deprecation\n\n\n          scriptProcessorNode.connect(nativeOfflineAudioContext.destination);\n        }\n\n        return nativeOfflineAudioContext.startRendering();\n      });\n    }\n\n    return new Promise(resolve => {\n      // Bug #48: Safari does not render an OfflineAudioContext without any connected node.\n      const gainNode = createNativeGainNode(nativeOfflineAudioContext, {\n        channelCount: 1,\n        channelCountMode: 'explicit',\n        channelInterpretation: 'discrete',\n        gain: 0\n      });\n\n      nativeOfflineAudioContext.oncomplete = event => {\n        gainNode.disconnect();\n        resolve(event.renderedBuffer);\n      };\n\n      gainNode.connect(nativeOfflineAudioContext.destination);\n      nativeOfflineAudioContext.startRendering();\n    });\n  };\n};","import { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport const createStartRendering = (audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {\n  const trace = [];\n  return (destination, nativeOfflineAudioContext) => getAudioNodeRenderer(destination).render(destination, nativeOfflineAudioContext, trace)\n  /*\n   * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to the\n   * destination.\n   */\n  .then(() => Promise.all(Array.from(getUnrenderedAudioWorkletNodes(nativeOfflineAudioContext)).map(audioWorkletNode => getAudioNodeRenderer(audioWorkletNode).render(audioWorkletNode, nativeOfflineAudioContext, trace)))).then(() => renderNativeOfflineAudioContext(nativeOfflineAudioContext)).then(audioBuffer => {\n    // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n    // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n    if (typeof audioBuffer.copyFromChannel !== 'function') {\n      wrapAudioBufferCopyChannelMethods(audioBuffer);\n      wrapAudioBufferGetChannelDataMethod(audioBuffer); // Bug #157: Only Chrome & Opera do allow the bufferOffset to be out-of-bounds.\n    } else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n      wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n    }\n\n    audioBufferStore.add(audioBuffer);\n    return audioBuffer;\n  });\n};","const DEFAULT_OPTIONS = {\n  channelCount: 2,\n\n  /*\n   * Bug #105: The channelCountMode should be 'clamped-max' according to the spec but is set to 'explicit' to achieve consistent\n   * behavior.\n   */\n  channelCountMode: 'explicit',\n  channelInterpretation: 'speakers',\n  pan: 0\n};\nexport const createStereoPannerNodeConstructor = (audioNodeConstructor, createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext) => {\n  return class StereoPannerNode extends audioNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeStereoPannerNode = createNativeStereoPannerNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const stereoPannerNodeRenderer = isOffline ? createStereoPannerNodeRenderer() : null;\n      super(context, false, nativeStereoPannerNode, stereoPannerNodeRenderer); // Bug #106: Edge does not export a maxValue and minValue property.\n\n      this._pan = createAudioParam(this, isOffline, nativeStereoPannerNode.pan, 1, -1);\n    }\n\n    get pan() {\n      return this._pan;\n    }\n\n  };\n};","import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createStereoPannerNodeRendererFactory = (connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeStereoPannerNodes = new WeakMap();\n\n    const createStereoPannerNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeStereoPannerNode = getNativeAudioNode(proxy);\n      /*\n       * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created\n       * again.\n       */\n\n      const nativeStereoPannerNodeIsOwnedByContext = isOwnedByContext(nativeStereoPannerNode, nativeOfflineAudioContext);\n\n      if (!nativeStereoPannerNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeStereoPannerNode.channelCount,\n          channelCountMode: nativeStereoPannerNode.channelCountMode,\n          channelInterpretation: nativeStereoPannerNode.channelInterpretation,\n          pan: nativeStereoPannerNode.pan.value\n        };\n        nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);\n\n      if (!nativeStereoPannerNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan, trace);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan, trace);\n      }\n\n      if (isNativeAudioNodeFaker(nativeStereoPannerNode)) {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0], trace);\n      } else {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode, trace);\n      }\n\n      return nativeStereoPannerNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeStereoPannerNode !== undefined) {\n          return Promise.resolve(renderedNativeStereoPannerNode);\n        }\n\n        return createStereoPannerNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","// Bug #33: Edge & Safari expose an AudioBuffer but it can't be used as a constructor.\nexport const createTestAudioBufferConstructorSupport = nativeAudioBufferConstructor => {\n  return () => {\n    if (nativeAudioBufferConstructor === null) {\n      return false;\n    }\n\n    try {\n      new nativeAudioBufferConstructor({\n        length: 1,\n        sampleRate: 44100\n      }); // tslint:disable-line:no-unused-expression\n    } catch {\n      return false;\n    }\n\n    return true;\n  };\n};","/*\n * Firefox up to version 67 didn't fully support the copyFromChannel() and copyToChannel() methods. Therefore testing one of those methods\n * is enough to know if the other one is supported as well.\n */\nexport const createTestAudioBufferCopyChannelMethodsSubarraySupport = nativeOfflineAudioContextConstructor => {\n  return () => {\n    if (nativeOfflineAudioContextConstructor === null) {\n      return false;\n    }\n\n    const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n    const nativeAudioBuffer = nativeOfflineAudioContext.createBuffer(1, 1, 44100); // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n\n    if (nativeAudioBuffer.copyToChannel === undefined) {\n      return true;\n    }\n\n    const source = new Float32Array(2);\n\n    try {\n      nativeAudioBuffer.copyFromChannel(source, 0, 0);\n    } catch {\n      return false;\n    }\n\n    return true;\n  };\n};","export const createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport = createNativeAudioNode => {\n  return nativeContext => {\n    const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createBufferSource());\n    nativeAudioBufferSourceNode.start();\n\n    try {\n      nativeAudioBufferSourceNode.start();\n    } catch {\n      return true;\n    }\n\n    return false;\n  };\n};","// Bug #92: Edge does not respect the duration parameter yet.\nexport const createTestAudioBufferSourceNodeStartMethodDurationParameterSupport = nativeOfflineAudioContextConstructor => {\n  return () => {\n    if (nativeOfflineAudioContextConstructor === null) {\n      return Promise.resolve(false);\n    }\n\n    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n    const audioBuffer = offlineAudioContext.createBuffer(1, 1, offlineAudioContext.sampleRate);\n    const audioBufferSourceNode = offlineAudioContext.createBufferSource();\n    audioBuffer.getChannelData(0)[0] = 1;\n    audioBufferSourceNode.buffer = audioBuffer;\n    audioBufferSourceNode.start(0, 0, 0);\n    audioBufferSourceNode.connect(offlineAudioContext.destination); // Bug #21: Safari does not support promises yet.\n\n    return new Promise(resolve => {\n      offlineAudioContext.oncomplete = ({\n        renderedBuffer\n      }) => {\n        // Bug #5: Safari does not support copyFromChannel().\n        resolve(renderedBuffer.getChannelData(0)[0] === 0);\n      };\n\n      offlineAudioContext.startRendering();\n    });\n  };\n};","export const createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport = createNativeAudioNode => {\n  return nativeContext => {\n    const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createBufferSource());\n    const nativeAudioBuffer = nativeContext.createBuffer(1, 1, 44100);\n    nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;\n\n    try {\n      nativeAudioBufferSourceNode.start(0, 1);\n    } catch {\n      return false;\n    }\n\n    return true;\n  };\n};","export const createTestAudioBufferSourceNodeStopMethodNullifiedBufferSupport = createNativeAudioNode => {\n  return nativeContext => {\n    const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createBufferSource());\n    nativeAudioBufferSourceNode.start();\n\n    try {\n      nativeAudioBufferSourceNode.stop();\n    } catch {\n      return false;\n    }\n\n    return true;\n  };\n};","export const createTestAudioContextCloseMethodSupport = nativeAudioContextConstructor => {\n  return () => {\n    if (nativeAudioContextConstructor === null) {\n      return false;\n    } // Try to check the prototype before constructing the AudioContext.\n\n\n    if (nativeAudioContextConstructor.prototype !== undefined && nativeAudioContextConstructor.prototype.close !== undefined) {\n      return true;\n    }\n\n    const audioContext = new nativeAudioContextConstructor();\n    const isAudioContextClosable = audioContext.close !== undefined;\n\n    try {\n      audioContext.close();\n    } catch {// Ignore errors.\n    }\n\n    return isAudioContextClosable;\n  };\n};","/**\n * Edge up to version 14, Firefox up to version 52, Safari up to version 9 and maybe other browsers\n * did not refuse to decode invalid parameters with a TypeError.\n */\nexport const createTestAudioContextDecodeAudioDataMethodTypeErrorSupport = nativeOfflineAudioContextConstructor => {\n  return () => {\n    if (nativeOfflineAudioContextConstructor === null) {\n      return Promise.resolve(false);\n    }\n\n    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100); // Bug #21: Safari does not support promises yet.\n\n    return new Promise(resolve => {\n      let isPending = true;\n\n      const resolvePromise = err => {\n        if (isPending) {\n          isPending = false;\n          offlineAudioContext.startRendering();\n          resolve(err instanceof TypeError);\n        }\n      };\n\n      let promise; // Bug #26: Safari throws a synchronous error.\n\n      try {\n        promise = offlineAudioContext // Bug #1: Safari requires a successCallback.\n        .decodeAudioData(null, () => {// Ignore the success callback.\n        }, resolvePromise);\n      } catch (err) {\n        resolvePromise(err);\n      } // Bug #21: Safari does not support promises yet.\n\n\n      if (promise !== undefined) {\n        // Bug #6 Chrome does not call the errorCallback\n        promise.catch(resolvePromise);\n      }\n    });\n  };\n};","export const createTestAudioContextOptionsSupport = nativeAudioContextConstructor => {\n  return () => {\n    if (nativeAudioContextConstructor === null) {\n      return false;\n    }\n\n    let audioContext;\n\n    try {\n      audioContext = new nativeAudioContextConstructor({\n        latencyHint: 'balanced'\n      });\n    } catch {\n      return false;\n    }\n\n    audioContext.close();\n    return true;\n  };\n};","// Safari up to version 12.0 (but not v12.1) didn't return the destination in case it was an AudioNode.\nexport const createTestAudioNodeConnectMethodSupport = nativeOfflineAudioContextConstructor => {\n  return () => {\n    if (nativeOfflineAudioContextConstructor === null) {\n      return false;\n    }\n\n    const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n    const nativeGainNode = nativeOfflineAudioContext.createGain();\n    const isSupported = nativeGainNode.connect(nativeGainNode) === nativeGainNode;\n    nativeGainNode.disconnect(nativeGainNode);\n    return isSupported;\n  };\n};","export const createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport = createNativeAudioNode => {\n  return nativeContext => {\n    const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createOscillator());\n\n    try {\n      nativeAudioBufferSourceNode.start(-1);\n    } catch (err) {\n      return err instanceof RangeError;\n    }\n\n    return false;\n  };\n};","export const createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = createNativeAudioNode => {\n  return nativeContext => {\n    const nativeAudioBuffer = nativeContext.createBuffer(1, 1, 44100);\n    const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createBufferSource());\n    nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;\n    nativeAudioBufferSourceNode.start();\n    nativeAudioBufferSourceNode.stop();\n\n    try {\n      nativeAudioBufferSourceNode.stop();\n      return true;\n    } catch {\n      return false;\n    }\n  };\n};","export const createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport = createNativeAudioNode => {\n  return nativeContext => {\n    const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createOscillator());\n\n    try {\n      nativeAudioBufferSourceNode.stop(-1);\n    } catch (err) {\n      return err instanceof RangeError;\n    }\n\n    return false;\n  };\n};","/**\n * Chrome version 66 and 67 did not call the process() function of an AudioWorkletProcessor if it had no outputs. AudioWorklet support was\n * enabled by default in version 66.\n */\nexport const createTestAudioWorkletProcessorNoOutputsSupport = (nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) => {\n  return async () => {\n    // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.\n    if (nativeAudioWorkletNodeConstructor === null) {\n      return true;\n    }\n\n    if (nativeOfflineAudioContextConstructor === null) {\n      return false;\n    }\n\n    const blob = new Blob(['class A extends AudioWorkletProcessor{process(){this.port.postMessage(0)}}registerProcessor(\"a\",A)'], {\n      type: 'application/javascript; charset=utf-8'\n    });\n    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 3200);\n    const url = URL.createObjectURL(blob);\n    let isCallingProcess = false;\n\n    try {\n      await offlineAudioContext.audioWorklet.addModule(url);\n      const gainNode = offlineAudioContext.createGain();\n      const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', {\n        numberOfOutputs: 0\n      });\n\n      audioWorkletNode.port.onmessage = () => isCallingProcess = true;\n\n      gainNode.connect(audioWorkletNode);\n      await offlineAudioContext.startRendering();\n    } catch {// Ignore errors.\n    } finally {\n      URL.revokeObjectURL(url);\n    }\n\n    return isCallingProcess;\n  };\n};","/**\n * Firefox up to version 69 did not throw an error when setting a different channelCount or channelCountMode.\n */\nexport const createTestChannelMergerNodeChannelCountSupport = (createNativeAudioNode, nativeOfflineAudioContextConstructor) => {\n  return () => {\n    if (nativeOfflineAudioContextConstructor === null) {\n      return false;\n    }\n\n    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n    const nativeChannelMergerNode = createNativeAudioNode(offlineAudioContext, ntvCntxt => ntvCntxt.createChannelMerger());\n\n    try {\n      nativeChannelMergerNode.channelCount = 2;\n    } catch {\n      return true;\n    }\n\n    return false;\n  };\n};","export const createTestConstantSourceNodeAccurateSchedulingSupport = (createNativeAudioNode, nativeOfflineAudioContextConstructor) => {\n  return () => {\n    if (nativeOfflineAudioContextConstructor === null) {\n      return false;\n    }\n\n    const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100); // Bug #62: Edge & Safari do not support ConstantSourceNodes.\n\n    if (nativeOfflineAudioContext.createConstantSource === undefined) {\n      return true;\n    }\n\n    const nativeConstantSourceNode = createNativeAudioNode(nativeOfflineAudioContext, ntvCntxt => ntvCntxt.createConstantSource());\n    /*\n     * @todo This is using bug #75 to detect bug #70. That works because both bugs were unique to\n     * the implementation of Firefox right now, but it could probably be done in a better way.\n     */\n\n    return nativeConstantSourceNode.offset.maxValue !== Number.POSITIVE_INFINITY;\n  };\n};","// Opera up to version 57 did not allow to reassign the buffer of a ConvolverNode.\nexport const createTestConvolverNodeBufferReassignabilitySupport = nativeOfflineAudioContextConstructor => {\n  return () => {\n    if (nativeOfflineAudioContextConstructor === null) {\n      return false;\n    }\n\n    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n    const nativeConvolverNode = offlineAudioContext.createConvolver();\n    nativeConvolverNode.buffer = offlineAudioContext.createBuffer(1, 1, offlineAudioContext.sampleRate);\n\n    try {\n      nativeConvolverNode.buffer = offlineAudioContext.createBuffer(1, 1, offlineAudioContext.sampleRate);\n    } catch {\n      return false;\n    }\n\n    return true;\n  };\n};","export const createTestIsSecureContextSupport = window => {\n  return () => window !== null && window.hasOwnProperty('isSecureContext');\n};","// Firefox up to version 68 did not throw an error when creating a MediaStreamAudioSourceNode with a mediaStream that had no audio track.\nexport const createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport = nativeAudioContextConstructor => {\n  return () => {\n    if (nativeAudioContextConstructor === null) {\n      return false;\n    }\n\n    const audioContext = new nativeAudioContextConstructor();\n\n    try {\n      audioContext.createMediaStreamSource(new MediaStream());\n      return false;\n    } catch (err) {\n      return true;\n    }\n  };\n};","export const createTestOfflineAudioContextCurrentTimeSupport = (createNativeGainNode, nativeOfflineAudioContextConstructor) => {\n  return () => {\n    if (nativeOfflineAudioContextConstructor === null) {\n      return Promise.resolve(false);\n    }\n\n    const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100); // Bug #48: Safari does not render an OfflineAudioContext without any connected node.\n\n    const gainNode = createNativeGainNode(nativeOfflineAudioContext, {\n      channelCount: 1,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete',\n      gain: 0\n    }); // Bug #21: Safari does not support promises yet.\n\n    return new Promise(resolve => {\n      nativeOfflineAudioContext.oncomplete = () => {\n        gainNode.disconnect();\n        resolve(nativeOfflineAudioContext.currentTime !== 0);\n      };\n\n      nativeOfflineAudioContext.startRendering();\n    });\n  };\n};","/**\n * Firefox up to version 62 did not kick off the processing of the StereoPannerNode if the value of pan was zero.\n */\nexport const createTestStereoPannerNodeDefaultValueSupport = nativeOfflineAudioContextConstructor => {\n  return () => {\n    if (nativeOfflineAudioContextConstructor === null) {\n      return Promise.resolve(false);\n    }\n\n    const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n    /*\n     * Bug #105: Safari does not support the StereoPannerNode. Therefore the returned value should normally be false but the faker does\n     * support the tested behaviour.\n     */\n\n    if (nativeOfflineAudioContext.createStereoPanner === undefined) {\n      return Promise.resolve(true);\n    } // Bug #62: Edge & Safari do not support ConstantSourceNodes.\n\n\n    if (nativeOfflineAudioContext.createConstantSource === undefined) {\n      return Promise.resolve(true);\n    }\n\n    const constantSourceNode = nativeOfflineAudioContext.createConstantSource();\n    const stereoPanner = nativeOfflineAudioContext.createStereoPanner();\n    constantSourceNode.channelCount = 1;\n    constantSourceNode.offset.value = 1;\n    stereoPanner.channelCount = 1;\n    constantSourceNode.start();\n    constantSourceNode.connect(stereoPanner).connect(nativeOfflineAudioContext.destination);\n    return nativeOfflineAudioContext.startRendering().then(buffer => buffer.getChannelData(0)[0] !== 1);\n  };\n};","const DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  curve: null,\n  oversample: 'none'\n};\nexport const createWaveShaperNodeConstructor = (audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext) => {\n  return class WaveShaperNode extends audioNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeWaveShaperNode = createNativeWaveShaperNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const waveShaperNodeRenderer = isOffline ? createWaveShaperNodeRenderer() : null; // @todo Add a mechanism to only switch a WaveShaperNode to active while it is connected.\n\n      super(context, true, nativeWaveShaperNode, waveShaperNodeRenderer);\n      this._isCurveNullified = false;\n      this._nativeWaveShaperNode = nativeWaveShaperNode;\n    }\n\n    get curve() {\n      if (this._isCurveNullified) {\n        return null;\n      }\n\n      return this._nativeWaveShaperNode.curve;\n    }\n\n    set curve(value) {\n      // Bug #103: Safari does not allow to set the curve to null.\n      if (value === null) {\n        this._isCurveNullified = true;\n        this._nativeWaveShaperNode.curve = new Float32Array([0, 0]);\n      } else {\n        // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n        // Bug #104: Chrome will throw an InvalidAccessError when the curve has less than two samples.\n        if (value.length < 2) {\n          throw createInvalidStateError();\n        }\n\n        this._isCurveNullified = false;\n        this._nativeWaveShaperNode.curve = value;\n      }\n    }\n\n    get oversample() {\n      return this._nativeWaveShaperNode.oversample;\n    }\n\n    set oversample(value) {\n      this._nativeWaveShaperNode.oversample = value;\n    }\n\n  };\n};","import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createWaveShaperNodeRendererFactory = (createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeWaveShaperNodes = new WeakMap();\n\n    const createWaveShaperNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeWaveShaperNode = getNativeAudioNode(proxy); // If the initially used nativeWaveShaperNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeWaveShaperNodeIsOwnedByContext = isOwnedByContext(nativeWaveShaperNode, nativeOfflineAudioContext);\n\n      if (!nativeWaveShaperNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeWaveShaperNode.channelCount,\n          channelCountMode: nativeWaveShaperNode.channelCountMode,\n          channelInterpretation: nativeWaveShaperNode.channelInterpretation,\n          curve: nativeWaveShaperNode.curve,\n          oversample: nativeWaveShaperNode.oversample\n        };\n        nativeWaveShaperNode = createNativeWaveShaperNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeWaveShaperNodes.set(nativeOfflineAudioContext, nativeWaveShaperNode);\n\n      if (isNativeAudioNodeFaker(nativeWaveShaperNode)) {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode.inputs[0], trace);\n      } else {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode, trace);\n      }\n\n      return nativeWaveShaperNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeWaveShaperNode = renderedNativeWaveShaperNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeWaveShaperNode !== undefined) {\n          return Promise.resolve(renderedNativeWaveShaperNode);\n        }\n\n        return createWaveShaperNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","export const createWindow = () => typeof window === 'undefined' ? null : window;","export const createWrapAudioBufferCopyChannelMethods = (convertNumberToUnsignedLong, createIndexSizeError) => {\n  return audioBuffer => {\n    audioBuffer.copyFromChannel = (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n      const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n      const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n\n      if (channelNumber >= audioBuffer.numberOfChannels) {\n        throw createIndexSizeError();\n      }\n\n      const audioBufferLength = audioBuffer.length;\n      const channelData = audioBuffer.getChannelData(channelNumber);\n      const destinationLength = destination.length;\n\n      for (let i = bufferOffset < 0 ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < destinationLength; i += 1) {\n        destination[i] = channelData[i + bufferOffset];\n      }\n    };\n\n    audioBuffer.copyToChannel = (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n      const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n      const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n\n      if (channelNumber >= audioBuffer.numberOfChannels) {\n        throw createIndexSizeError();\n      }\n\n      const audioBufferLength = audioBuffer.length;\n      const channelData = audioBuffer.getChannelData(channelNumber);\n      const sourceLength = source.length;\n\n      for (let i = bufferOffset < 0 ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < sourceLength; i += 1) {\n        channelData[i + bufferOffset] = source[i];\n      }\n    };\n  };\n};","export const createWrapAudioBufferCopyChannelMethodsOutOfBounds = convertNumberToUnsignedLong => {\n  return audioBuffer => {\n    audioBuffer.copyFromChannel = (copyFromChannel => {\n      return (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n        const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n        const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n\n        if (bufferOffset < audioBuffer.length) {\n          return copyFromChannel.call(audioBuffer, destination, channelNumber, bufferOffset);\n        }\n      };\n    })(audioBuffer.copyFromChannel);\n\n    audioBuffer.copyToChannel = (copyToChannel => {\n      return (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n        const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n        const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n\n        if (bufferOffset < audioBuffer.length) {\n          return copyToChannel.call(audioBuffer, source, channelNumber, bufferOffset);\n        }\n      };\n    })(audioBuffer.copyToChannel);\n  };\n};","export const createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer = overwriteAccessors => {\n  return (nativeAudioBufferSourceNode, nativeContext) => {\n    const nullifiedBuffer = nativeContext.createBuffer(1, 1, nativeContext.sampleRate);\n\n    if (nativeAudioBufferSourceNode.buffer === null) {\n      nativeAudioBufferSourceNode.buffer = nullifiedBuffer;\n    }\n\n    overwriteAccessors(nativeAudioBufferSourceNode, 'buffer', get => () => {\n      const value = get.call(nativeAudioBufferSourceNode);\n      return value === nullifiedBuffer ? null : value;\n    }, set => value => {\n      return set.call(nativeAudioBufferSourceNode, value === null ? nullifiedBuffer : value);\n    });\n  };\n};","import { interceptConnections } from '../helpers/intercept-connections';\nexport const createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = createNativeAudioNode => {\n  return (nativeAudioScheduledSourceNode, nativeContext) => {\n    const nativeGainNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createGain());\n    nativeAudioScheduledSourceNode.connect(nativeGainNode);\n\n    const disconnectGainNode = (disconnect => {\n      return () => {\n        // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.\n        disconnect.call(nativeAudioScheduledSourceNode, nativeGainNode);\n        nativeAudioScheduledSourceNode.removeEventListener('ended', disconnectGainNode);\n      };\n    })(nativeAudioScheduledSourceNode.disconnect);\n\n    nativeAudioScheduledSourceNode.addEventListener('ended', disconnectGainNode);\n    interceptConnections(nativeAudioScheduledSourceNode, nativeGainNode);\n\n    nativeAudioScheduledSourceNode.stop = (stop => {\n      let isStopped = false;\n      return (when = 0) => {\n        if (isStopped) {\n          try {\n            stop.call(nativeAudioScheduledSourceNode, when);\n          } catch {\n            nativeGainNode.gain.setValueAtTime(0, when);\n          }\n        } else {\n          stop.call(nativeAudioScheduledSourceNode, when);\n          isStopped = true;\n        }\n      };\n    })(nativeAudioScheduledSourceNode.stop);\n  };\n};","export const createWrapChannelMergerNode = (createInvalidStateError, createNativeAudioNode, monitorConnectionsFunction) => {\n  return (nativeContext, channelMergerNode) => {\n    channelMergerNode.channelCount = 1;\n    channelMergerNode.channelCountMode = 'explicit';\n    Object.defineProperty(channelMergerNode, 'channelCount', {\n      get: () => 1,\n      set: () => {\n        throw createInvalidStateError();\n      }\n    });\n    Object.defineProperty(channelMergerNode, 'channelCountMode', {\n      get: () => 'explicit',\n      set: () => {\n        throw createInvalidStateError();\n      }\n    }); // Bug #20: Safari requires a connection of any kind to treat the input signal correctly.\n\n    const audioBufferSourceNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createBufferSource());\n\n    const whenConnected = () => {\n      const length = channelMergerNode.numberOfInputs;\n\n      for (let i = 0; i < length; i += 1) {\n        audioBufferSourceNode.connect(channelMergerNode, 0, i);\n      }\n    };\n\n    const whenDisconnected = () => audioBufferSourceNode.disconnect(channelMergerNode);\n\n    monitorConnectionsFunction(channelMergerNode, whenConnected, whenDisconnected);\n  };\n};","// Safari at version 11 did not support transferables.\nexport const testTransferablesSupport = () => new Promise(resolve => {\n  const arrayBuffer = new ArrayBuffer(0);\n  const {\n    port1,\n    port2\n  } = new MessageChannel();\n\n  port1.onmessage = ({\n    data\n  }) => resolve(data !== null);\n\n  port2.postMessage(arrayBuffer, [arrayBuffer]);\n});","export const wrapAudioBufferSourceNodeStartMethodOffsetClamping = nativeAudioBufferSourceNode => {\n  nativeAudioBufferSourceNode.start = (start => {\n    return (when = 0, offset = 0, duration) => {\n      const buffer = nativeAudioBufferSourceNode.buffer; // Bug #154: Safari does not clamp the offset if it is equal to or greater than the duration of the buffer.\n\n      const clampedOffset = buffer === null ? offset : Math.min(buffer.duration, offset); // Bug #155: Safari does not handle the offset correctly if it would cause the buffer to be not be played at all.\n\n      if (buffer !== null && clampedOffset > buffer.duration - 0.5 / nativeAudioBufferSourceNode.context.sampleRate) {\n        start.call(nativeAudioBufferSourceNode, when, 0, 0);\n      } else {\n        start.call(nativeAudioBufferSourceNode, when, clampedOffset, duration);\n      }\n    };\n  })(nativeAudioBufferSourceNode.start);\n};","export const isAudioWorkletNode = audioNode => {\n  return 'port' in audioNode;\n};","import { getEventListenersOfAudioNode } from './get-event-listeners-of-audio-node';\nexport const deleteEventListenerOfAudioNode = (audioNode, eventListener) => {\n  const eventListeners = getEventListenersOfAudioNode(audioNode);\n\n  if (!eventListeners.delete(eventListener)) {\n    throw new Error('Missing the expected event listener.');\n  }\n};","import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nexport const isPassiveAudioNode = audioNode => {\n  return !ACTIVE_AUDIO_NODE_STORE.has(audioNode);\n};","export const pickElementFromSet = (set, predicate) => {\n  const matchingElements = Array.from(set).filter(predicate);\n\n  if (matchingElements.length > 1) {\n    throw Error('More than one element was found.');\n  }\n\n  if (matchingElements.length === 0) {\n    throw Error('No element was found.');\n  }\n\n  const [matchingElement] = matchingElements;\n  set.delete(matchingElement);\n  return matchingElement;\n};","import { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { setInternalStateToPassive } from './set-internal-state-to-passive'; // Set the internalState of the audioNode to 'passive' if it is not an AudioWorkletNode and if it has no 'active' input connections.\n\nexport const setInternalStateToPassiveWhenNecessary = (audioNode, activeInputs) => {\n  if (!isAudioWorkletNode(audioNode) && activeInputs.every(connections => connections.size === 0)) {\n    setInternalStateToPassive(audioNode);\n  }\n};","export const testAudioNodeDisconnectMethodSupport = nativeAudioContext => {\n  return new Promise(resolve => {\n    const analyzer = nativeAudioContext.createScriptProcessor(256, 1, 1);\n    const dummy = nativeAudioContext.createGain(); // Bug #95: Safari does not play one sample buffers.\n\n    const ones = nativeAudioContext.createBuffer(1, 2, 44100);\n    const channelData = ones.getChannelData(0);\n    channelData[0] = 1;\n    channelData[1] = 1;\n    const source = nativeAudioContext.createBufferSource();\n    source.buffer = ones;\n    source.loop = true;\n    source.connect(analyzer).connect(nativeAudioContext.destination);\n    source.connect(dummy);\n    source.disconnect(dummy);\n\n    analyzer.onaudioprocess = event => {\n      const chnnlDt = event.inputBuffer.getChannelData(0);\n\n      if (Array.prototype.some.call(chnnlDt, sample => sample === 1)) {\n        resolve(true);\n      } else {\n        resolve(false);\n      }\n\n      source.stop();\n      analyzer.onaudioprocess = null; // tslint:disable-line:deprecation\n\n      source.disconnect(analyzer);\n      analyzer.disconnect(nativeAudioContext.destination);\n    };\n\n    source.start();\n  });\n};","export const visitEachAudioNodeOnce = (cycles, visitor) => {\n  const counts = new Map();\n\n  for (const cycle of cycles) {\n    for (const audioNode of cycle) {\n      const count = counts.get(audioNode);\n      counts.set(audioNode, count === undefined ? 1 : count + 1);\n    }\n  }\n\n  counts.forEach((count, audioNode) => visitor(audioNode, count));\n};","import { isNativeAudioNode } from '../guards/native-audio-node';\nexport const wrapAudioNodeDisconnectMethod = nativeAudioNode => {\n  const connections = new Map();\n\n  nativeAudioNode.connect = (connect => {\n    return (destination, output = 0, input = 0) => {\n      const returnValue = isNativeAudioNode(destination) ? connect(destination, output, input) : connect(destination, output); // Save the new connection only if the calls to connect above didn't throw an error.\n\n      const connectionsToDestination = connections.get(destination);\n\n      if (connectionsToDestination === undefined) {\n        connections.set(destination, [{\n          input,\n          output\n        }]);\n      } else {\n        if (connectionsToDestination.every(connection => connection.input !== input || connection.output !== output)) {\n          connectionsToDestination.push({\n            input,\n            output\n          });\n        }\n      }\n\n      return returnValue;\n    };\n  })(nativeAudioNode.connect.bind(nativeAudioNode));\n\n  nativeAudioNode.disconnect = (disconnect => {\n    return (destinationOrOutput, output, input) => {\n      disconnect.apply(nativeAudioNode);\n\n      if (destinationOrOutput === undefined) {\n        connections.clear();\n      } else if (typeof destinationOrOutput === 'number') {\n        for (const [destination, connectionsToDestination] of connections) {\n          const filteredConnections = connectionsToDestination.filter(connection => connection.output !== destinationOrOutput);\n\n          if (filteredConnections.length === 0) {\n            connections.delete(destination);\n          } else {\n            connections.set(destination, filteredConnections);\n          }\n        }\n      } else if (connections.has(destinationOrOutput)) {\n        if (output === undefined) {\n          connections.delete(destinationOrOutput);\n        } else {\n          const connectionsToDestination = connections.get(destinationOrOutput);\n\n          if (connectionsToDestination !== undefined) {\n            const filteredConnections = connectionsToDestination.filter(connection => connection.output !== output && (connection.input !== input || input === undefined));\n\n            if (filteredConnections.length === 0) {\n              connections.delete(destinationOrOutput);\n            } else {\n              connections.set(destinationOrOutput, filteredConnections);\n            }\n          }\n        }\n      }\n\n      for (const [destination, connectionsToDestination] of connections) {\n        connectionsToDestination.forEach(connection => {\n          if (isNativeAudioNode(destination)) {\n            nativeAudioNode.connect(destination, connection.output, connection.input);\n          } else {\n            nativeAudioNode.connect(destination, connection.output);\n          }\n        });\n      }\n    };\n  })(nativeAudioNode.disconnect);\n};","import { AUDIO_NODE_STORE, EVENT_LISTENERS } from '../globals';\nimport { isAudioNode } from '../guards/audio-node';\nimport { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nimport { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { connectNativeAudioNodeToNativeAudioNode } from '../helpers/connect-native-audio-node-to-native-audio-node';\nimport { deleteEventListenerOfAudioNode } from '../helpers/delete-event-listeners-of-audio-node';\nimport { disconnectNativeAudioNodeFromNativeAudioNode } from '../helpers/disconnect-native-audio-node-from-native-audio-node';\nimport { getAudioNodeConnections } from '../helpers/get-audio-node-connections';\nimport { getAudioParamConnections } from '../helpers/get-audio-param-connections';\nimport { getEventListenersOfAudioNode } from '../helpers/get-event-listeners-of-audio-node';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { getNativeAudioParam } from '../helpers/get-native-audio-param';\nimport { getValueForKey } from '../helpers/get-value-for-key';\nimport { insertElementInSet } from '../helpers/insert-element-in-set';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { isPartOfACycle } from '../helpers/is-part-of-a-cycle';\nimport { isPassiveAudioNode } from '../helpers/is-passive-audio-node';\nimport { pickElementFromSet } from '../helpers/pick-element-from-set';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassiveWhenNecessary } from '../helpers/set-internal-state-to-passive-when-necessary';\nimport { testAudioNodeDisconnectMethodSupport } from '../helpers/test-audio-node-disconnect-method-support';\nimport { visitEachAudioNodeOnce } from '../helpers/visit-each-audio-node-once';\nimport { wrapAudioNodeDisconnectMethod } from '../helpers/wrap-audio-node-disconnect-method';\n\nconst addActiveInputConnectionToAudioNode = (activeInputs, source, [output, input, eventListener], ignoreDuplicates) => {\n  insertElementInSet(activeInputs[input], [source, output, eventListener], activeInputConnection => activeInputConnection[0] === source && activeInputConnection[1] === output, ignoreDuplicates);\n};\n\nconst addActiveInputConnectionToAudioParam = (activeInputs, source, [output, eventListener], ignoreDuplicates) => {\n  insertElementInSet(activeInputs, [source, output, eventListener], activeInputConnection => activeInputConnection[0] === source && activeInputConnection[1] === output, ignoreDuplicates);\n};\n\nconst deleteActiveInputConnectionToAudioNode = (activeInputs, source, output, input) => {\n  return pickElementFromSet(activeInputs[input], activeInputConnection => activeInputConnection[0] === source && activeInputConnection[1] === output);\n};\n\nconst deleteActiveInputConnectionToAudioParam = (activeInputs, source, output) => {\n  return pickElementFromSet(activeInputs, activeInputConnection => activeInputConnection[0] === source && activeInputConnection[1] === output);\n};\n\nconst addPassiveInputConnectionToAudioNode = (passiveInputs, input, [source, output, eventListener], ignoreDuplicates) => {\n  const passiveInputConnections = passiveInputs.get(source);\n\n  if (passiveInputConnections === undefined) {\n    passiveInputs.set(source, new Set([[output, input, eventListener]]));\n  } else {\n    insertElementInSet(passiveInputConnections, [output, input, eventListener], passiveInputConnection => passiveInputConnection[0] === output && passiveInputConnection[1] === input, ignoreDuplicates);\n  }\n};\n\nconst addPassiveInputConnectionToAudioParam = (passiveInputs, [source, output, eventListener], ignoreDuplicates) => {\n  const passiveInputConnections = passiveInputs.get(source);\n\n  if (passiveInputConnections === undefined) {\n    passiveInputs.set(source, new Set([[output, eventListener]]));\n  } else {\n    insertElementInSet(passiveInputConnections, [output, eventListener], passiveInputConnection => passiveInputConnection[0] === output, ignoreDuplicates);\n  }\n};\n\nconst deletePassiveInputConnectionToAudioNode = (passiveInputs, source, output, input) => {\n  const passiveInputConnections = getValueForKey(passiveInputs, source);\n  const matchingConnection = pickElementFromSet(passiveInputConnections, passiveInputConnection => passiveInputConnection[0] === output && passiveInputConnection[1] === input);\n\n  if (passiveInputConnections.size === 0) {\n    passiveInputs.delete(source);\n  }\n\n  return matchingConnection;\n};\n\nconst deletePassiveInputConnectionToAudioParam = (passiveInputs, source, output) => {\n  const passiveInputConnections = getValueForKey(passiveInputs, source);\n  const matchingConnection = pickElementFromSet(passiveInputConnections, passiveInputConnection => passiveInputConnection[0] === output);\n\n  if (passiveInputConnections.size === 0) {\n    passiveInputs.delete(source);\n  }\n\n  return matchingConnection;\n};\n\nconst addConnectionToAudioNodeOfAudioContext = (source, destination, output, input) => {\n  const {\n    activeInputs,\n    passiveInputs\n  } = getAudioNodeConnections(destination);\n  const {\n    outputs\n  } = getAudioNodeConnections(source);\n  const eventListeners = getEventListenersOfAudioNode(source);\n\n  const eventListener = isActive => {\n    const nativeDestinationAudioNode = getNativeAudioNode(destination);\n    const nativeSourceAudioNode = getNativeAudioNode(source);\n\n    if (isActive) {\n      const partialConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n      addActiveInputConnectionToAudioNode(activeInputs, source, partialConnection, false);\n\n      if (!isPartOfACycle(source)) {\n        connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n      }\n\n      if (isPassiveAudioNode(destination)) {\n        setInternalStateToActive(destination);\n      }\n    } else {\n      const partialConnection = deleteActiveInputConnectionToAudioNode(activeInputs, source, output, input);\n      addPassiveInputConnectionToAudioNode(passiveInputs, input, partialConnection, false);\n\n      if (!isPartOfACycle(source)) {\n        disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n      }\n\n      if (isActiveAudioNode(destination)) {\n        setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n      }\n    }\n  };\n\n  if (insertElementInSet(outputs, [destination, output, input], outputConnection => outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input, true)) {\n    eventListeners.add(eventListener);\n\n    if (isActiveAudioNode(source)) {\n      addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, eventListener], true);\n    } else {\n      addPassiveInputConnectionToAudioNode(passiveInputs, input, [source, output, eventListener], true);\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nconst addConnectionToAudioNodeOfOfflineAudioContext = (source, destination, output, input) => {\n  const {\n    outputs\n  } = getAudioNodeConnections(source);\n\n  if (insertElementInSet(outputs, [destination, output, input], outputConnection => outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input, true)) {\n    const {\n      activeInputs\n    } = getAudioNodeConnections(destination);\n    addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, null], true);\n    return true;\n  }\n\n  return false;\n};\n\nconst addConnectionToAudioParamOfAudioContext = (source, destination, output) => {\n  const {\n    activeInputs,\n    passiveInputs\n  } = getAudioParamConnections(destination);\n  const {\n    outputs\n  } = getAudioNodeConnections(source);\n  const eventListeners = getEventListenersOfAudioNode(source);\n\n  const eventListener = isActive => {\n    const nativeAudioNode = getNativeAudioNode(source);\n    const nativeAudioParam = getNativeAudioParam(destination);\n\n    if (isActive) {\n      const partialConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);\n      addActiveInputConnectionToAudioParam(activeInputs, source, partialConnection, false);\n\n      if (!isPartOfACycle(source)) {\n        nativeAudioNode.connect(nativeAudioParam, output);\n      }\n    } else {\n      const partialConnection = deleteActiveInputConnectionToAudioParam(activeInputs, source, output);\n      addPassiveInputConnectionToAudioParam(passiveInputs, partialConnection, false);\n\n      if (!isPartOfACycle(source)) {\n        nativeAudioNode.disconnect(nativeAudioParam, output);\n      }\n    }\n  };\n\n  if (insertElementInSet(outputs, [destination, output], outputConnection => outputConnection[0] === destination && outputConnection[1] === output, true)) {\n    eventListeners.add(eventListener);\n\n    if (isActiveAudioNode(source)) {\n      addActiveInputConnectionToAudioParam(activeInputs, source, [output, eventListener], true);\n    } else {\n      addPassiveInputConnectionToAudioParam(passiveInputs, [source, output, eventListener], true);\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nconst addConnectionToAudioParamOfOfflineAudioContext = (source, destination, output) => {\n  const {\n    outputs\n  } = getAudioNodeConnections(source);\n\n  if (insertElementInSet(outputs, [destination, output], outputConnection => outputConnection[0] === destination && outputConnection[1] === output, true)) {\n    const {\n      activeInputs\n    } = getAudioParamConnections(destination);\n    addActiveInputConnectionToAudioParam(activeInputs, source, [output, null], true);\n    return true;\n  }\n\n  return false;\n};\n\nconst deleteActiveInputConnection = (activeInputConnections, source, output) => {\n  for (const activeInputConnection of activeInputConnections) {\n    if (activeInputConnection[0] === source && activeInputConnection[1] === output) {\n      activeInputConnections.delete(activeInputConnection);\n      return activeInputConnection;\n    }\n  }\n\n  return null;\n};\n\nconst deleteInputConnectionOfAudioNode = (source, destination, output, input) => {\n  const {\n    activeInputs,\n    passiveInputs\n  } = getAudioNodeConnections(destination);\n  const activeInputConnection = deleteActiveInputConnection(activeInputs[input], source, output);\n\n  if (activeInputConnection === null) {\n    const passiveInputConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n    return [passiveInputConnection[2], false];\n  }\n\n  return [activeInputConnection[2], true];\n};\n\nconst deleteInputConnectionOfAudioParam = (source, destination, output) => {\n  const {\n    activeInputs,\n    passiveInputs\n  } = getAudioParamConnections(destination);\n  const activeInputConnection = deleteActiveInputConnection(activeInputs, source, output);\n\n  if (activeInputConnection === null) {\n    const passiveInputConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);\n    return [passiveInputConnection[1], false];\n  }\n\n  return [activeInputConnection[2], true];\n};\n\nconst deleteInputsOfAudioNode = (source, destination, output, input) => {\n  const [listener, isActive] = deleteInputConnectionOfAudioNode(source, destination, output, input);\n\n  if (listener !== null) {\n    deleteEventListenerOfAudioNode(source, listener);\n\n    if (isActive && !isPartOfACycle(source)) {\n      disconnectNativeAudioNodeFromNativeAudioNode(getNativeAudioNode(source), getNativeAudioNode(destination), output, input);\n    }\n  }\n\n  if (isActiveAudioNode(destination)) {\n    const {\n      activeInputs\n    } = getAudioNodeConnections(destination);\n    setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n  }\n};\n\nconst deleteInputsOfAudioParam = (source, destination, output) => {\n  const [listener, isActive] = deleteInputConnectionOfAudioParam(source, destination, output);\n\n  if (listener !== null) {\n    deleteEventListenerOfAudioNode(source, listener);\n\n    if (isActive && !isPartOfACycle(source)) {\n      getNativeAudioNode(source).disconnect(getNativeAudioParam(destination), output);\n    }\n  }\n};\n\nconst deleteAnyConnection = source => {\n  const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n  const destinations = [];\n\n  for (const outputConnection of audioNodeConnectionsOfSource.outputs) {\n    if (isAudioNodeOutputConnection(outputConnection)) {\n      deleteInputsOfAudioNode(source, ...outputConnection);\n    } else {\n      deleteInputsOfAudioParam(source, ...outputConnection);\n    }\n\n    destinations.push(outputConnection[0]);\n  }\n\n  audioNodeConnectionsOfSource.outputs.clear();\n  return destinations;\n};\n\nconst deleteConnectionAtOutput = (source, output) => {\n  const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n  const destinations = [];\n\n  for (const outputConnection of audioNodeConnectionsOfSource.outputs) {\n    if (outputConnection[1] === output) {\n      if (isAudioNodeOutputConnection(outputConnection)) {\n        deleteInputsOfAudioNode(source, ...outputConnection);\n      } else {\n        deleteInputsOfAudioParam(source, ...outputConnection);\n      }\n\n      destinations.push(outputConnection[0]);\n      audioNodeConnectionsOfSource.outputs.delete(outputConnection);\n    }\n  }\n\n  return destinations;\n};\n\nconst deleteConnectionToDestination = (source, destination, output, input) => {\n  const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n  return Array.from(audioNodeConnectionsOfSource.outputs).filter(outputConnection => outputConnection[0] === destination && (output === undefined || outputConnection[1] === output) && (input === undefined || outputConnection[2] === input)).map(outputConnection => {\n    if (isAudioNodeOutputConnection(outputConnection)) {\n      deleteInputsOfAudioNode(source, ...outputConnection);\n    } else {\n      deleteInputsOfAudioParam(source, ...outputConnection);\n    }\n\n    audioNodeConnectionsOfSource.outputs.delete(outputConnection);\n    return outputConnection[0];\n  });\n};\n\nexport const createAudioNodeConstructor = (addAudioNodeConnections, auxiliaryGainNodeStore, cacheTestResult, createIncrementCycleCounter, createIndexSizeError, createInvalidAccessError, createNotSupportedError, decrementCycleCounter, detectCycles, eventTargetConstructor, getNativeContext, isNativeAudioContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext) => {\n  return class AudioNode extends eventTargetConstructor {\n    constructor(context, isActive, nativeAudioNode, audioNodeRenderer) {\n      super(nativeAudioNode);\n      this._context = context;\n      this._nativeAudioNode = nativeAudioNode;\n      const nativeContext = getNativeContext(context); // Bug #12: Safari does not support to disconnect a specific destination.\n\n      if (isNativeAudioContext(nativeContext) && true !== cacheTestResult(testAudioNodeDisconnectMethodSupport, () => {\n        return testAudioNodeDisconnectMethodSupport(nativeContext);\n      })) {\n        wrapAudioNodeDisconnectMethod(nativeAudioNode);\n      }\n\n      AUDIO_NODE_STORE.set(this, nativeAudioNode);\n      EVENT_LISTENERS.set(this, new Set());\n\n      if (isActive) {\n        setInternalStateToActive(this);\n      }\n\n      addAudioNodeConnections(this, audioNodeRenderer, nativeAudioNode);\n    }\n\n    get channelCount() {\n      return this._nativeAudioNode.channelCount;\n    }\n\n    set channelCount(value) {\n      this._nativeAudioNode.channelCount = value;\n    }\n\n    get channelCountMode() {\n      return this._nativeAudioNode.channelCountMode;\n    }\n\n    set channelCountMode(value) {\n      this._nativeAudioNode.channelCountMode = value;\n    }\n\n    get channelInterpretation() {\n      return this._nativeAudioNode.channelInterpretation;\n    }\n\n    set channelInterpretation(value) {\n      this._nativeAudioNode.channelInterpretation = value;\n    }\n\n    get context() {\n      return this._context;\n    }\n\n    get numberOfInputs() {\n      return this._nativeAudioNode.numberOfInputs;\n    }\n\n    get numberOfOutputs() {\n      return this._nativeAudioNode.numberOfOutputs;\n    }\n\n    connect(destination, output = 0, input = 0) {\n      // Bug #174: Safari does expose a wrong numberOfOutputs for MediaStreamAudioDestinationNodes.\n      if (output < 0 || output >= this._nativeAudioNode.numberOfOutputs) {\n        throw createIndexSizeError();\n      }\n\n      const nativeContext = getNativeContext(this._context);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n\n      if (isNativeAudioNode(destination) || isNativeAudioParam(destination)) {\n        throw createInvalidAccessError();\n      }\n\n      if (isAudioNode(destination)) {\n        const nativeDestinationAudioNode = getNativeAudioNode(destination);\n\n        try {\n          const connection = connectNativeAudioNodeToNativeAudioNode(this._nativeAudioNode, nativeDestinationAudioNode, output, input);\n\n          if (isOffline || isPassiveAudioNode(this)) {\n            this._nativeAudioNode.disconnect(...connection);\n          } else if (isPassiveAudioNode(destination)) {\n            setInternalStateToActive(destination);\n          } // An AudioWorklet needs a connection because it otherwise may truncate the input array.\n          // @todo Count the number of connections which depend on this auxiliary GainNode to know when it can be removed again.\n\n\n          if (isAudioWorkletNode(destination)) {\n            const auxiliaryGainNodes = auxiliaryGainNodeStore.get(nativeDestinationAudioNode);\n\n            if (auxiliaryGainNodes === undefined) {\n              const nativeGainNode = nativeContext.createGain();\n              nativeGainNode.connect(connection[0], 0, connection[2]);\n              auxiliaryGainNodeStore.set(nativeDestinationAudioNode, new Map([[input, nativeGainNode]]));\n            } else if (auxiliaryGainNodes.get(input) === undefined) {\n              const nativeGainNode = nativeContext.createGain();\n              nativeGainNode.connect(connection[0], 0, connection[2]);\n              auxiliaryGainNodes.set(input, nativeGainNode);\n            }\n          }\n        } catch (err) {\n          // Bug #41: Only Chrome, Firefox and Opera throw the correct exception by now.\n          if (err.code === 12) {\n            throw createInvalidAccessError();\n          }\n\n          throw err;\n        }\n\n        const isNewConnectionToAudioNode = isOffline ? addConnectionToAudioNodeOfOfflineAudioContext(this, destination, output, input) : addConnectionToAudioNodeOfAudioContext(this, destination, output, input); // Bug #164: Only Firefox detects cycles so far.\n\n        if (isNewConnectionToAudioNode) {\n          const cycles = detectCycles([this], destination);\n          visitEachAudioNodeOnce(cycles, createIncrementCycleCounter(isOffline));\n        }\n\n        return destination;\n      }\n\n      const nativeAudioParam = getNativeAudioParam(destination);\n      /*\n       * Bug #147 & #153: Safari does not support to connect an input signal to the playbackRate AudioParam of an\n       * AudioBufferSourceNode. This can't be easily detected and that's why the outdated name property is used here to identify\n       * Safari.\n       */\n\n      if (nativeAudioParam.name === 'playbackRate') {\n        throw createNotSupportedError();\n      }\n\n      try {\n        this._nativeAudioNode.connect(nativeAudioParam, output);\n\n        if (isOffline || isPassiveAudioNode(this)) {\n          this._nativeAudioNode.disconnect(nativeAudioParam, output);\n        }\n      } catch (err) {\n        // Bug #58: Only Firefox does throw an InvalidStateError yet.\n        if (err.code === 12) {\n          throw createInvalidAccessError();\n        }\n\n        throw err;\n      }\n\n      const isNewConnectionToAudioParam = isOffline ? addConnectionToAudioParamOfOfflineAudioContext(this, destination, output) : addConnectionToAudioParamOfAudioContext(this, destination, output); // Bug #164: Only Firefox detects cycles so far.\n\n      if (isNewConnectionToAudioParam) {\n        const cycles = detectCycles([this], destination);\n        visitEachAudioNodeOnce(cycles, createIncrementCycleCounter(isOffline));\n      }\n    }\n\n    disconnect(destinationOrOutput, output, input) {\n      let destinations;\n\n      if (destinationOrOutput === undefined) {\n        destinations = deleteAnyConnection(this);\n      } else if (typeof destinationOrOutput === 'number') {\n        if (destinationOrOutput < 0 || destinationOrOutput >= this.numberOfOutputs) {\n          throw createIndexSizeError();\n        }\n\n        destinations = deleteConnectionAtOutput(this, destinationOrOutput);\n      } else {\n        if (output !== undefined && (output < 0 || output >= this.numberOfOutputs)) {\n          throw createIndexSizeError();\n        }\n\n        if (isAudioNode(destinationOrOutput) && input !== undefined && (input < 0 || input >= destinationOrOutput.numberOfInputs)) {\n          throw createIndexSizeError();\n        }\n\n        destinations = deleteConnectionToDestination(this, destinationOrOutput, output, input);\n\n        if (destinations.length === 0) {\n          throw createInvalidAccessError();\n        }\n      } // Bug #164: Only Firefox detects cycles so far.\n\n\n      for (const destination of destinations) {\n        const cycles = detectCycles([this], destination);\n        visitEachAudioNodeOnce(cycles, decrementCycleCounter);\n      }\n    }\n\n  };\n};","export const cloneAudioWorkletNodeOptions = audioWorkletNodeOptions => {\n  return new Promise((resolve, reject) => {\n    const {\n      port1,\n      port2\n    } = new MessageChannel();\n\n    port1.onmessage = ({\n      data\n    }) => {\n      port1.close();\n      port2.close();\n      resolve(data);\n    };\n\n    port1.onmessageerror = ({\n      data\n    }) => {\n      port1.close();\n      port2.close();\n      reject(data);\n    }; // This will throw an error if the audioWorkletNodeOptions are not clonable.\n\n\n    port2.postMessage(audioWorkletNodeOptions);\n  });\n};","import { cloneAudioWorkletNodeOptions } from './clone-audio-worklet-node-options';\nexport const createAudioWorkletProcessorPromise = async (processorConstructor, audioWorkletNodeOptions) => {\n  const clonedAudioWorkletNodeOptions = await cloneAudioWorkletNodeOptions(audioWorkletNodeOptions);\n  return new processorConstructor(clonedAudioWorkletNodeOptions);\n};","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { copyFromChannel } from '../helpers/copy-from-channel';\nimport { copyToChannel } from '../helpers/copy-to-channel';\nimport { createAudioWorkletProcessor } from '../helpers/create-audio-worklet-processor';\nimport { createNestedArrays } from '../helpers/create-nested-arrays';\nimport { ReadOnlyMap } from '../read-only-map';\nexport const createNativeAudioWorkletNodeFakerFactory = (auxiliaryGainNodeStore, connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, monitorConnections) => {\n  return (nativeContext, baseLatency, processorConstructor, options) => {\n    if (options.numberOfInputs === 0 && options.numberOfOutputs === 0) {\n      throw createNotSupportedError();\n    }\n\n    if (options.outputChannelCount !== undefined) {\n      // @todo Check if any of the channelCount values is greater than the implementation's maximum number of channels.\n      if (options.outputChannelCount.some(channelCount => channelCount < 1)) {\n        throw createNotSupportedError();\n      }\n\n      if (options.outputChannelCount.length !== options.numberOfOutputs) {\n        throw createIndexSizeError();\n      }\n    } // Bug #61: This is not part of the standard but required for the faker to work.\n\n\n    if (options.channelCountMode !== 'explicit') {\n      throw createNotSupportedError();\n    }\n\n    const numberOfInputChannels = options.channelCount * options.numberOfInputs;\n    const numberOfOutputChannels = options.outputChannelCount.reduce((sum, value) => sum + value, 0);\n    const numberOfParameters = processorConstructor.parameterDescriptors === undefined ? 0 : processorConstructor.parameterDescriptors.length; // Bug #61: This is not part of the standard but required for the faker to work.\n\n    if (numberOfInputChannels + numberOfParameters > 6 || numberOfOutputChannels > 6) {\n      throw createNotSupportedError();\n    }\n\n    const messageChannel = new MessageChannel();\n    const gainNodes = [];\n    const inputChannelSplitterNodes = [];\n\n    for (let i = 0; i < options.numberOfInputs; i += 1) {\n      gainNodes.push(createNativeGainNode(nativeContext, {\n        channelCount: options.channelCount,\n        channelCountMode: options.channelCountMode,\n        channelInterpretation: options.channelInterpretation,\n        gain: 1\n      }));\n      inputChannelSplitterNodes.push(createNativeChannelSplitterNode(nativeContext, {\n        channelCount: options.channelCount,\n        channelCountMode: 'explicit',\n        channelInterpretation: 'discrete',\n        numberOfOutputs: options.channelCount\n      }));\n    }\n\n    const constantSourceNodes = [];\n\n    if (processorConstructor.parameterDescriptors !== undefined) {\n      for (const {\n        defaultValue,\n        maxValue,\n        minValue,\n        name\n      } of processorConstructor.parameterDescriptors) {\n        const constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n          channelCount: 1,\n          channelCountMode: 'explicit',\n          channelInterpretation: 'discrete',\n          offset: options.parameterData[name] !== undefined ? options.parameterData[name] : defaultValue === undefined ? 0 : defaultValue\n        });\n        Object.defineProperties(constantSourceNode.offset, {\n          defaultValue: {\n            get: () => defaultValue === undefined ? 0 : defaultValue\n          },\n          maxValue: {\n            get: () => maxValue === undefined ? MOST_POSITIVE_SINGLE_FLOAT : maxValue\n          },\n          minValue: {\n            get: () => minValue === undefined ? MOST_NEGATIVE_SINGLE_FLOAT : minValue\n          }\n        });\n        constantSourceNodes.push(constantSourceNode);\n      }\n    }\n\n    const inputChannelMergerNode = createNativeChannelMergerNode(nativeContext, {\n      channelCount: 1,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'speakers',\n      numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)\n    });\n    const bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n    const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, numberOfInputChannels + numberOfParameters, // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.\n    Math.max(1, numberOfOutputChannels));\n    const outputChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n      channelCount: Math.max(1, numberOfOutputChannels),\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete',\n      numberOfOutputs: Math.max(1, numberOfOutputChannels)\n    });\n    const outputChannelMergerNodes = [];\n\n    for (let i = 0; i < options.numberOfOutputs; i += 1) {\n      outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeContext, {\n        channelCount: 1,\n        channelCountMode: 'explicit',\n        channelInterpretation: 'speakers',\n        numberOfInputs: options.outputChannelCount[i]\n      }));\n    }\n\n    for (let i = 0; i < options.numberOfInputs; i += 1) {\n      gainNodes[i].connect(inputChannelSplitterNodes[i]);\n\n      for (let j = 0; j < options.channelCount; j += 1) {\n        inputChannelSplitterNodes[i].connect(inputChannelMergerNode, j, i * options.channelCount + j);\n      }\n    }\n\n    const parameterMap = new ReadOnlyMap(processorConstructor.parameterDescriptors === undefined ? [] : processorConstructor.parameterDescriptors.map(({\n      name\n    }, index) => {\n      const constantSourceNode = constantSourceNodes[index];\n      constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);\n      constantSourceNode.start(0);\n      return [name, constantSourceNode.offset];\n    }));\n    inputChannelMergerNode.connect(scriptProcessorNode);\n    let channelInterpretation = options.channelInterpretation;\n    let onprocessorerror = null; // Bug #87: Expose at least one output to make this node connectable.\n\n    const outputAudioNodes = options.numberOfOutputs === 0 ? [scriptProcessorNode] : outputChannelMergerNodes;\n    const nativeAudioWorkletNodeFaker = {\n      get bufferSize() {\n        return bufferSize;\n      },\n\n      get channelCount() {\n        return options.channelCount;\n      },\n\n      set channelCount(_) {\n        // Bug #61: This is not part of the standard but required for the faker to work.\n        throw createInvalidStateError();\n      },\n\n      get channelCountMode() {\n        return options.channelCountMode;\n      },\n\n      set channelCountMode(_) {\n        // Bug #61: This is not part of the standard but required for the faker to work.\n        throw createInvalidStateError();\n      },\n\n      get channelInterpretation() {\n        return channelInterpretation;\n      },\n\n      set channelInterpretation(value) {\n        for (const gainNode of gainNodes) {\n          gainNode.channelInterpretation = value;\n        }\n\n        channelInterpretation = value;\n      },\n\n      get context() {\n        return scriptProcessorNode.context;\n      },\n\n      get inputs() {\n        return gainNodes;\n      },\n\n      get numberOfInputs() {\n        return options.numberOfInputs;\n      },\n\n      get numberOfOutputs() {\n        return options.numberOfOutputs;\n      },\n\n      get onprocessorerror() {\n        return onprocessorerror;\n      },\n\n      set onprocessorerror(value) {\n        if (typeof onprocessorerror === 'function') {\n          nativeAudioWorkletNodeFaker.removeEventListener('processorerror', onprocessorerror);\n        }\n\n        onprocessorerror = typeof value === 'function' ? value : null;\n\n        if (typeof onprocessorerror === 'function') {\n          nativeAudioWorkletNodeFaker.addEventListener('processorerror', onprocessorerror);\n        }\n      },\n\n      get parameters() {\n        return parameterMap;\n      },\n\n      get port() {\n        return messageChannel.port2;\n      },\n\n      addEventListener(...args) {\n        return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);\n      },\n\n      connect: connectMultipleOutputs.bind(null, outputAudioNodes),\n      disconnect: disconnectMultipleOutputs.bind(null, outputAudioNodes),\n\n      dispatchEvent(...args) {\n        return scriptProcessorNode.dispatchEvent(args[0]);\n      },\n\n      removeEventListener(...args) {\n        return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);\n      }\n\n    };\n    const patchedEventListeners = new Map(); // tslint:disable-line:max-line-length\n\n    messageChannel.port1.addEventListener = (addEventListener => {\n      return (...args) => {\n        if (args[0] === 'message') {\n          const unpatchedEventListener = typeof args[1] === 'function' ? args[1] : typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function' ? args[1].handleEvent : null;\n\n          if (unpatchedEventListener !== null) {\n            const patchedEventListener = patchedEventListeners.get(args[1]);\n\n            if (patchedEventListener !== undefined) {\n              args[1] = patchedEventListener;\n            } else {\n              args[1] = event => {\n                exposeCurrentFrameAndCurrentTime(nativeContext.currentTime, nativeContext.sampleRate, () => unpatchedEventListener(event));\n              };\n\n              patchedEventListeners.set(unpatchedEventListener, args[1]);\n            }\n          }\n        }\n\n        return addEventListener.call(messageChannel.port1, args[0], args[1], args[2]);\n      };\n    })(messageChannel.port1.addEventListener);\n\n    messageChannel.port1.removeEventListener = (removeEventListener => {\n      return (...args) => {\n        if (args[0] === 'message') {\n          const patchedEventListener = patchedEventListeners.get(args[1]);\n\n          if (patchedEventListener !== undefined) {\n            patchedEventListeners.delete(args[1]);\n            args[1] = patchedEventListener;\n          }\n        }\n\n        return removeEventListener.call(messageChannel.port1, args[0], args[1], args[2]);\n      };\n    })(messageChannel.port1.removeEventListener);\n\n    let onmessage = null;\n    Object.defineProperty(messageChannel.port1, 'onmessage', {\n      get: () => onmessage,\n      set: value => {\n        if (typeof onmessage === 'function') {\n          messageChannel.port1.removeEventListener('message', onmessage);\n        }\n\n        onmessage = typeof value === 'function' ? value : null;\n\n        if (typeof onmessage === 'function') {\n          messageChannel.port1.addEventListener('message', onmessage);\n          messageChannel.port1.start();\n        }\n      }\n    });\n    processorConstructor.prototype.port = messageChannel.port1;\n    let audioWorkletProcessor = null;\n    const audioWorkletProcessorPromise = createAudioWorkletProcessor(nativeContext, nativeAudioWorkletNodeFaker, processorConstructor, options);\n    audioWorkletProcessorPromise.then(dWrkltPrcssr => audioWorkletProcessor = dWrkltPrcssr);\n    const inputs = createNestedArrays(options.numberOfInputs, options.channelCount);\n    const outputs = createNestedArrays(options.numberOfOutputs, options.outputChannelCount);\n    const parameters = processorConstructor.parameterDescriptors === undefined ? [] : processorConstructor.parameterDescriptors.reduce((prmtrs, {\n      name\n    }) => ({ ...prmtrs,\n      [name]: new Float32Array(128)\n    }), {});\n    let isActive = true;\n\n    const disconnectOutputsGraph = () => {\n      if (options.numberOfOutputs > 0) {\n        scriptProcessorNode.disconnect(outputChannelSplitterNode);\n      }\n\n      for (let i = 0, outputChannelSplitterNodeOutput = 0; i < options.numberOfOutputs; i += 1) {\n        const outputChannelMergerNode = outputChannelMergerNodes[i];\n\n        for (let j = 0; j < options.outputChannelCount[i]; j += 1) {\n          outputChannelSplitterNode.disconnect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n        }\n\n        outputChannelSplitterNodeOutput += options.outputChannelCount[i];\n      }\n    };\n\n    scriptProcessorNode.onaudioprocess = ({\n      inputBuffer,\n      outputBuffer\n    }) => {\n      if (audioWorkletProcessor !== null) {\n        for (let i = 0; i < bufferSize; i += 128) {\n          for (let j = 0; j < options.numberOfInputs; j += 1) {\n            for (let k = 0; k < options.channelCount; k += 1) {\n              copyFromChannel(inputBuffer, inputs[j], k, k, i);\n            }\n          }\n\n          if (processorConstructor.parameterDescriptors !== undefined) {\n            processorConstructor.parameterDescriptors.forEach(({\n              name\n            }, index) => {\n              copyFromChannel(inputBuffer, parameters, name, numberOfInputChannels + index, i);\n            });\n          }\n\n          for (let j = 0; j < options.numberOfInputs; j += 1) {\n            for (let k = 0; k < options.outputChannelCount[j]; k += 1) {\n              // The byteLength will be 0 when the ArrayBuffer was transferred.\n              if (outputs[j][k].byteLength === 0) {\n                outputs[j][k] = new Float32Array(128);\n              }\n            }\n          }\n\n          try {\n            const potentiallyEmptyInputs = inputs.map((input, index) => {\n              const auxiliaryGainNodes = auxiliaryGainNodeStore.get(nativeAudioWorkletNodeFaker);\n\n              if (auxiliaryGainNodes === undefined || auxiliaryGainNodes.get(index) === undefined) {\n                return [];\n              }\n\n              return input;\n            });\n            const activeSourceFlag = exposeCurrentFrameAndCurrentTime(nativeContext.currentTime + i / nativeContext.sampleRate, nativeContext.sampleRate, () => audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters));\n            isActive = activeSourceFlag;\n\n            for (let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1) {\n              for (let k = 0; k < options.outputChannelCount[j]; k += 1) {\n                copyToChannel(outputBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i);\n              }\n\n              outputChannelSplitterNodeOutput += options.outputChannelCount[j];\n            }\n          } catch (error) {\n            isActive = false;\n            nativeAudioWorkletNodeFaker.dispatchEvent(new ErrorEvent('processorerror', {\n              error\n            }));\n          }\n\n          if (!isActive) {\n            for (let j = 0; j < options.numberOfInputs; j += 1) {\n              gainNodes[j].disconnect(inputChannelSplitterNodes[j]);\n\n              for (let k = 0; k < options.channelCount; k += 1) {\n                inputChannelSplitterNodes[i].disconnect(inputChannelMergerNode, k, j * options.channelCount + k);\n              }\n            }\n\n            if (processorConstructor.parameterDescriptors !== undefined) {\n              const length = processorConstructor.parameterDescriptors.length;\n\n              for (let j = 0; j < length; j += 1) {\n                const constantSourceNode = constantSourceNodes[j];\n                constantSourceNode.disconnect(inputChannelMergerNode, 0, numberOfInputChannels + j);\n                constantSourceNode.stop();\n              }\n            }\n\n            inputChannelMergerNode.disconnect(scriptProcessorNode);\n            scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n\n            if (isConnected) {\n              disconnectOutputsGraph();\n            } else {\n              disconnectFakeGraph();\n            }\n\n            break;\n          }\n        }\n      }\n    };\n\n    let isConnected = false; // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.\n\n    const nativeGainNode = createNativeGainNode(nativeContext, {\n      channelCount: 1,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete',\n      gain: 0\n    });\n\n    const connectFakeGraph = () => scriptProcessorNode.connect(nativeGainNode)\n    /*\n     * Bug #50: Edge does not yet allow to create AudioNodes on a closed AudioContext. Therefore the context property is used here\n     * to make sure to connect the right destination.\n     */\n    .connect(nativeGainNode.context.destination);\n\n    const disconnectFakeGraph = () => {\n      scriptProcessorNode.disconnect(nativeGainNode);\n      nativeGainNode.disconnect();\n    };\n\n    const whenConnected = () => {\n      if (isActive) {\n        disconnectFakeGraph();\n\n        if (options.numberOfOutputs > 0) {\n          scriptProcessorNode.connect(outputChannelSplitterNode);\n        }\n\n        for (let i = 0, outputChannelSplitterNodeOutput = 0; i < options.numberOfOutputs; i += 1) {\n          const outputChannelMergerNode = outputChannelMergerNodes[i];\n\n          for (let j = 0; j < options.outputChannelCount[i]; j += 1) {\n            outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n          }\n\n          outputChannelSplitterNodeOutput += options.outputChannelCount[i];\n        }\n      }\n\n      isConnected = true;\n    };\n\n    const whenDisconnected = () => {\n      if (isActive) {\n        connectFakeGraph();\n        disconnectOutputsGraph();\n      }\n\n      isConnected = false;\n    };\n\n    connectFakeGraph();\n    return monitorConnections(nativeAudioWorkletNodeFaker, whenConnected, whenDisconnected);\n  };\n};","import { NODE_TO_PROCESSOR_MAPS } from '../globals';\nimport { createAudioWorkletProcessorPromise } from './create-audio-worklet-processor-promise';\nexport const createAudioWorkletProcessor = (nativeContext, nativeAudioWorkletNode, processorConstructor, audioWorkletNodeOptions) => {\n  let nodeToProcessorMap = NODE_TO_PROCESSOR_MAPS.get(nativeContext);\n\n  if (nodeToProcessorMap === undefined) {\n    nodeToProcessorMap = new WeakMap();\n    NODE_TO_PROCESSOR_MAPS.set(nativeContext, nodeToProcessorMap);\n  }\n\n  const audioWorkletProcessorPromise = createAudioWorkletProcessorPromise(processorConstructor, audioWorkletNodeOptions);\n  nodeToProcessorMap.set(nativeAudioWorkletNode, audioWorkletProcessorPromise);\n  return audioWorkletProcessorPromise;\n};","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioBufferSourceNodeStartMethodConsecutiveCalls } from '../helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls';\nimport { wrapAudioBufferSourceNodeStartMethodDurationParameter } from '../helpers/wrap-audio-buffer-source-node-start-method-duration-parameter';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeAudioBufferSourceNodeFactory = (addSilentConnection, cacheTestResult, createNativeAudioNode, testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, testAudioBufferSourceNodeStartMethodDurationParameterSupport, testAudioBufferSourceNodeStartMethodOffsetClampingSupport, testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClampling, wrapAudioBufferSourceNodeStopMethodNullifiedBuffer, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) => {\n  return (nativeContext, options = {}) => {\n    const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createBufferSource());\n    assignNativeAudioNodeOptions(nativeAudioBufferSourceNode, options);\n    assignNativeAudioNodeAudioParamValue(nativeAudioBufferSourceNode, options, 'playbackRate'); // Bug #71: Edge does not allow to set the buffer to null.\n\n    assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'buffer'); // Bug #149: Safari does not yet support the detune AudioParam.\n\n    assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loop');\n    assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopEnd');\n    assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopStart'); // Bug #69: Safari does allow calls to start() of an already scheduled AudioBufferSourceNode.\n\n    if (!cacheTestResult(testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, () => testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(nativeContext))) {\n      wrapAudioBufferSourceNodeStartMethodConsecutiveCalls(nativeAudioBufferSourceNode);\n    } // Bug #92: Chrome & Edge do not respect the duration parameter yet.\n\n\n    if (!cacheTestResult(testAudioBufferSourceNodeStartMethodDurationParameterSupport, testAudioBufferSourceNodeStartMethodDurationParameterSupport)) {\n      wrapAudioBufferSourceNodeStartMethodDurationParameter(nativeAudioBufferSourceNode, nativeContext);\n    } // Bug #154 & #155: Safari does not handle offsets which are equal to or greater than the duration of the buffer.\n\n\n    if (!cacheTestResult(testAudioBufferSourceNodeStartMethodOffsetClampingSupport, () => testAudioBufferSourceNodeStartMethodOffsetClampingSupport(nativeContext))) {\n      wrapAudioBufferSourceNodeStartMethodOffsetClampling(nativeAudioBufferSourceNode);\n    } // Bug #162: Safari does throw an error when stop() is called on an AudioBufferSourceNode which has no buffer assigned to it.\n\n\n    if (!cacheTestResult(testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, () => testAudioBufferSourceNodeStopMethodNullifiedBufferSupport(nativeContext))) {\n      wrapAudioBufferSourceNodeStopMethodNullifiedBuffer(nativeAudioBufferSourceNode, nativeContext);\n    } // Bug #44: Only Chrome, Firefox & Opera throw a RangeError yet.\n\n\n    if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n      wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeAudioBufferSourceNode);\n    } // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.\n\n\n    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () => testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext))) {\n      wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeAudioBufferSourceNode, nativeContext);\n    } // Bug #44: Only Firefox does not throw a RangeError yet.\n\n\n    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n      wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeAudioBufferSourceNode);\n    } // Bug #175: Safari will not fire an ended event if the AudioBufferSourceNode is unconnected.\n\n\n    addSilentConnection(nativeContext, nativeAudioBufferSourceNode);\n    return nativeAudioBufferSourceNode;\n  };\n};","import { createInvalidStateError } from '../factories/invalid-state-error';\nexport const wrapAudioBufferSourceNodeStartMethodConsecutiveCalls = nativeAudioBufferSourceNode => {\n  nativeAudioBufferSourceNode.start = (start => {\n    let isScheduled = false;\n    return (when = 0, offset = 0, duration) => {\n      if (isScheduled) {\n        throw createInvalidStateError();\n      }\n\n      start.call(nativeAudioBufferSourceNode, when, offset, duration);\n      isScheduled = true;\n    };\n  })(nativeAudioBufferSourceNode.start);\n};","export const wrapAudioBufferSourceNodeStartMethodDurationParameter = (nativeAudioScheduledSourceNode, nativeContext) => {\n  let endTime = Number.POSITIVE_INFINITY;\n  let stopTime = Number.POSITIVE_INFINITY;\n\n  nativeAudioScheduledSourceNode.start = ((start, stop) => {\n    return (when = 0, offset = 0, duration = Number.POSITIVE_INFINITY) => {\n      start.call(nativeAudioScheduledSourceNode, when, offset);\n\n      if (duration >= 0 && duration < Number.POSITIVE_INFINITY) {\n        const actualStartTime = Math.max(when, nativeContext.currentTime); // @todo The playbackRate could of course also have been automated and is not always fixed.\n\n        const durationInBufferTime = duration / nativeAudioScheduledSourceNode.playbackRate.value;\n        endTime = actualStartTime + durationInBufferTime;\n        stop.call(nativeAudioScheduledSourceNode, Math.min(endTime, stopTime));\n      }\n    };\n  })(nativeAudioScheduledSourceNode.start, nativeAudioScheduledSourceNode.stop);\n\n  nativeAudioScheduledSourceNode.stop = (stop => {\n    return (when = 0) => {\n      stopTime = Math.max(when, nativeContext.currentTime);\n      stop.call(nativeAudioScheduledSourceNode, Math.min(endTime, stopTime));\n    };\n  })(nativeAudioScheduledSourceNode.stop);\n};","export const testAnalyserNodeGetFloatTimeDomainDataMethodSupport = nativeAnalyserNode => {\n  return typeof nativeAnalyserNode.getFloatTimeDomainData === 'function';\n};","import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { testAnalyserNodeGetFloatTimeDomainDataMethodSupport } from '../helpers/test-analyser-node-get-float-time-domain-data-method-support';\nimport { wrapAnalyserNodeGetFloatTimeDomainDataMethod } from '../helpers/wrap-analyser-node-get-float-time-domain-data-method';\nexport const createNativeAnalyserNodeFactory = (cacheTestResult, createIndexSizeError, createNativeAudioNode) => {\n  return (nativeContext, options) => {\n    const nativeAnalyserNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createAnalyser()); // Bug #37: Firefox does not create an AnalyserNode with the default properties.\n\n    assignNativeAudioNodeOptions(nativeAnalyserNode, options); // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n\n    if (!(options.maxDecibels > options.minDecibels)) {\n      throw createIndexSizeError();\n    }\n\n    assignNativeAudioNodeOption(nativeAnalyserNode, options, 'fftSize');\n    assignNativeAudioNodeOption(nativeAnalyserNode, options, 'maxDecibels');\n    assignNativeAudioNodeOption(nativeAnalyserNode, options, 'minDecibels');\n    assignNativeAudioNodeOption(nativeAnalyserNode, options, 'smoothingTimeConstant'); // Bug #36: Safari does not support getFloatTimeDomainData() yet.\n\n    if (!cacheTestResult(testAnalyserNodeGetFloatTimeDomainDataMethodSupport, () => testAnalyserNodeGetFloatTimeDomainDataMethodSupport(nativeAnalyserNode))) {\n      wrapAnalyserNodeGetFloatTimeDomainDataMethod(nativeAnalyserNode);\n    }\n\n    return nativeAnalyserNode;\n  };\n};","export const wrapAnalyserNodeGetFloatTimeDomainDataMethod = nativeAnalyserNode => {\n  nativeAnalyserNode.getFloatTimeDomainData = array => {\n    const byteTimeDomainData = new Uint8Array(array.length);\n    nativeAnalyserNode.getByteTimeDomainData(byteTimeDomainData);\n    const length = Math.max(byteTimeDomainData.length, nativeAnalyserNode.fftSize);\n\n    for (let i = 0; i < length; i += 1) {\n      array[i] = (byteTimeDomainData[i] - 128) * 0.0078125;\n    }\n\n    return array;\n  };\n};","const handler = {\n  construct() {\n    return handler;\n  }\n\n};\nexport const isConstructible = constructible => {\n  try {\n    const proxy = new Proxy(constructible, handler);\n    new proxy(); // tslint:disable-line:no-unused-expression\n  } catch {\n    return false;\n  }\n\n  return true;\n};","/*\n * This massive regex tries to cover all the following cases.\n *\n * import './path';\n * import defaultImport from './path';\n * import { namedImport } from './path';\n * import { namedImport as renamendImport } from './path';\n * import * as namespaceImport from './path';\n * import defaultImport, { namedImport } from './path';\n * import defaultImport, { namedImport as renamendImport } from './path';\n * import defaultImport, * as namespaceImport from './path';\n */\nconst IMPORT_STATEMENT_REGEX = /^import(?:(?:[\\s]+[\\w]+|(?:[\\s]+[\\w]+[\\s]*,)?[\\s]*\\{[\\s]*[\\w]+(?:[\\s]+as[\\s]+[\\w]+)?(?:[\\s]*,[\\s]*[\\w]+(?:[\\s]+as[\\s]+[\\w]+)?)*[\\s]*}|(?:[\\s]+[\\w]+[\\s]*,)?[\\s]*\\*[\\s]+as[\\s]+[\\w]+)[\\s]+from)?(?:[\\s]*)(\"([^\"\\\\]|\\\\.)+\"|'([^'\\\\]|\\\\.)+')(?:[\\s]*);?/; // tslint:disable-line:max-line-length\n\nexport const splitImportStatements = (source, url) => {\n  const importStatements = [];\n  let sourceWithoutImportStatements = source.replace(/^[\\s]+/, '');\n  let result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);\n\n  while (result !== null) {\n    const unresolvedUrl = result[1].slice(1, -1);\n    const importStatementWithResolvedUrl = result[0].replace(/([\\s]+)?;?$/, '').replace(unresolvedUrl, new URL(unresolvedUrl, url).toString());\n    importStatements.push(importStatementWithResolvedUrl);\n    sourceWithoutImportStatements = sourceWithoutImportStatements.slice(result[0].length).replace(/^[\\s]+/, '');\n    result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);\n  }\n\n  return [importStatements.join(';'), sourceWithoutImportStatements];\n};","import { NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS } from '../globals';\nimport { isConstructible } from '../helpers/is-constructible';\nimport { splitImportStatements } from '../helpers/split-import-statements';\n\nconst verifyParameterDescriptors = parameterDescriptors => {\n  if (parameterDescriptors !== undefined && !Array.isArray(parameterDescriptors)) {\n    throw new TypeError('The parameterDescriptors property of given value for processorCtor is not an array.');\n  }\n};\n\nconst verifyProcessorCtor = processorCtor => {\n  if (!isConstructible(processorCtor)) {\n    throw new TypeError('The given value for processorCtor should be a constructor.');\n  }\n\n  if (processorCtor.prototype === null || typeof processorCtor.prototype !== 'object') {\n    throw new TypeError('The given value for processorCtor should have a prototype.');\n  }\n};\n\nexport const createAddAudioWorkletModule = (createNotSupportedError, evaluateSource, exposeCurrentFrameAndCurrentTime, fetchSource, getBackupNativeContext, getNativeContext, ongoingRequests, resolvedRequests, window) => {\n  return (context, moduleURL, options = {\n    credentials: 'omit'\n  }) => {\n    const nativeContext = getNativeContext(context);\n    const absoluteUrl = new URL(moduleURL, window.location.href).toString(); // Bug #59: Only Chrome & Opera do implement the audioWorklet property.\n\n    if (nativeContext.audioWorklet !== undefined) {\n      return fetchSource(moduleURL).then(source => {\n        const [importStatements, sourceWithoutImportStatements] = splitImportStatements(source, absoluteUrl);\n        /*\n         * Bug #170: Chrome and Opera do call process() with an array with empty channelData for each input if no input is\n         * connected.\n         *\n         * This is the unminified version of the code used below:\n         *\n         * ```js\n         * `${ importStatements };\n         * ((registerProcessor) => {${ sourceWithoutImportStatements }\n         * })((name, processorCtor) => registerProcessor(name, class extends processorCtor {\n         *\n         *     process (inputs, outputs, parameters) {\n         *         return super.process(\n         *             (inputs.map((input) => input.some((channelData) => channelData.length === 0)) ? [ ] : input),\n         *             outputs,\n         *             parameters\n         *         );\n         *     }\n         *\n         * }))`\n         * ```\n         */\n\n        const wrappedSource = `${importStatements};(registerProcessor=>{${sourceWithoutImportStatements}\n})((n,p)=>registerProcessor(n,class extends p{process(i,o,p){return super.process(i.map(j=>j.some(k=>k.length===0)?[]:j),o,p)}}))`; // tslint:disable-line:max-line-length\n\n        const blob = new Blob([wrappedSource], {\n          type: 'application/javascript; charset=utf-8'\n        });\n        const url = URL.createObjectURL(blob);\n        const backupNativeContext = getBackupNativeContext(nativeContext);\n        const nativeContextOrBackupNativeContext = backupNativeContext !== null ? backupNativeContext : nativeContext;\n        return nativeContextOrBackupNativeContext.audioWorklet.addModule(url, options).then(() => URL.revokeObjectURL(url)) // @todo This could be written more elegantly when Promise.finally() becomes avalaible.\n        .catch(err => {\n          URL.revokeObjectURL(url);\n\n          if (err.code === undefined || err.name === 'SyntaxError') {\n            err.code = 12;\n          }\n\n          throw err;\n        });\n      });\n    }\n\n    const resolvedRequestsOfContext = resolvedRequests.get(context);\n\n    if (resolvedRequestsOfContext !== undefined && resolvedRequestsOfContext.has(moduleURL)) {\n      return Promise.resolve();\n    }\n\n    const ongoingRequestsOfContext = ongoingRequests.get(context);\n\n    if (ongoingRequestsOfContext !== undefined) {\n      const promiseOfOngoingRequest = ongoingRequestsOfContext.get(moduleURL);\n\n      if (promiseOfOngoingRequest !== undefined) {\n        return promiseOfOngoingRequest;\n      }\n    }\n\n    const promise = fetchSource(moduleURL).then(source => {\n      const [importStatements, sourceWithoutImportStatements] = splitImportStatements(source, absoluteUrl);\n      /*\n       * This is the unminified version of the code used below:\n       *\n       * ```js\n       * ${ importStatements };\n       * ((a, b) => {\n       *     (a[b] = a[b] || [ ]).push(\n       *         (AudioWorkletProcessor, global, registerProcessor, sampleRate, self, window) => {\n       *             ${ sourceWithoutImportStatements }\n       *         }\n       *     );\n       * })(window, '_AWGS');\n       * ```\n       */\n      // tslint:disable-next-line:max-line-length\n\n      const wrappedSource = `${importStatements};((a,b)=>{(a[b]=a[b]||[]).push((AudioWorkletProcessor,global,registerProcessor,sampleRate,self,window)=>{${sourceWithoutImportStatements}\n})})(window,'_AWGS')`; // @todo Evaluating the given source code is a possible security problem.\n\n      return evaluateSource(wrappedSource);\n    }).then(() => {\n      const evaluateAudioWorkletGlobalScope = window._AWGS.pop();\n\n      if (evaluateAudioWorkletGlobalScope === undefined) {\n        throw new SyntaxError();\n      }\n\n      exposeCurrentFrameAndCurrentTime(nativeContext.currentTime, nativeContext.sampleRate, () => evaluateAudioWorkletGlobalScope(class AudioWorkletProcessor {}, undefined, (name, processorCtor) => {\n        if (name.trim() === '') {\n          throw createNotSupportedError();\n        }\n\n        const nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);\n\n        if (nodeNameToProcessorConstructorMap !== undefined) {\n          if (nodeNameToProcessorConstructorMap.has(name)) {\n            throw createNotSupportedError();\n          }\n\n          verifyProcessorCtor(processorCtor);\n          verifyParameterDescriptors(processorCtor.parameterDescriptors);\n          nodeNameToProcessorConstructorMap.set(name, processorCtor);\n        } else {\n          verifyProcessorCtor(processorCtor);\n          verifyParameterDescriptors(processorCtor.parameterDescriptors);\n          NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.set(nativeContext, new Map([[name, processorCtor]]));\n        }\n      }, nativeContext.sampleRate, undefined, undefined));\n    }).catch(err => {\n      if (err.code === undefined || err.name === 'SyntaxError') {\n        err.code = 12;\n      }\n\n      throw err;\n    });\n\n    if (ongoingRequestsOfContext === undefined) {\n      ongoingRequests.set(context, new Map([[moduleURL, promise]]));\n    } else {\n      ongoingRequestsOfContext.set(moduleURL, promise);\n    }\n\n    promise.then(() => {\n      const rslvdRqstsFCntxt = resolvedRequests.get(context);\n\n      if (rslvdRqstsFCntxt === undefined) {\n        resolvedRequests.set(context, new Set([moduleURL]));\n      } else {\n        rslvdRqstsFCntxt.add(moduleURL);\n      }\n    }).catch(() => {}) // tslint:disable-line:no-empty\n    // @todo Use finally when it becomes available in all supported browsers.\n    .then(() => {\n      const ngngRqstsFCntxt = ongoingRequests.get(context);\n\n      if (ngngRqstsFCntxt !== undefined) {\n        ngngRqstsFCntxt.delete(moduleURL);\n      }\n    });\n    return promise;\n  };\n};","export const isDelayNode = audioNode => {\n  return 'delayTime' in audioNode;\n};","import { isAudioNode } from '../guards/audio-node';\nimport { isDelayNode } from '../guards/delay-node';\nexport const createDetectCycles = (audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey) => {\n  return function detectCycles(chain, nextLink) {\n    const audioNode = isAudioNode(nextLink) ? nextLink : getValueForKey(audioParamAudioNodeStore, nextLink);\n\n    if (isDelayNode(audioNode)) {\n      return [];\n    }\n\n    if (chain[0] === audioNode) {\n      return [chain];\n    }\n\n    if (chain.includes(audioNode)) {\n      return [];\n    }\n\n    const {\n      outputs\n    } = getAudioNodeConnections(audioNode);\n    return Array.from(outputs).map(outputConnection => detectCycles([...chain, audioNode], outputConnection[0])).reduce((mergedCycles, nestedCycles) => mergedCycles.concat(nestedCycles), []);\n  };\n};","import { detachArrayBuffer } from '../helpers/detach-array-buffer';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport const createDecodeAudioData = (audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, detachedArrayBuffers, getNativeContext, isNativeContext, isNativeOfflineAudioContext, nativeOfflineAudioContextConstructor, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {\n  return (anyContext, audioData) => {\n    const nativeContext = isNativeContext(anyContext) ? anyContext : getNativeContext(anyContext); // Bug #43: Only Chrome and Opera do throw a DataCloneError.\n\n    if (detachedArrayBuffers.has(audioData)) {\n      const err = createDataCloneError();\n      return Promise.reject(err);\n    } // The audioData parameter maybe of a type which can't be added to a WeakSet.\n\n\n    try {\n      detachedArrayBuffers.add(audioData);\n    } catch {} // Ignore errors.\n    // Bug #21: Safari does not support promises yet.\n\n\n    if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeContext))) {\n      // Bug #101: Edge does not decode something on a closed OfflineAudioContext.\n      const nativeContextOrBackupNativeContext = nativeContext.state === 'closed' && nativeOfflineAudioContextConstructor !== null && isNativeOfflineAudioContext(nativeContext) ? new nativeOfflineAudioContextConstructor(1, 1, nativeContext.sampleRate) : nativeContext;\n      const promise = nativeContextOrBackupNativeContext.decodeAudioData(audioData).catch(err => {\n        // Bug #27: Edge is rejecting invalid arrayBuffers with a DOMException.\n        if (err instanceof DOMException && err.name === 'NotSupportedError') {\n          throw new TypeError();\n        }\n\n        throw err;\n      });\n      return promise.then(audioBuffer => {\n        // Bug #157: Only Chrome & Opera do allow the bufferOffset to be out-of-bounds.\n        if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n          wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n        }\n\n        audioBufferStore.add(audioBuffer);\n        return audioBuffer;\n      });\n    } // Bug #21: Safari does not return a Promise yet.\n\n\n    return new Promise((resolve, reject) => {\n      const complete = () => {\n        // Bug #133: Safari does neuter the ArrayBuffer.\n        try {\n          detachArrayBuffer(audioData);\n        } catch {\n          /* Ignore errors. */\n        }\n      };\n\n      const fail = err => {\n        reject(err);\n        complete();\n      }; // Bug #26: Safari throws a synchronous error.\n\n\n      try {\n        // Bug #1: Safari requires a successCallback.\n        nativeContext.decodeAudioData(audioData, audioBuffer => {\n          // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n          // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n          if (typeof audioBuffer.copyFromChannel !== 'function') {\n            wrapAudioBufferCopyChannelMethods(audioBuffer);\n            wrapAudioBufferGetChannelDataMethod(audioBuffer);\n          }\n\n          audioBufferStore.add(audioBuffer);\n          complete();\n          resolve(audioBuffer);\n        }, err => {\n          // Bug #4: Safari returns null instead of an error.\n          if (err === null) {\n            fail(createEncodingError());\n          } else {\n            fail(err);\n          }\n        });\n      } catch (err) {\n        fail(err);\n      }\n    });\n  };\n};","export const detachArrayBuffer = arrayBuffer => {\n  const {\n    port1\n  } = new MessageChannel();\n  port1.postMessage(arrayBuffer, [arrayBuffer]);\n};","export const testClonabilityOfAudioWorkletNodeOptions = audioWorkletNodeOptions => {\n  const {\n    port1\n  } = new MessageChannel();\n\n  try {\n    // This will throw an error if the audioWorkletNodeOptions are not clonable.\n    port1.postMessage(audioWorkletNodeOptions);\n  } finally {\n    port1.close();\n  }\n};","import { testClonabilityOfAudioWorkletNodeOptions } from '../helpers/test-clonability-of-audio-worklet-node-options';\nexport const createNativeAudioWorkletNodeFactory = (createInvalidStateError, createNativeAudioNode, createNativeAudioWorkletNodeFaker, createNativeGainNode, createNotSupportedError, monitorConnections) => {\n  return (nativeContext, baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, options) => {\n    if (nativeAudioWorkletNodeConstructor !== null) {\n      try {\n        const nativeAudioWorkletNode = createNativeAudioNode(nativeContext, ntvCntxt => {\n          return new nativeAudioWorkletNodeConstructor(ntvCntxt, name, options);\n        });\n        const patchedEventListeners = new Map(); // tslint:disable-line:max-line-length\n\n        let onprocessorerror = null;\n        Object.defineProperties(nativeAudioWorkletNode, {\n          /*\n           * Bug #61: Overwriting the property accessors for channelCount and channelCountMode is necessary as long as some\n           * browsers have no native implementation to achieve a consistent behavior.\n           */\n          channelCount: {\n            get: () => options.channelCount,\n            set: () => {\n              throw createInvalidStateError();\n            }\n          },\n          channelCountMode: {\n            get: () => 'explicit',\n            set: () => {\n              throw createInvalidStateError();\n            }\n          },\n          // Bug #156: Chrome & Opera do not yet fire an ErrorEvent.\n          onprocessorerror: {\n            get: () => onprocessorerror,\n            set: value => {\n              if (typeof onprocessorerror === 'function') {\n                nativeAudioWorkletNode.removeEventListener('processorerror', onprocessorerror);\n              }\n\n              onprocessorerror = typeof value === 'function' ? value : null;\n\n              if (typeof onprocessorerror === 'function') {\n                nativeAudioWorkletNode.addEventListener('processorerror', onprocessorerror);\n              }\n            }\n          }\n        });\n\n        nativeAudioWorkletNode.addEventListener = (addEventListener => {\n          return (...args) => {\n            if (args[0] === 'processorerror') {\n              const unpatchedEventListener = typeof args[1] === 'function' ? args[1] : typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function' ? args[1].handleEvent : null;\n\n              if (unpatchedEventListener !== null) {\n                const patchedEventListener = patchedEventListeners.get(args[1]);\n\n                if (patchedEventListener !== undefined) {\n                  args[1] = patchedEventListener;\n                } else {\n                  args[1] = event => {\n                    unpatchedEventListener(new ErrorEvent(args[0], { ...event,\n                      error: new Error()\n                    }));\n                  };\n\n                  patchedEventListeners.set(unpatchedEventListener, args[1]);\n                }\n              }\n            }\n\n            return addEventListener.call(nativeAudioWorkletNode, args[0], args[1], args[2]);\n          };\n        })(nativeAudioWorkletNode.addEventListener);\n\n        nativeAudioWorkletNode.removeEventListener = (removeEventListener => {\n          return (...args) => {\n            if (args[0] === 'processorerror') {\n              const patchedEventListener = patchedEventListeners.get(args[1]);\n\n              if (patchedEventListener !== undefined) {\n                patchedEventListeners.delete(args[1]);\n                args[1] = patchedEventListener;\n              }\n            }\n\n            return removeEventListener.call(nativeAudioWorkletNode, args[0], args[1], args[2]);\n          };\n        })(nativeAudioWorkletNode.removeEventListener);\n        /*\n         * Bug #86: Chrome & Opera do not invoke the process() function if the corresponding AudioWorkletNode is unconnected but has\n         * an output.\n         */\n\n\n        if (options.numberOfOutputs !== 0) {\n          const nativeGainNode = createNativeGainNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            gain: 0\n          });\n          nativeAudioWorkletNode.connect(nativeGainNode)\n          /*\n           * Bug #50: Edge does not yet allow to create AudioNodes on a closed AudioContext. Therefore the context property is\n           * used here to make sure to connect the right destination.\n           */\n          .connect(nativeGainNode.context.destination);\n\n          const whenConnected = () => nativeGainNode.disconnect();\n          /*\n           * Bug #50: Edge does not yet allow to create AudioNodes on a closed AudioContext. Therefore the context property is\n           * used here to make sure to connect the right destination.\n           */\n\n\n          const whenDisconnected = () => nativeGainNode.connect(nativeGainNode.context.destination); // @todo Disconnect the connection when the process() function of the AudioWorkletNode returns false.\n\n\n          return monitorConnections(nativeAudioWorkletNode, whenConnected, whenDisconnected);\n        }\n\n        return nativeAudioWorkletNode;\n      } catch (err) {\n        // Bug #60: Chrome & Opera throw an InvalidStateError instead of a NotSupportedError.\n        if (err.code === 11) {\n          throw createNotSupportedError();\n        }\n\n        throw err;\n      }\n    } // Bug #61: Only Chrome & Opera have an implementation of the AudioWorkletNode yet.\n\n\n    if (processorConstructor === undefined) {\n      throw createNotSupportedError();\n    }\n\n    testClonabilityOfAudioWorkletNodeOptions(options);\n    return createNativeAudioWorkletNodeFaker(nativeContext, baseLatency, processorConstructor, options);\n  };\n};","import { copyFromChannel } from '../helpers/copy-from-channel';\nimport { copyToChannel } from '../helpers/copy-to-channel';\nimport { createNestedArrays } from '../helpers/create-nested-arrays';\nimport { getAudioNodeConnections } from '../helpers/get-audio-node-connections';\nimport { getAudioWorkletProcessor } from '../helpers/get-audio-worklet-processor';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\n\nconst processBuffer = async (proxy, renderedBuffer, nativeOfflineAudioContext, options, processorConstructor, exposeCurrentFrameAndCurrentTime) => {\n  // Ceil the length to the next full render quantum.\n  // Bug #17: Safari does not yet expose the length.\n  const length = renderedBuffer === null ? Math.ceil(proxy.context.length / 128) * 128 : renderedBuffer.length;\n  const numberOfInputChannels = options.channelCount * options.numberOfInputs;\n  const numberOfOutputChannels = options.outputChannelCount.reduce((sum, value) => sum + value, 0);\n  const processedBuffer = numberOfOutputChannels === 0 ? null : nativeOfflineAudioContext.createBuffer(numberOfOutputChannels, length, nativeOfflineAudioContext.sampleRate);\n\n  if (processorConstructor === undefined) {\n    throw new Error('Missing the processor constructor.');\n  }\n\n  const audioNodeConnections = getAudioNodeConnections(proxy);\n  const audioWorkletProcessor = await getAudioWorkletProcessor(nativeOfflineAudioContext, proxy);\n  const inputs = createNestedArrays(options.numberOfInputs, options.channelCount);\n  const outputs = createNestedArrays(options.numberOfOutputs, options.outputChannelCount);\n  const parameters = Array.from(proxy.parameters.keys()).reduce((prmtrs, name) => ({ ...prmtrs,\n    [name]: new Float32Array(128)\n  }), {});\n\n  for (let i = 0; i < length; i += 128) {\n    if (options.numberOfInputs > 0 && renderedBuffer !== null) {\n      for (let j = 0; j < options.numberOfInputs; j += 1) {\n        for (let k = 0; k < options.channelCount; k += 1) {\n          copyFromChannel(renderedBuffer, inputs[j], k, k, i);\n        }\n      }\n    }\n\n    if (processorConstructor.parameterDescriptors !== undefined && renderedBuffer !== null) {\n      processorConstructor.parameterDescriptors.forEach(({\n        name\n      }, index) => {\n        copyFromChannel(renderedBuffer, parameters, name, numberOfInputChannels + index, i);\n      });\n    }\n\n    for (let j = 0; j < options.numberOfInputs; j += 1) {\n      for (let k = 0; k < options.outputChannelCount[j]; k += 1) {\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (outputs[j][k].byteLength === 0) {\n          outputs[j][k] = new Float32Array(128);\n        }\n      }\n    }\n\n    try {\n      const potentiallyEmptyInputs = inputs.map((input, index) => {\n        if (audioNodeConnections.activeInputs[index].size === 0) {\n          return [];\n        }\n\n        return input;\n      });\n      const activeSourceFlag = exposeCurrentFrameAndCurrentTime(i / nativeOfflineAudioContext.sampleRate, nativeOfflineAudioContext.sampleRate, () => audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters));\n\n      if (processedBuffer !== null) {\n        for (let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1) {\n          for (let k = 0; k < options.outputChannelCount[j]; k += 1) {\n            copyToChannel(processedBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i);\n          }\n\n          outputChannelSplitterNodeOutput += options.outputChannelCount[j];\n        }\n      }\n\n      if (!activeSourceFlag) {\n        break;\n      }\n    } catch (error) {\n      proxy.dispatchEvent(new ErrorEvent('processorerror', {\n        error\n      }));\n      break;\n    }\n  }\n\n  return processedBuffer;\n};\n\nexport const createAudioWorkletNodeRendererFactory = (connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, deleteUnrenderedAudioWorkletNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getNativeAudioNode, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {\n  return (name, options, processorConstructor) => {\n    const renderedNativeAudioNodes = new WeakMap();\n    let processedBufferPromise = null;\n\n    const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeAudioWorkletNode = getNativeAudioNode(proxy);\n      let nativeOutputNodes = null;\n      const nativeAudioWorkletNodeIsOwnedByContext = isOwnedByContext(nativeAudioWorkletNode, nativeOfflineAudioContext); // Bug #61: Only Chrome & Opera have an implementation of the AudioWorkletNode yet.\n\n      if (nativeAudioWorkletNodeConstructor === null) {\n        const numberOfOutputChannels = options.outputChannelCount.reduce((sum, value) => sum + value, 0);\n        const outputChannelSplitterNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, {\n          channelCount: Math.max(1, numberOfOutputChannels),\n          channelCountMode: 'explicit',\n          channelInterpretation: 'discrete',\n          numberOfOutputs: Math.max(1, numberOfOutputChannels)\n        });\n        const outputChannelMergerNodes = [];\n\n        for (let i = 0; i < proxy.numberOfOutputs; i += 1) {\n          outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeOfflineAudioContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'speakers',\n            numberOfInputs: options.outputChannelCount[i]\n          }));\n        }\n\n        const outputGainNode = createNativeGainNode(nativeOfflineAudioContext, {\n          channelCount: options.channelCount,\n          channelCountMode: options.channelCountMode,\n          channelInterpretation: options.channelInterpretation,\n          gain: 1\n        });\n        outputGainNode.connect = connectMultipleOutputs.bind(null, outputChannelMergerNodes);\n        outputGainNode.disconnect = disconnectMultipleOutputs.bind(null, outputChannelMergerNodes);\n        nativeOutputNodes = [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode];\n      } else if (!nativeAudioWorkletNodeIsOwnedByContext) {\n        nativeAudioWorkletNode = new nativeAudioWorkletNodeConstructor(nativeOfflineAudioContext, name);\n      }\n\n      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeOutputNodes === null ? nativeAudioWorkletNode : nativeOutputNodes[2]);\n\n      if (nativeOutputNodes !== null) {\n        if (processedBufferPromise === null) {\n          if (processorConstructor === undefined) {\n            throw new Error('Missing the processor constructor.');\n          }\n\n          if (nativeOfflineAudioContextConstructor === null) {\n            throw new Error('Missing the native OfflineAudioContext constructor.');\n          } // Bug #47: The AudioDestinationNode in Edge and Safari gets not initialized correctly.\n\n\n          const numberOfInputChannels = proxy.channelCount * proxy.numberOfInputs;\n          const numberOfParameters = processorConstructor.parameterDescriptors === undefined ? 0 : processorConstructor.parameterDescriptors.length;\n          const numberOfChannels = numberOfInputChannels + numberOfParameters;\n\n          const renderBuffer = async () => {\n            const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(numberOfChannels, // Ceil the length to the next full render quantum.\n            // Bug #17: Safari does not yet expose the length.\n            Math.ceil(proxy.context.length / 128) * 128, nativeOfflineAudioContext.sampleRate);\n            const gainNodes = [];\n            const inputChannelSplitterNodes = [];\n\n            for (let i = 0; i < options.numberOfInputs; i += 1) {\n              gainNodes.push(createNativeGainNode(partialOfflineAudioContext, {\n                channelCount: options.channelCount,\n                channelCountMode: options.channelCountMode,\n                channelInterpretation: options.channelInterpretation,\n                gain: 1\n              }));\n              inputChannelSplitterNodes.push(createNativeChannelSplitterNode(partialOfflineAudioContext, {\n                channelCount: options.channelCount,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'discrete',\n                numberOfOutputs: options.channelCount\n              }));\n            }\n\n            const constantSourceNodes = await Promise.all(Array.from(proxy.parameters.values()).map(async audioParam => {\n              const constantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'discrete',\n                offset: audioParam.value\n              });\n              await renderAutomation(partialOfflineAudioContext, audioParam, constantSourceNode.offset, trace);\n              return constantSourceNode;\n            }));\n            const inputChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n              channelCount: 1,\n              channelCountMode: 'explicit',\n              channelInterpretation: 'speakers',\n              numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)\n            });\n\n            for (let i = 0; i < options.numberOfInputs; i += 1) {\n              gainNodes[i].connect(inputChannelSplitterNodes[i]);\n\n              for (let j = 0; j < options.channelCount; j += 1) {\n                inputChannelSplitterNodes[i].connect(inputChannelMergerNode, j, i * options.channelCount + j);\n              }\n            }\n\n            for (const [index, constantSourceNode] of constantSourceNodes.entries()) {\n              constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);\n              constantSourceNode.start(0);\n            }\n\n            inputChannelMergerNode.connect(partialOfflineAudioContext.destination);\n            await Promise.all(gainNodes.map(gainNode => renderInputsOfAudioNode(proxy, partialOfflineAudioContext, gainNode, trace)));\n            return renderNativeOfflineAudioContext(partialOfflineAudioContext);\n          };\n\n          processedBufferPromise = processBuffer(proxy, numberOfChannels === 0 ? null : await renderBuffer(), nativeOfflineAudioContext, options, processorConstructor, exposeCurrentFrameAndCurrentTime);\n        }\n\n        const processedBuffer = await processedBufferPromise;\n        const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext);\n        const [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode] = nativeOutputNodes;\n\n        if (processedBuffer !== null) {\n          audioBufferSourceNode.buffer = processedBuffer;\n          audioBufferSourceNode.start(0);\n        }\n\n        audioBufferSourceNode.connect(outputChannelSplitterNode);\n\n        for (let i = 0, outputChannelSplitterNodeOutput = 0; i < proxy.numberOfOutputs; i += 1) {\n          const outputChannelMergerNode = outputChannelMergerNodes[i];\n\n          for (let j = 0; j < options.outputChannelCount[i]; j += 1) {\n            outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n          }\n\n          outputChannelSplitterNodeOutput += options.outputChannelCount[i];\n        }\n\n        return outputGainNode;\n      }\n\n      if (!nativeAudioWorkletNodeIsOwnedByContext) {\n        for (const [nm, audioParam] of proxy.parameters.entries()) {\n          await renderAutomation(nativeOfflineAudioContext, audioParam, // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n          nativeAudioWorkletNode.parameters.get(nm), trace);\n        }\n      } else {\n        for (const [nm, audioParam] of proxy.parameters.entries()) {\n          await connectAudioParam(nativeOfflineAudioContext, audioParam, // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n          nativeAudioWorkletNode.parameters.get(nm), trace);\n        }\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioWorkletNode, trace);\n      return nativeAudioWorkletNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        deleteUnrenderedAudioWorkletNode(nativeOfflineAudioContext, proxy);\n        const renderedNativeAudioWorkletNodeOrGainNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAudioWorkletNodeOrGainNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioWorkletNodeOrGainNode);\n        }\n\n        return createAudioNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","import { NODE_TO_PROCESSOR_MAPS } from '../globals';\nimport { getNativeAudioNode } from './get-native-audio-node';\nimport { getValueForKey } from './get-value-for-key';\nexport const getAudioWorkletProcessor = (nativeOfflineAudioContext, proxy) => {\n  const nodeToProcessorMap = getValueForKey(NODE_TO_PROCESSOR_MAPS, nativeOfflineAudioContext);\n  const nativeAudioWorkletNode = getNativeAudioNode(proxy);\n  return getValueForKey(nodeToProcessorMap, nativeAudioWorkletNode);\n};","import { createInvalidStateError } from '../factories/invalid-state-error';\nexport const wrapChannelSplitterNode = channelSplitterNode => {\n  const channelCount = channelSplitterNode.numberOfOutputs; // Bug #97: Safari does not throw an error when attempting to change the channelCount to something other than its initial value.\n\n  Object.defineProperty(channelSplitterNode, 'channelCount', {\n    get: () => channelCount,\n    set: value => {\n      if (value !== channelCount) {\n        throw createInvalidStateError();\n      }\n    }\n  });\n  /*\n   * Bug #30: Only Chrome, Firefox & Opera throw an error when attempting to change the channelCountMode to something other than\n   * explicit.\n   */\n\n  Object.defineProperty(channelSplitterNode, 'channelCountMode', {\n    get: () => 'explicit',\n    set: value => {\n      if (value !== 'explicit') {\n        throw createInvalidStateError();\n      }\n    }\n  });\n  /*\n   * Bug #32: Only Chrome, Firefox & Opera throws an error when attempting to change the channelInterpretation to something other than\n   * discrete.\n   */\n\n  Object.defineProperty(channelSplitterNode, 'channelInterpretation', {\n    get: () => 'discrete',\n    set: value => {\n      if (value !== 'discrete') {\n        throw createInvalidStateError();\n      }\n    }\n  });\n};","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapChannelSplitterNode } from '../helpers/wrap-channel-splitter-node';\nexport const createNativeChannelSplitterNodeFactory = createNativeAudioNode => {\n  return (nativeContext, options) => {\n    const nativeChannelSplitterNode = createNativeAudioNode(nativeContext, ntvCntxt => {\n      return ntvCntxt.createChannelSplitter(options.numberOfOutputs);\n    }); // Bug #96: Safari does not have the correct channelCount.\n    // Bug #29: Edge & Safari do not have the correct channelCountMode.\n    // Bug #31: Edge & Safari do not have the correct channelInterpretation.\n\n    assignNativeAudioNodeOptions(nativeChannelSplitterNode, options); // Bug #29, #30, #31, #32, #96 & #97: Only Chrome, Firefox & Opera partially support the spec yet.\n\n    wrapChannelSplitterNode(nativeChannelSplitterNode);\n    return nativeChannelSplitterNode;\n  };\n};","import { createInvalidAccessError } from '../factories/invalid-access-error';\nexport const wrapIIRFilterNodeGetFrequencyResponseMethod = nativeIIRFilterNode => {\n  nativeIIRFilterNode.getFrequencyResponse = (getFrequencyResponse => {\n    return (frequencyHz, magResponse, phaseResponse) => {\n      if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n        throw createInvalidAccessError();\n      }\n\n      return getFrequencyResponse.call(nativeIIRFilterNode, frequencyHz, magResponse, phaseResponse);\n    };\n  })(nativeIIRFilterNode.getFrequencyResponse);\n};","import { wrapIIRFilterNodeGetFrequencyResponseMethod } from '../helpers/wrap-iir-filter-node-get-frequency-response-method';\nconst DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers'\n};\nexport const createIIRFilterNodeConstructor = (audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext) => {\n  return class IIRFilterNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeIIRFilterNode = createNativeIIRFilterNode(nativeContext, isOffline ? null : context.baseLatency, mergedOptions);\n      const iirFilterNodeRenderer = isOffline ? createIIRFilterNodeRenderer(mergedOptions.feedback, mergedOptions.feedforward) : null;\n      super(context, false, nativeIIRFilterNode, iirFilterNodeRenderer); // Bug #23 & #24: FirefoxDeveloper does not throw an InvalidAccessError.\n      // @todo Write a test which allows other browsers to remain unpatched.\n\n      wrapIIRFilterNodeGetFrequencyResponseMethod(nativeIIRFilterNode);\n      this._nativeIIRFilterNode = nativeIIRFilterNode;\n    }\n\n    getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n      return this._nativeIIRFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n    }\n\n  };\n};","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar runtime = function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n    return generator;\n  }\n\n  exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\"; // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n\n  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n\n  function Generator() {}\n\n  function GeneratorFunction() {}\n\n  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n\n\n  var IteratorPrototype = {};\n\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n\n  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = \"GeneratorFunction\"; // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      prototype[method] = function (arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function (genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\n    // do is to check its .name property.\n    (ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n  };\n\n  exports.mark = function (genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  }; // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n\n\n  exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n\n        if (value && typeof value === \"object\" && hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function (value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function (err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function (unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function (error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function (resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise = // If enqueue has been called before, then we want to wait until\n      // all previous Promises have been resolved before calling invoke,\n      // so that results are always delivered in the correct order. If\n      // enqueue has not been called before, then it is important to\n      // call invoke immediately, without waiting on a callback to fire,\n      // so that the async generator function has the opportunity to do\n      // any necessary setup in a predictable way. This predictability\n      // is why the Promise constructor synchronously invokes its\n      // executor callback, and why async functions synchronously\n      // execute code before the first await. Since we implement simple\n      // async functions in terms of async generators, it is especially\n      // important to get this right, even though it requires care.\n      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\n      // invocations of the iterator.\n      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n    } // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n\n\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n\n  exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n\n  exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n    return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n    : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        } // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n\n\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n        var record = tryCatch(innerFn, self, context);\n\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted; // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  } // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n\n\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (!info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).\n\n      context.next = delegate.nextLoc; // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    } // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n\n\n    context.delegate = null;\n    return ContinueSentinel;\n  } // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n\n\n  defineIteratorMethods(Gp);\n  Gp[toStringTagSymbol] = \"Generator\"; // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n\n  Gp[iteratorSymbol] = function () {\n    return this;\n  };\n\n  Gp.toString = function () {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function (object) {\n    var keys = [];\n\n    for (var key in object) {\n      keys.push(key);\n    }\n\n    keys.reverse(); // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      } // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n\n\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n            next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n          return next;\n        };\n\n        return next.next = next;\n      }\n    } // Return an iterator with no values.\n\n\n    return {\n      next: doneResult\n    };\n  }\n\n  exports.values = values;\n\n  function doneResult() {\n    return {\n      value: undefined,\n      done: true\n    };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n    reset: function (skipTempReset) {\n      this.prev = 0;\n      this.next = 0; // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n      this.method = \"next\";\n      this.arg = undefined;\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n    stop: function () {\n      this.done = true;\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n    dispatchException: function (exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n    abrupt: function (type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n    complete: function (record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" || record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n    finish: function (finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n    \"catch\": function (tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n\n          return thrown;\n        }\n      } // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n\n\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function (iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  }; // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n\n  return exports;\n}( // If this script is executing as a CommonJS module, use module.exports\n// as the regeneratorRuntime namespace. Otherwise create a new empty\n// object. Either way, the resulting object will be used to initialize\n// the regeneratorRuntime variable at the top of this file.\ntypeof module === \"object\" ? module.exports : {});\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}","var arrayWithHoles = require(\"./arrayWithHoles\");\n\nvar iterableToArrayLimit = require(\"./iterableToArrayLimit\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableRest = require(\"./nonIterableRest\");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray;","function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles;","function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableRest;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","const modal = document.getElementById('modal');\nconst button = document.getElementById('tutorial-button');\n\nbutton.onclick = function () {\n    modal.style.display = 'block';\n}\n\nwindow.onclick = function (event) {\n    if (event.target == modal) {\n        modal.style.display = \"none\";\n    }\n}","import * as Tone from \"tone\";\n\nconst synths = [\n  new Tone.PolySynth(Tone.Synth, {\n    oscillator: {\n      type: \"sawtooth\",\n    },\n  }),\n  new Tone.PolySynth(Tone.Synth, {\n    oscillator: {\n      type: \"sine\",\n    },\n  }),\n  new Tone.PolySynth(Tone.Synth, {\n    oscillator: {\n      type: \"triangle\",\n    },\n  }),\n  new Tone.PolySynth(Tone.Synth, {\n    oscillator: {\n      type: \"square\",\n    },\n  }),\n];\n\nconst beatPatterns = [\"4n\", \"8n\", \"16n\"];\nlet beatPattern = \"8n\";\n\nconst gain = new Tone.Gain(0.5);\ngain.toMaster();\n\nlet synth = synths[0];\n\nconst options = document.body.querySelectorAll(\".synth-option\");\n\nfor (let i = 0; i < options.length; i++) {\n  let option = options[i];\n  option.addEventListener(\"click\", async () => {\n    synth = synths[option.value];\n    option.classList.add(\"active\");\n\n    options.forEach((opt) => {\n      if (option.value !== opt.value) {\n        opt.classList.remove(\"active\");\n      }\n    });\n    synth.connect(gain);\n  });\n}\n\nsynth.connect(gain);\n\nlet patternIdx = Tone.Transport.scheduleRepeat(repeat, beatPattern);\n\nconst patterns = document.body.querySelectorAll(\".pattern-option\");\n\nfor (let i = 0; i < patterns.length; i++) {\n  let pattern = patterns[i];\n  pattern.addEventListener(\"click\", async () => {\n    beatPattern = beatPatterns[pattern.value];\n    Tone.Transport.stop();\n    Tone.Transport.clear(patternIdx);\n    pattern.classList.add(\"active\");\n\n    patterns.forEach((pat) => {\n      if (pattern.value !== pat.value) {\n        pat.classList.remove(\"active\");\n      }\n    });\n    patternIdx = Tone.Transport.scheduleRepeat(repeat, beatPattern);\n    Tone.Transport.start();\n  });\n}\n\nTone.Transport.bpm.value = 128;\n\nlet index = 0;\n\nconst check = document.body.querySelectorAll(\"input\");\nconst play = document.body.querySelector(\".play-btn\");\nconst pause = document.body.querySelector(\".pause-btn\");\nconst rows = document.body.querySelectorAll(\".note-container > div\");\nconst tempo = document.body.querySelector(\".tempo-control\");\nconst clear = document.body.querySelector(\".clear-btn\");\nconst reset = document.body.querySelector(\".rewind-btn\");\nconst notes = [\n  \"C6\",\n  \"B5\",\n  \"A#5\",\n  \"A5\",\n  \"G#5\",\n  \"G5\",\n  \"F#5\",\n  \"F5\",\n  \"E5\",\n  \"D#5\",\n  \"D5\",\n  \"C#5\",\n  \"C5\",\n  \"B4\",\n  \"A#4\",\n  \"A4\",\n  \"G#4\",\n  \"G4\",\n  \"F#4\",\n  \"F4\",\n  \"E4\",\n  \"D#4\",\n  \"D4\",\n  \"C#4\",\n  \"C4\",\n];\n\nplay.addEventListener(\"click\", async () => {\n  Tone.start();\n  Tone.Transport.start();\n});\n\npause.addEventListener(\"click\", async () => {\n  Tone.Transport.stop();\n});\n\ntempo.addEventListener(\"change\", (e) => {\n  Tone.Transport.bpm.rampTo(e.target.value, 0.1);\n});\n\nreset.addEventListener(\"click\", (e) => {\n  index = 0;\n  for (let i = 0; i < rows.length; i++) {\n    let row = rows[i];\n    let inputs = row.querySelectorAll(\"label div\");\n    for (let j = 0; j < inputs.length; j++) {\n      inputs[j].style.boxShadow = \"\";\n    }\n  }\n});\n\nclear.addEventListener(\"click\", (e) => {\n  for (let i = 0; i < check.length; i++) {\n    if (check[i].checked === true) {\n      check[i].checked = false;\n    }\n\n    if (rows[i]) {\n      let row = rows[i];\n      let inputs = row.querySelectorAll(\"label div\");\n      for (let j = 0; j < inputs.length; j++) {\n        inputs[j].style.boxShadow = \"\";\n      }\n    }\n  }\n});\n\nfunction repeat(time) {\n  let step = index % 16;\n  for (let i = 0; i < rows.length; i++) {\n    let note = notes[i];\n    let row = rows[i];\n\n    if (step !== 0) {\n      let prevInput = row.querySelector(`label:nth-child(${step})`);\n      let prevBox = prevInput.querySelector(\"div\");\n\n      prevBox.style.boxShadow = \"\";\n    } else if (step === 0) {\n      let lastInput = row.querySelector(`label:last-child`);\n      let lastBox = lastInput.querySelector(\"div\");\n\n      lastBox.style.boxShadow = \"\";\n    }\n\n    let input = row.querySelector(`label:nth-child(${step + 1})`);\n    let checkbox = input.querySelector(\"input\");\n    let box = input.querySelector(\"div\");\n\n    box.style.boxShadow =\n      \"0 0 0.7px #7fff08, 0 0 2.5px #7fff08, 0 0 6px #7fff08\";\n\n    if (checkbox.checked) {\n      synth.triggerAttackRelease(note, \"8n\", time).volume.value = 3;\n    }\n  }\n  index++;\n}\n","const ToneNote = require(\"tone\");\nimport { Synth, Gain } from \"tone\";\n// import ToneNote from \"Tone\";\n\n// const synthNote = new ToneNote.PolySynth({\n//     \"oscillator\": {\n//         \"type\": \"sine\"\n//     },\n//     \"envelope\": {\n//         \"attack\": 0.1,\n//         \"decay\": 0.15,\n//         \"sustain\": 0.3,\n//         \"release\": 10\n//     }\n// })\n\nconst synthNotes = [\n  new ToneNote.PolySynth(ToneNote.Synth, {\n    oscillator: {\n      type: \"sawtooth\",\n    },\n  }),\n  new ToneNote.PolySynth(ToneNote.Synth, {\n    oscillator: {\n      type: \"sine\",\n    },\n  }),\n  new ToneNote.PolySynth(ToneNote.Synth, {\n    oscillator: {\n      type: \"triangle\",\n    },\n  }),\n  new ToneNote.PolySynth(ToneNote.Synth, {\n    oscillator: {\n      type: \"square\",\n    },\n  }),\n];\n\nconst gainNote = new ToneNote.Gain(0.5);\ngainNote.toMaster();\n\nlet synthNote = synthNotes[0];\n\nconst options = document.body.querySelectorAll(\"li\");\n\nfor (let i = 0; i < options.length; i++) {\n  let option = options[i];\n  option.addEventListener(\"click\", async () => {\n    synthNote = synthNotes[option.value];\n    option.classList.add(\"active\");\n    synthNote.connect(gainNote);\n  });\n}\n\nsynthNote.connect(gainNote);\n\nconst rows = document.body.querySelectorAll(\".note-container > div\");\nconst buttons = document.body.querySelectorAll(\n  \"#piano-roll div, #piano-roll div div\"\n);\n\nconst keys = [\n  \"C6\",\n  \"B5\",\n  \"A#5\",\n  \"A5\",\n  \"G#5\",\n  \"G5\",\n  \"F#5\",\n  \"F5\",\n  \"E5\",\n  \"D#5\",\n  \"D5\",\n  \"C#5\",\n  \"C5\",\n  \"B4\",\n  \"A#4\",\n  \"A4\",\n  \"G#4\",\n  \"G4\",\n  \"F#4\",\n  \"F4\",\n  \"E4\",\n  \"D#4\",\n  \"D4\",\n  \"C#4\",\n  \"C4\",\n];\n\nlet pianoKey;\nfor (let i = 0; i < keys.length; i++) {\n  let row = rows[i];\n  pianoKey = document.querySelector(`.note-${i + 1}`);\n\n  buttons[i].addEventListener(\"click\", async function (e) {\n    e.stopPropagation();\n    pianoKey = document.querySelector(`.note-${i + 1}`);\n    row.classList.remove(`row${i + 1}-animation`);\n\n    void row.offsetWidth;\n    await ToneNote.start();\n    synthNote.triggerAttackRelease(keys[i], \"8n\").volume.value = 3;\n\n    row.classList.add(`row${i + 1}-animation`);\n  });\n}\n\nlet sequencerKey;\nfor (let i = 0; i < keys.length; i++) {\n  sequencerKey = document.querySelectorAll(`.checkbox-row${i + 1}`);\n  for (let j = 0; j < sequencerKey.length; j++) {\n    sequencerKey[j].addEventListener(\"click\", async () => {\n      await ToneNote.start();\n      synthNote.triggerAttackRelease(keys[i], \"8n\").volume.value = 3;\n    });\n  }\n}\n"],"sourceRoot":""}